##
# simple scons file for build

Import('*')	# import SConstruct exported var
import os


gfal_common_libs = ['ldap_r' ] 		# libraries linked
gsimplecache = ["externals/gsimplecache/gsimplecacheOS.os"]
other_headers=['common/', 'externals/gwatchdog/', Dir('./')]
common_src = Glob("common/*.c") 
common_mds = Glob("common/mds/*.c") 
posix_src_all = Glob("posix/*.c")
src_all = common_src +  posix_src_all + common_mds 

gwatchdog_headers = Glob("externals/gwatchdog/*.h")

local_headers = Glob("common/*.h") + Glob("posix/*.h")  + Glob("common/mds/*.h")  + Glob("*.h") 
lfc_headers = local_headers + Glob("common/lfc/*.h")  + Glob("externals/gsimplecache/*.h") + Glob("common/mds/*.h")+  Glob("common/*.h")
srm_headers = local_headers + Glob("common/srm/*.h")  + Glob("externals/gsimplecache/*.h") + Glob("common/mds/*.h")+  Glob("common/*.h")
rfio_headers = local_headers + Glob("common/rfio/*.h")  + Glob("externals/gsimplecache/*.h") + Glob("common/mds/*.h")+  Glob("common/*.h")
dcap_headers = local_headers + Glob("common/dcap/*.h")  + Glob("externals/gsimplecache/*.h") + Glob("common/mds/*.h")+  Glob("common/*.h")

all_headers  = local_headers + srm_headers+ srm_headers+ rfio_headers + dcap_headers

plugin_lfc = Glob("common/lfc/*.c")
plugin_srm = Glob("common/srm/*.c")
plugin_rfio = Glob("common/rfio/*.c")
plugin_dcap = Glob("common/dcap/*.c")

##
# Clone the env for the link flag

env_posix = env.Clone()
env_posix.Append(LIBS=gfal_common_libs)
env_posix.Append(CPPPATH=other_headers)


#main gfal lib
mainlib_main = env_posix.SharedLibrary('../libs/libgfal2', src_all)
mainlib_link1 = env_posix.Symlink("../libs/libgfal2.so.2", mainlib_main)
mainlib_link2 = env_posix.Symlink("../libs/libgfal2.so.2.0", mainlib_main)
mainlib_link3 = env_posix.Symlink("../libs/libgfal2.so.2.0.0", mainlib_main)
mainlib = [mainlib_link1, mainlib_link2, mainlib_link3, mainlib_main]
env_posix.Depends(mainlib,local_headers )
staticlib = env_posix.StaticLibrary('../libs/libgfal2', src_all)

#plugins
env_plugin = env.Clone();
env_plugin.Append(LIBS=["gfal2"])

env_plugin_srm = env_plugin.Clone()
env_plugin_srm.Append(LIBS=[ "gfal_srm_ifce" ] )
plugin_srm_lib = env_plugin_srm.SharedLibrary('../libs/libgfal_plugin_srm', plugin_srm + gsimplecache)
env_plugin_srm.Depends(plugin_srm_lib,srm_headers )

env_plugin_lfc = env_plugin.Clone();
env_plugin_lfc.Append(CFLAGS="-D_REENTRANT")
env_plugin_lfc.Append(CPPPATH=other_headers)
plugin_lfc_lib = env_plugin_lfc.SharedLibrary('../libs/libgfal_plugin_lfc', plugin_lfc+ gsimplecache)
env_plugin_lfc.Depends(plugin_lfc_lib, lfc_headers )

plugin_rfio_lib= env_plugin.SharedLibrary('../libs/libgfal_plugin_rfio', plugin_rfio)
env_plugin.Depends(plugin_rfio_lib,rfio_headers )

plugin_dcap_lib = env_plugin.SharedLibrary('../libs/libgfal_plugin_dcap', plugin_dcap)
env_plugin.Depends(plugin_dcap_lib,dcap_headers )


plugin_dcap_lib = env_plugin.SharedLibrary('../libs/libgfal_plugin_dcap', plugin_dcap)
env_plugin.Depends(plugin_dcap_lib,dcap_headers )


#gfal version
env_version = Environment(LIBPATH=libs, CPPPATH=other_headers);
env_version['ENV']['LD_LIBRARY_PATH'] = env['ENV']['LD_LIBRARY_PATH'];
env_version.Append(LIBS=["gfal2"])
versionexe = env_version.Program("../libs/gfal2_version", Glob("version/*.c"))
env_plugin.Depends(versionexe, local_headers)



Default(plugin_rfio_lib, plugin_dcap_lib, plugin_lfc_lib, plugin_srm_lib, mainlib,staticlib, versionexe)

Return("mainlib", "staticlib", "versionexe", "plugin_lfc_lib", "plugin_srm_lib", "plugin_rfio_lib", "plugin_dcap_lib", "all_headers")
