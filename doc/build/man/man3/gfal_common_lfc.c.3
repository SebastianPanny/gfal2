.TH "/home/adevress/myworkspace/gfal/src/common/lfc/gfal_common_lfc.c" 3 "4 Oct 2011" "Version 2.0.1" "CERN org.glite.Gfal" \" -*- nroff -*-
.ad l
.nh
.SH NAME
/home/adevress/myworkspace/gfal/src/common/lfc/gfal_common_lfc.c \- file for the lfc plugin module 
.SH SYNOPSIS
.br
.PP
\fC#include <regex.h>\fP
.br
\fC#include <pthread.h>\fP
.br
\fC#include <errno.h>\fP
.br
\fC#include <sys/types.h>\fP
.br
\fC#include <dirent.h>\fP
.br
\fC#include <attr/xattr.h>\fP
.br
\fC#include <common/gfal_prototypes.h>\fP
.br
\fC#include <common/gfal_types.h>\fP
.br
\fC#include <common/gfal_common_plugin.h>\fP
.br
\fC#include 'gfal_common_lfc.h'\fP
.br
\fC#include 'gfal_common_lfc_open.h'\fP
.br
\fC#include '../gfal_common_internal.h'\fP
.br
\fC#include '../gfal_common_errverbose.h'\fP
.br
\fC#include '../gfal_common_filedescriptor.h'\fP
.br
\fC#include 'lfc_ifce_ng.h'\fP
.br

.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fB_lfc_opendir_handle\fP"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef _lfc_opendir_handle * \fBlfc_opendir_handle\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "const char * \fBlfc_getName\fP ()"
.br
.ti -1c
.RI "int \fBlfc_chmodG\fP (plugin_handle handle, const char *path, mode_t mode, GError **err)"
.br
.ti -1c
.RI "int \fBlfc_accessG\fP (plugin_handle handle, const char *lfn, int mode, GError **err)"
.br
.ti -1c
.RI "int \fBlfc_renameG\fP (plugin_handle handle, const char *oldpath, const char *newpath, GError **err)"
.br
.ti -1c
.RI "int \fBlfc_symlinkG\fP (plugin_handle handle, const char *oldpath, const char *newpath, GError **err)"
.br
.ti -1c
.RI "int \fBlfc_statG\fP (plugin_handle handle, const char *path, struct stat *st, GError **err)"
.br
.ti -1c
.RI "char ** \fBlfc_getSURLG\fP (plugin_handle handle, const char *path, GError **err)"
.br
.ti -1c
.RI "ssize_t \fBlfc_getxattr_getsurl\fP (plugin_handle handle, const char *path, void *buff, size_t size, GError **err)"
.br
.ti -1c
.RI "ssize_t \fBlfc_getxattr_getguid\fP (plugin_handle handle, const char *path, void *buff, size_t size, GError **err)"
.br
.ti -1c
.RI "ssize_t \fBlfc_getxattr_comment\fP (plugin_handle handle, const char *path, void *buff, size_t size, GError **err)"
.br
.ti -1c
.RI "ssize_t \fBlfc_getxattrG\fP (plugin_handle handle, const char *path, const char *name, void *buff, size_t size, GError **err)"
.br
.ti -1c
.RI "ssize_t \fBlfc_listxattrG\fP (plugin_handle handle, const char *path, char *list, size_t size, GError **err)"
.br
.ti -1c
.RI "int \fBlfc_setxattr_comment\fP (plugin_handle handle, const char *path, const char *name, const void *value, size_t size, int flags, GError **err)"
.br
.ti -1c
.RI "int \fBlfc_setxattrG\fP (plugin_handle handle, const char *path, const char *name, const void *value, size_t size, int flags, GError **err)"
.br
.ti -1c
.RI "char * \fBlfc_resolve_guid\fP (plugin_handle handle, const char *guid, GError **err)"
.br
.ti -1c
.RI "\fBgfal_plugin_interface\fP \fBgfal_plugin_init\fP (gfal_handle handle, GError **err)"
.br
.ti -1c
.RI "gboolean \fBgfal_checker_guid\fP (const char *guid, GError **err)"
.br
.ti -1c
.RI "gboolean \fBgfal_lfc_check_lfn_url\fP (plugin_handle handle, const char *url, plugin_mode mode, GError **err)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "pthread_mutex_t \fBm_lfcinit\fP = PTHREAD_MUTEX_INITIALIZER"
.br
.in -1c
.SH "Detailed Description"
.PP 
file for the lfc plugin module 

\fBAuthor:\fP
.RS 4
Adrien Devresse 
.RE
.PP
\fBVersion:\fP
.RS 4
0.0.1 
.RE
.PP
\fBDate:\fP
.RS 4
06/07/2011 
.RE
.PP

.SH "Function Documentation"
.PP 
.SS "gboolean gfal_checker_guid (const char * guid, GError ** err)"
.PP
parse a guid to check the validity 
.SS "gboolean gfal_lfc_check_lfn_url (plugin_handle handle, const char * url, plugin_mode mode, GError ** err)"
.PP
Check if the passed url and operation is compatible with lfc 
.SS "\fBgfal_plugin_interface\fP gfal_plugin_init (gfal_handle handle, GError ** err)"
.PP
Map function for the lfc interface this function provide the generic PLUGIN interface for the LFC plugin. lfc_initG do : liblfc shared library load, sym resolve, endpoint check, and plugin function map. 
.SS "int lfc_accessG (plugin_handle handle, const char * lfn, int mode, GError ** err)"
.PP
implementation of the access call with the lfc plugin return 0 or -1 if error and report GError** with error code and message 
.SS "int lfc_chmodG (plugin_handle handle, const char * path, mode_t mode, GError ** err)"
.PP
Implementation of the chmod function with the LFC plugin return 0 or the errno if error, or set GError if serious error 
.SS "const char* lfc_getName ()"
.PP
just return the name of the layer 
.SS "char** lfc_getSURLG (plugin_handle handle, const char * path, GError ** err)"
.PP
resolve the lfc link to the surls 
.SS "ssize_t lfc_getxattr_comment (plugin_handle handle, const char * path, void * buff, size_t size, GError ** err)"
.PP
lfc getxattr for path -> comment resolution 
.SS "ssize_t lfc_getxattr_getguid (plugin_handle handle, const char * path, void * buff, size_t size, GError ** err)"
.PP
lfc getxattr for the path -> guid resolution 
.SS "ssize_t lfc_getxattr_getsurl (plugin_handle handle, const char * path, void * buff, size_t size, GError ** err)"
.PP
lfc getxattr for the path -> surls resolution 
.SS "ssize_t lfc_getxattrG (plugin_handle handle, const char * path, const char * name, void * buff, size_t size, GError ** err)"
.PP
lfc getxattr implem 
.SS "ssize_t lfc_listxattrG (plugin_handle handle, const char * path, char * list, size_t size, GError ** err)"
.PP
lfc getxattr implem 
.SS "int lfc_renameG (plugin_handle handle, const char * oldpath, const char * newpath, GError ** err)"
.PP
Implementation of the rename call for the lfc plugin return 0 if success else -1 if error and set GError 
.SS "char* lfc_resolve_guid (plugin_handle handle, const char * guid, GError ** err)"
.PP
Convert a guid to a plugin url if possible return the link in a plugin's url string or err and NULL if not found 
.SS "int lfc_setxattr_comment (plugin_handle handle, const char * path, const char * name, const void * value, size_t size, int flags, GError ** err)"
.PP
setxattr function special for comments 
.SS "int lfc_setxattrG (plugin_handle handle, const char * path, const char * name, const void * value, size_t size, int flags, GError ** err)"
.PP
lfc setxattr implem 
.SS "int lfc_statG (plugin_handle handle, const char * path, struct stat * st, GError ** err)"
.PP
execute a posix stat request on the lfc return 0 and set struct if correct answer, else return negative value and set GError 
.SS "int lfc_symlinkG (plugin_handle handle, const char * oldpath, const char * newpath, GError ** err)"
.PP
Implementation of the symlinkG call for the lfc plugin return 0 if success else -1 if error and set GError 
.SH "Author"
.PP 
Generated automatically by Doxygen for CERN org.glite.Gfal from the source code.
