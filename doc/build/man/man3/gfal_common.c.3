.TH "/home/adevress/myworkspace/gfal/src/common/gfal_common.c" 3 "31 May 2011" "Version 1.90" "CERN org.glite.Gfal" \" -*- nroff -*-
.ad l
.nh
.SH NAME
/home/adevress/myworkspace/gfal/src/common/gfal_common.c \- the core file of the common lib part 
.SH SYNOPSIS
.br
.PP
\fC#include <gfal_srm_ifce.h>\fP
.br
\fC#include <gfal_srm_ifce_types.h>\fP
.br
\fC#include <glib.h>\fP
.br
\fC#include <stdlib.h>\fP
.br
\fC#include <stdio.h>\fP
.br
\fC#include <string.h>\fP
.br
\fC#include 'gfal_common_storage.h'\fP
.br
\fC#include 'gfal_common.h'\fP
.br

.SS "Defines"

.in +1c
.ti -1c
.RI "#define \fBOFF_MAX\fP   2147483647"
.br
.ti -1c
.RI "#define \fBENDPOINT_DEFAULT_PREFIX\fP   'httpg://'"
.br
.ti -1c
.RI "#define \fBENDPOINT_DEFAULT_PREFIX_LEN\fP   strlen('httpg://')"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "int \fBgfal_parse_vomsdata\fP (char *errbuf, int errbufsz)"
.br
.ti -1c
.RI "char * \fBgfal_get_userdn\fP (char *errbuf, int errbufsz)"
.br
.ti -1c
.RI "int \fBgfal_set_vo\fP (const char *vo)"
.br
.RI "\fIset the vo used by gfal \fP"
.ti -1c
.RI "char * \fBgfal_get_vo\fP (char *errbuf, int errbufsz)"
.br
.ti -1c
.RI "int \fBgfal_get_fqan\fP (char ***fqan, char *errbuf, int errbufsz)"
.br
.ti -1c
.RI "int \fBgfal_is_purifydisabled\fP ()"
.br
.ti -1c
.RI "void \fBgfal_errmsg\fP (char *errbuf, int errbufsz, int level, const char *format,...)"
.br
.RI "\fIdisplay an internal message \fP"
.ti -1c
.RI "ssize_t \fBgfal_setfilchg\fP (int fd, const void *buf, size_t size)"
.br
.ti -1c
.RI "int \fBgfal_get\fP (gfal_handle req, char *errbuf, int errbufsz)"
.br
.ti -1c
.RI "int \fBgfal_getstatus\fP (gfal_handle req, char *errbuf, int errbufsz)"
.br
.ti -1c
.RI "int \fBgfal_bringonline\fP (gfal_handle req, char *errbuf, int errbufsz)"
.br
.ti -1c
.RI "int \fBgfal_prestage\fP (gfal_handle req, char *errbuf, int errbufsz)"
.br
.ti -1c
.RI "int \fBgfal_prestagestatus\fP (gfal_handle req, char *errbuf, int errbufsz)"
.br
.ti -1c
.RI "int \fBgfal_pin\fP (gfal_handle req, char *errbuf, int errbufsz)"
.br
.ti -1c
.RI "int \fBgfal_release\fP (gfal_handle req, char *errbuf, int errbufsz)"
.br
.ti -1c
.RI "int \fBgfal_set_xfer_done\fP (gfal_handle req, char *errbuf, int errbufsz)"
.br
.ti -1c
.RI "int \fBgfal_set_xfer_running\fP (gfal_handle req, char *errbuf, int errbufsz)"
.br
.ti -1c
.RI "int \fBgfal_abortrequest\fP (gfal_handle req, char *errbuf, int errbufsz)"
.br
.ti -1c
.RI "int \fBgfal_abortfiles\fP (gfal_handle req, char *errbuf, int errbufsz)"
.br
.ti -1c
.RI "int \fBmdtomd32\fP (struct stat64 *statb64, struct stat *statbuf)"
.br
.ti -1c
.RI "char * \fBendpointfromsurl\fP (const char *surl, char *errbuf, int errbufsz, int _prefixing_on)"
.br
.ti -1c
.RI "int \fBcanonical_url\fP (const char *url, const char *defproto, char *newurl, int newurlsz, char *errbuf, int errbufsz)"
.br
.ti -1c
.RI "int \fBparseturl\fP (const char *turl, char *protocol, int protocolsz, char *pfn, int pfnsz, char *errbuf, int errbufsz)"
.br
.ti -1c
.RI "int \fBsetypesandendpoints\fP (const char *endpoint, char ***se_types, char ***se_endpoints, char *errbuf, int errbufsz)"
.br
.ti -1c
.RI "int \fBsetypesandendpointsfromsurl\fP (const char *surl, char ***se_types, char ***se_endpoints, char *errbuf, int errbufsz)"
.br
.ti -1c
.RI "char * \fBget_catalog_endpoint\fP (char *errbuf, int errbufsz)"
.br
.ti -1c
.RI "char * \fBgfal_guidforpfn\fP (const char *pfn, char *errbuf, int errbufsz)"
.br
.ti -1c
.RI "int \fBgfal_guidsforpfns\fP (int nbfiles, const char **pfns, int amode, char ***guids, int **statuses, char *errbuf, int errbufsz)"
.br
.ti -1c
.RI "int \fBguid_exists\fP (const char *guid, char *errbuf, int errbufsz)"
.br
.ti -1c
.RI "char ** \fBgfal_get_replicas\fP (const char *lfn, const char *guid, char *errbuf, int errbufsz)"
.br
.ti -1c
.RI "int \fBgfal_unregister_pfns\fP (int nbguids, const char **guids, const char **pfns, int **results, char *errbuf, int errbufsz)"
.br
.ti -1c
.RI "char * \fBguidfromlfn\fP (const char *lfn, char *errbuf, int errbufsz)"
.br
.ti -1c
.RI "char ** \fBgfal_get_aliases\fP (const char *lfn, const char *guid, char *errbuf, int errbufsz)"
.br
.ti -1c
.RI "int \fBgfal_register_file\fP (const char *lfn, const char *guid, const char *surl, mode_t mode, GFAL_LONG64 size, int bool_createonly, char *errbuf, int errbufsz)"
.br
.ti -1c
.RI "int \fBregister_alias\fP (const char *guid, const char *lfn, char *errbuf, int errbufsz)"
.br
.ti -1c
.RI "int \fBunregister_alias\fP (const char *guid, const char *lfn, char *errbuf, int errbufsz)"
.br
.ti -1c
.RI "int \fBgetdomainnm\fP (char *name, int namelen)"
.br
.ti -1c
.RI "char * \fBget_default_se\fP (char *errbuf, int errbufsz)"
.br
.ti -1c
.RI "int \fBpurify_surl\fP (const char *surl, char *surl_cat, const int surl_cat_sz)"
.br
.ti -1c
.RI "int \fBgenerate_surls\fP (gfal_handle gfal, char *errbuf, int errbufsz)"
.br
.ti -1c
.RI "gfal_request \fBgfal_request_new\fP ()"
.br
.ti -1c
.RI "int \fBgfal_init\fP (gfal_request req, gfal_handle *gfal, char *errbuf, int errbufsz)"
.br
.ti -1c
.RI "int \fBcheck_gfal_handle\fP (gfal_handle req, int allow_null_surls, char *errbuf, int errbufsz)"
.br
.ti -1c
.RI "void \fBfree_gfal_results\fP (gfal_filestatus *gfal, int n)"
.br
.ti -1c
.RI "void \fBfree_srmv2_mdstatuses\fP (struct srmv2_mdfilestatus *md, int n)"
.br
.ti -1c
.RI "int \fBcopy_gfal_mdresults\fP (struct srmv2_mdfilestatus srmv2, gfal_filestatus *gfal)"
.br
.ti -1c
.RI "int \fBcopy_gfal_results\fP (gfal_handle req, enum status_type stype)"
.br
.ti -1c
.RI "int \fBgfal_get_results\fP (gfal_handle req, gfal_filestatus **results)"
.br
.ti -1c
.RI "int \fBgfal_get_ids\fP (gfal_handle req, int *srm_reqid, int **srm_fileids, char **srmv2_reqtoken)"
.br
.ti -1c
.RI "int \fBgfal_get_ids_setype\fP (gfal_handle req, enum se_type *type, int *srm_reqid, int **srm_fileids, char **srmv2_reqtoken)"
.br
.ti -1c
.RI "int \fBgfal_set_ids\fP (gfal_handle req, int nbfileids, const int *srm_fileids, int srm_reqid, const char *srmv2_reqtoken, char *errbuf, int errbufsz)"
.br
.ti -1c
.RI "void \fBgfal_handle_free\fP (gfal_handle req)"
.br
.ti -1c
.RI "char * \fBgfal_generate_lfn\fP (char *errbuf, int errbufsz)"
.br
.ti -1c
.RI "char * \fBgfal_generate_guid\fP (char *errbuf, int errbufsz)"
.br
.ti -1c
.RI "char * \fBgfal_get_hostname\fP (const char *path, char *errbuf, int errbufsz)"
.br
.ti -1c
.RI "int \fBgfal_get_errno\fP ()"
.br
.in -1c
.SH "Detailed Description"
.PP 
the core file of the common lib part 

\fBAuthor:\fP
.RS 4
Devresse Adrien 
.RE
.PP
\fBVersion:\fP
.RS 4
0.0.1 
.RE
.PP
\fBDate:\fP
.RS 4
8/04/2011 
.RE
.PP

.SH "Function Documentation"
.PP 
.SS "void gfal_errmsg (char *, int, int, const char *,  ...)"
.PP
display an internal message 
.PP
\fBDeprecated\fP
.RS 4
old rerror system, will be replaced 
.RE
.PP

.SS "gfal_request gfal_request_new ()"
.PP
end next gen 
.SH "Author"
.PP 
Generated automatically by Doxygen for CERN org.glite.Gfal from the source code.
