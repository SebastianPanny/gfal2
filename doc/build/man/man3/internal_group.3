.TH "internal functions" 3 "25 May 2011" "Version 1.90" "CERN org.glite.Gfal" \" -*- nroff -*-
.ad l
.nh
.SH NAME
internal functions \- 
.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBgfal_handle_\fP"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef gfal_handle_ * \fBgfal_handle\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "char * \fBgfal_get_userdn\fP (char *errbuf, int errbufsz)"
.br
.ti -1c
.RI "char * \fBgfal_get_vo\fP (char *errbuf, int errbufsz)"
.br
.ti -1c
.RI "int \fBgfal_get_fqan\fP (char ***fqan, char *errbuf, int errbufsz)"
.br
.ti -1c
.RI "int \fBgfal_is_nobdii\fP ()"
.br
.ti -1c
.RI "int \fBgfal_is_purifydisabled\fP ()"
.br
.ti -1c
.RI "int \fBgfal_register_file\fP (const char *, const char *, const char *, mode_t, GFAL_LONG64, int, char *, int)"
.br
.ti -1c
.RI "void \fBgfal_spacemd_free\fP (int, gfal_spacemd *)"
.br
.ti -1c
.RI "int \fBgfal_guidsforpfns\fP (int, const char **, int, char ***, int **, char *, int)"
.br
.ti -1c
.RI "char * \fBgfal_guidforpfn\fP (const char *, char *, int)"
.br
.ti -1c
.RI "char ** \fBgfal_get_aliases\fP (const char *, const char *, char *, int)"
.br
.ti -1c
.RI "int \fBgfal_unregister_pfns\fP (int, const char **, const char **, int **, char *, int)"
.br
.ti -1c
.RI "char ** \fBgfal_get_replicas\fP (const char *, const char *, char *, int)"
.br
.ti -1c
.RI "char * \fBgfal_get_hostname\fP (const char *, char *, int)"
.br
.ti -1c
.RI "gfal_file \fBgfal_file_new\fP (const char *, const char *, int, char *, int)"
.br
.ti -1c
.RI "int \fBgfal_file_free\fP (gfal_file)"
.br
.ti -1c
.RI "const char * \fBgfal_file_get_catalog_name\fP (gfal_file)"
.br
.ti -1c
.RI "const char * \fBgfal_file_get_replica\fP (gfal_file)"
.br
.ti -1c
.RI "int \fBgfal_file_get_replica_errcode\fP (gfal_file)"
.br
.ti -1c
.RI "const char * \fBgfal_file_get_replica_errmsg\fP (gfal_file)"
.br
.ti -1c
.RI "int \fBgfal_file_set_replica_error\fP (gfal_file, int, const char *)"
.br
.ti -1c
.RI "int \fBgfal_file_set_turl_error\fP (gfal_file, int, const char *)"
.br
.ti -1c
.RI "int \fBgfal_file_next_replica\fP (gfal_file)"
.br
.ti -1c
.RI "char * \fBgfal_generate_lfn\fP (char *, int)"
.br
.ti -1c
.RI "char * \fBgfal_generate_guid\fP (char *, int)"
.br
.ti -1c
.RI "int \fBgfal_get_bdii\fP (char *, int, int *, char *, int)"
.br
.ti -1c
.RI "int \fBgfal_get_cat_type\fP (char **)"
.br
.ti -1c
.RI "int \fBgfal_get_ce_ap\fP (const char *, char **, char *, int)"
.br
.ti -1c
.RI "int \fBgfal_get_lfc_endpoint\fP (char **, char *, int)"
.br
.ti -1c
.RI "int \fBgfal_get_rls_endpoints\fP (char **, char **, char *, int)"
.br
.ti -1c
.RI "int \fBgfal_get_storage_path\fP (const char *, const char *, char **, char **, char *, int)"
.br
.ti -1c
.RI "int \fBgfal_get_seap_info\fP (const char *, char ***, int **, char *, int)"
.br
.ti -1c
.RI "int \fBgfal_get_se_types_and_endpoints\fP (const char *, char ***, char ***, char *, int)"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "char* gfal_get_hostname (const char * path, char * errbuf, int errbufsz)"
.PP
extract a hostname from a SURL. We search for '://' to get the start of the hostname. Then we keep going to the next slash, colon or end of the SURL. 
