.TH "/home/adevress/myworkspace/gfal/src/common/gfal_common_srm.h" 3 "11 May 2011" "Version 1.90" "CERN org.glite.Gfal" \" -*- nroff -*-
.ad l
.nh
.SH NAME
/home/adevress/myworkspace/gfal/src/common/gfal_common_srm.h \- the header file with the main srm funcs of the common API 
.SH SYNOPSIS
.br
.PP
\fC#include 'gfal_types.h'\fP
.br
\fC#include 'gfal_common_internal.h'\fP
.br
\fC#include <regex.h>\fP
.br
\fC#include <time.h>\fP
.br

.SS "Defines"

.in +1c
.ti -1c
.RI "#define \fBGFAL_PREFIX_SRM\fP   'srm://'"
.br
.ti -1c
.RI "#define \fBGFAL_ENDPOINT_DEFAULT_PREFIX\fP   'httpg://'"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "int \fBgfal_get_asyncG\fP (gfal_handle handle, GList *surls, GError **err)"
.br
.RI "\fIlaunch a surls-> turls translation in asynchronous mode \fP"
.ti -1c
.RI "int \fBgfal_get_async_resultsG\fP (gfal_handle handle, GList **turls, GError **err)"
.br
.ti -1c
.RI "gboolean \fBgfal_async_request_is_finishedG\fP (gfal_handle handle, GError **err)"
.br
.RI "\fIprogress of the last request \fP"
.ti -1c
.RI "int \fBgfal_get_async_results_errcodesG\fP (gfal_handle handle, GList **turl_errcode, GError **err)"
.br
.RI "\fIerrcode of each turls request \fP"
.ti -1c
.RI "int \fBgfal_get_async_results_errstringG\fP (gfal_handle handle, GList **turl_errstring, GError **err)"
.br
.RI "\fIstring of each request errcode \fP"
.ti -1c
.RI "int \fBgfal_wait_async_requestG\fP (gfal_handle handle, long timeout, GError **err)"
.br
.RI "\fIwait for the current request \fP"
.in -1c
.SH "Detailed Description"
.PP 
the header file with the main srm funcs of the common API 

\fBAuthor:\fP
.RS 4
Devresse Adrien 
.RE
.PP
\fBVersion:\fP
.RS 4
2.0 
.RE
.PP
\fBDate:\fP
.RS 4
12/04/2011 
.RE
.PP

.SH "Function Documentation"
.PP 
.SS "gboolean gfal_async_request_is_finishedG (gfal_handle handle, GError ** err)"
.PP
progress of the last request 
.PP
\fBReturns:\fP
.RS 4
return TRUE if the current request is finished else FALSE 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIerr\fP : Gerror** err system 
.RE
.PP

.SS "int gfal_get_async_results_errcodesG (gfal_handle handle, GList ** turls_errcode, GError ** err)"
.PP
errcode of each turls request 
.PP
\fBParameters:\fP
.RS 4
\fIhandle\fP : handle associated with the request 
.br
\fIturl_errcode\fP : GList<int> of all the errcode associated with the request 
.br
\fIerr\fP : Gerror** err system 
.RE
.PP
\fBReturns:\fP
.RS 4
return number of request turl if success else return negative value 
.RE
.PP

.SS "int gfal_get_async_results_errstringG (gfal_handle handle, GList ** turls_errstring, GError ** err)"
.PP
string of each request errcode 
.PP
\fBParameters:\fP
.RS 4
\fIhandle\fP 
.br
\fIturl_errcode\fP : GList<char*>, give a string error for each turl request, char* can be NULL if no error associated 
.RE
.PP
\fBReturns:\fP
.RS 4
return number of request turl if success else return negative value 
.RE
.PP

.SS "int gfal_get_async_resultsG (gfal_handle handle, GList ** turls, GError ** err)"
.PP
get the result to the last get_async request 
.PP
\fBReturns:\fP
.RS 4
return the number of response in turls or negative value if error 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIhandle\fP : handle of the current context 
.br
\fIGList**\fP turls : GList<char*> turls with the full list of answer, an answer with error is a NULL pointer 
.RE
.PP
\fBWarning:\fP
.RS 4
turls need to be free manually 
.RE
.PP

.SS "int gfal_get_asyncG (gfal_handle handle, GList * surls, GError ** err)"
.PP
launch a surls-> turls translation in asynchronous mode 
.PP
\fBWarning:\fP
.RS 4
need a initiaed gfal_handle 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIhandle\fP : the gfal_handle initiated ( \fBgfal_init\fP ) 
.br
\fIsurls\fP : GList of string of the differents surls to convert 
.br
\fIerr\fP : GError** for error report 
.RE
.PP
\fBReturns:\fP
.RS 4
return positive if success else -1, check GError for more information 
.RE
.PP

.SS "int gfal_wait_async_requestG (gfal_handle handle, long timeout, GError ** err)"
.PP
wait for the current request 
.PP
\fBParameters:\fP
.RS 4
\fIhandle\fP 
.br
\fItimeout\fP : maximum time to wait before error 
.br
\fIerr\fP : Error report system 
.RE
.PP
\fBReturns:\fP
.RS 4
return 0 if finished correctly, return 1 if timeout is reached, return -1 if error 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for CERN org.glite.Gfal from the source code.
