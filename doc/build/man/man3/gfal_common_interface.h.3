.TH "/home/adevress/myworkspace/gfal/src/common/gfal_common_interface.h" 3 "8 Jun 2011" "Version 1.90" "CERN org.glite.Gfal" \" -*- nroff -*-
.ad l
.nh
.SH NAME
/home/adevress/myworkspace/gfal/src/common/gfal_common_interface.h \- The main Interface file for the SRM interface. 
.SH SYNOPSIS
.br
.PP
\fC#include 'gfal_prototypes.h'\fP
.br
\fC#include 'gfal_types.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "char * \fBgfal_last_error_string\fP (gfal_handle handle)"
.br
.ti -1c
.RI "int \fBgfal_has_error\fP (gfal_handle handle)"
.br
.ti -1c
.RI "void \fBgfal_clear_error\fP (gfal_handle handle)"
.br
.ti -1c
.RI "gfal_handle \fBgfal_handle_new\fP ()"
.br
.RI "\fIget a initiated gfal_handle \fP"
.ti -1c
.RI "void \fBgfal_handle_free\fP (gfal_handle handle)"
.br
.ti -1c
.RI "int \fBgfal_get_async\fP (gfal_handle handle, char **surls)"
.br
.RI "\fIlaunch a surls-> turls translation in asynchronous mode \fP"
.ti -1c
.RI "int \fBgfal_async_request_is_finished\fP (gfal_handle handle)"
.br
.RI "\fIprogress of the last request \fP"
.ti -1c
.RI "int \fBgfal_get_async_results\fP (gfal_handle handle, char ***turls)"
.br
.ti -1c
.RI "int \fBgfal_get_async_get_results_errcodes\fP (gfal_handle handle, int **turl_errcode)"
.br
.ti -1c
.RI "int \fBgfal_get_async_get_results_errstring\fP (gfal_handle handle, char ***turl_errstring)"
.br
.ti -1c
.RI "int \fBgfal_wait_async_request\fP (gfal_handle handle, long timeout)"
.br
.RI "\fIwait for the current request \fP"
.ti -1c
.RI "void \fBgfal_set_nobdii_srm\fP (gfal_handle handle, gboolean no_bdii_chk)"
.br
.ti -1c
.RI "const char * \fBgfal_version\fP ()"
.br
.RI "\fIreturn a string of the current gfal_version define at the compilation time \fP"
.in -1c
.SH "Detailed Description"
.PP 
The main Interface file for the SRM interface. 

\fBAuthor:\fP
.RS 4
Devresse Adrien 
.RE
.PP
\fBVersion:\fP
.RS 4
2.0 
.RE
.PP
\fBDate:\fP
.RS 4
12/04/2011 
.RE
.PP

.SH "Function Documentation"
.PP 
.SS "int gfal_async_request_is_finished (gfal_handle handle)"
.PP
progress of the last request 
.PP
\fBReturns:\fP
.RS 4
return positive value if the current request is finished, 0 if false or -1 if error occured Wrapper of gfal_async_request_is_finishedG for the 'without GLib' use case. 
.RE
.PP

.SS "void gfal_clear_error (gfal_handle handle)"
.PP
\fBReturns:\fP
.RS 4
clear the current error registered in the handle 
.RE
.PP

.SS "int gfal_get_async (gfal_handle handle, char ** surls)"
.PP
launch a surls-> turls translation in asynchronous mode 
.PP
\fBWarning:\fP
.RS 4
need a initiaed gfal_handle 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIhandle\fP : the gfal_handle initiated ( \fBgfal_init\fP ) 
.br
\fIsurls\fP : table of string of the differents surls to convert, NULL pointer must be the end of the table 
.RE
.PP
\fBReturns:\fP
.RS 4
return positive if success else -1, check GError for more information Wrapper of gfal_get_asyncG for the 'without GLib' use case. 
.RE
.PP

.SS "int gfal_get_async_results (gfal_handle handle, char *** turls)"
.PP
get the result to the last get_async request 
.PP
\fBReturns:\fP
.RS 4
return the number of responses in turls or negative value if error 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIhandle\fP : handle of the current context 
.br
\fIchar***\fP turls : char** turls with the full list of answer, an answer with error is a NULL pointer 
.RE
.PP
\fBWarning:\fP
.RS 4
turls need to be free manually 
.RE
.PP
\fBReturns:\fP
.RS 4
return the number of turls in the table, else negative value if error Wrapper for the 'without GLib' use case. 
.RE
.PP

.SS "gfal_handle gfal_handle_new ()"
.PP
get a initiated gfal_handle 
.PP
\fBReturns:\fP
.RS 4
a gfal_handle, need to be free after usage. return NULL if errors Wrapper of gfal_initG for the 'without GLib' use case. 
.RE
.PP

.SS "int gfal_has_error (gfal_handle handle)"
.PP
\fBReturns:\fP
.RS 4
return TRUE value if error occured else FALSE 
.RE
.PP

.SS "char* gfal_last_error_string (gfal_handle handle)"
.PP
\fBReturns:\fP
.RS 4
string of the last error reported or NULL if no error is reported 
.RE
.PP

.SS "int gfal_wait_async_request (gfal_handle handle, long timeout)"
.PP
wait for the current request 
.PP
\fBParameters:\fP
.RS 4
\fIhandle\fP 
.br
\fItimeout\fP : maximum time to wait before error 
.RE
.PP
\fBReturns:\fP
.RS 4
return 0 if finished correctly, return 1 if timeout is reached, return -1 if error Wrapper for gfal_wait_async_requestG for the 'without GLib' use case. 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for CERN org.glite.Gfal from the source code.
