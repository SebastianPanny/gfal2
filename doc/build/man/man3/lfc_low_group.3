.TH "internal LFC functions" 3 "4 May 2011" "Version 1.90" "CERN org.glite.Gfal" \" -*- nroff -*-
.ad l
.nh
.SH NAME
internal LFC functions \- 
.SS "Functions"

.in +1c
.ti -1c
.RI "int \fBlfc_replica_exists\fP (const char *guid, char *errbuf, int errbufsz)"
.br
.ti -1c
.RI "int \fBlfc_accessl\fP (const char *path, const char *guid, int mode, char *errbuf, int errbufsz)"
.br
.ti -1c
.RI "int \fBlfc_chmodl\fP (const char *path, mode_t mode, char *errbuf, int errbufsz)"
.br
.ti -1c
.RI "char * \fBlfc_guidforpfn\fP (const char *pfn, char *errbuf, int errbufsz)"
.br
.ti -1c
.RI "int \fBlfc_guidsforpfns\fP (int nbfiles, const char **pfns, int amode, char ***guids, int **statuses, char *errbuf, int errbufsz)"
.br
.ti -1c
.RI "int \fBlfc_guid_exists\fP (const char *guid, char *errbuf, int errbufsz)"
.br
.ti -1c
.RI "char ** \fBlfc_get_replicas\fP (const char *lfn, const char *guid, char *errbuf, int errbufsz)"
.br
.ti -1c
.RI "int \fBlfc_unregister_pfns\fP (int nbguids, const char **guids, const char **pfns, int **results, char *errbuf, int errbufsz)"
.br
.ti -1c
.RI "char * \fBlfc_guidfromlfn\fP (const char *lfn, char *errbuf, int errbufsz)"
.br
.ti -1c
.RI "char ** \fBlfc_get_aliases\fP (const char *lfn, const char *guid, char *errbuf, int errbufsz)"
.br
.ti -1c
.RI "int \fBlfc_register_file\fP (const char *lfn, const char *guid, const char *surl, mode_t mode, GFAL_LONG64 size, int bool_createonly, char *errbuf, int errbufsz)"
.br
.ti -1c
.RI "int \fBlfc_register_alias\fP (const char *guid, const char *lfn, char *errbuf, int errbufsz)"
.br
.ti -1c
.RI "int \fBlfc_unregister_alias\fP (const char *guid, const char *lfn, char *errbuf, int errbufsz)"
.br
.ti -1c
.RI "int \fBlfc_mkdirp\fP (const char *path, mode_t mode, char *errbuf, int errbufsz)"
.br
.ti -1c
.RI "int \fBlfc_renamel\fP (const char *old_name, const char *new_name, char *errbuf, int errbufsz)"
.br
.ti -1c
.RI "DIR * \fBlfc_opendirlg\fP (const char *dirname, const char *guid, char *errbuf, int errbufsz)"
.br
.ti -1c
.RI "int \fBlfc_rmdirl\fP (const char *dirname, char *errbuf, int errbufsz)"
.br
.ti -1c
.RI "int \fBlfc_maperror\fP (struct proto_ops *pops, int ioflag)"
.br
.ti -1c
.RI "int \fBlfc_setsize\fP (const char *lfn, GFAL_LONG64 size, char *errbuf, int errbufsz)"
.br
.ti -1c
.RI "int \fBlfc_statl\fP (const char *lfn, const char *guid, struct stat64 *buf, char *errbuf, int errbufsz)"
.br
.ti -1c
.RI "int \fBlfc_lstatl\fP (const char *lfn, struct stat64 *buf, char *errbuf, int errbufsz)"
.br
.ti -1c
.RI "int \fBlfc_fillsurls\fP (gfal_file gf, char *errbuf, int errbufsz)"
.br
.ti -1c
.RI "int \fBlfc_remove\fP (gfal_file gfile, char *errbuf, int errbufsz)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "static int int \fBerrbufsz\fP"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "int lfc_guid_exists (const char * guid, char * errbuf, int errbufsz)"
.PP
test if guid exists 
.SS "char* lfc_guidforpfn (const char * pfn, char * errbuf, int errbufsz)"
.PP
lfc_guidforpfn : Get the guid for a replica. If the replica does not exist, fail with ENOENT 
.SS "int lfc_guidsforpfns (int nbfiles, const char ** pfns, int amode, char *** guids, int ** statuses, char * errbuf, int errbufsz)"
.PP
lfc_guidsforpfns : Get the guid for a replica. If the replica does not exist, fail with ENOENT 
.SS "int lfc_unregister_pfns (int nbguids, const char ** guids, const char ** pfns, int ** results, char * errbuf, int errbufsz)"
.PP
Unregister replicas (SURLs) from a GUIDs, and remove all links to a GUID if there are no more replicas 
