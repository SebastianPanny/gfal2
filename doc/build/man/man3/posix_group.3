.TH "all POSIX style function" 3 "4 Oct 2011" "Version 2.0.1" "CERN org.glite.Gfal" \" -*- nroff -*-
.ad l
.nh
.SH NAME
all POSIX style function \- 
.SS "Functions"

.in +1c
.ti -1c
.RI "int \fBgfal_chmod\fP (const char *path, mode_t mode)"
.br
.RI "\fIchange the right for a file or a folder \fP"
.ti -1c
.RI "int \fBgfal_rename\fP (const char *oldpath, const char *newpath)"
.br
.RI "\fIchange the name or location of a file oldpath and newpath need to be on the same plugin this functions work only with plugins (lfc ) and local files \fP"
.ti -1c
.RI "int \fBgfal_stat\fP (const char *, struct stat *)"
.br
.RI "\fIinformations about a file These functions return information about a file. No permissions are required on the file itself, but — in the case of stat() and lstat() — execute (search) permission is required on all of the directories in path that lead to the file. \fP"
.ti -1c
.RI "int \fBgfal_lstat\fP (const char *, struct stat *)"
.br
.RI "\fIgfal_lstat is identical to \fBgfal_stat\fP except for symbolic links. In this case, the link itself is statted and not followed. \fP"
.ti -1c
.RI "int \fBgfal_access\fP (const char *, int)"
.br
.RI "\fItest access to the given file \fP"
.ti -1c
.RI "ssize_t \fBgfal_readlink\fP (const char *path, char *buff, size_t buffsiz)"
.br
.ti -1c
.RI "int \fBgfal_symlink\fP (const char *oldpath, const char *newpath)"
.br
.RI "\fImake a new name for a file \fP"
.ti -1c
.RI "int \fBgfal_creat\fP (const char *, mode_t)"
.br
.RI "\fIcreate a new file or truncate an existing one similar to the POSIX call creat opens a file according to the value of flags. \fP"
.ti -1c
.RI "int \fBgfal_open\fP (const char *path, int flag,...)"
.br
.RI "\fIopen a file similar to the POSIX call open opens a file according to the value of flags. \fP"
.ti -1c
.RI "off_t \fBgfal_lseek\fP (int, off_t, int)"
.br
.RI "\fIset position in a file \fP"
.ti -1c
.RI "int \fBgfal_close\fP (int)"
.br
.RI "\fIclose a file similar to the POSIX call close closes the file whose descriptor fd is the one returned by gfal_open. \fP"
.ti -1c
.RI "int \fBgfal_read\fP (int, void *, size_t)"
.br
.RI "\fIread a file similar to the POSIX call read gfal_read reads up to size bytes from the file descriptor fd into the buffer pointed by buff \fP"
.ti -1c
.RI "int \fBgfal_write\fP (int, const void *, size_t)"
.br
.RI "\fIwrite a file similar to the POSIX call write gfal_write writes size bytes from the buffer pointed by buff to the file descriptor fd. \fP"
.ti -1c
.RI "ssize_t \fBgfal_getxattr\fP (const char *path, const char *name, void *value, size_t size)"
.br
.RI "\fIretrieve an extended attribute value \fP"
.ti -1c
.RI "ssize_t \fBgfal_listxattr\fP (const char *path, char *list, size_t size)"
.br
.RI "\fIlist all extended attributes \fP"
.ti -1c
.RI "int \fBgfal_setxattr\fP (const char *path, const char *name, const void *value, size_t size, int flags)"
.br
.RI "\fIset an extended attribute to a given value similar to the setxattr standard call of libattr \fP"
.ti -1c
.RI "int \fBgfal_removexattr\fP (const char *path, const char *name)"
.br
.RI "\fIremoves the extended attribute identified by name and associated with the given path in the filesystem similar to the removexattr standard call of libattr \fP"
.ti -1c
.RI "int \fBgfal_mkdir\fP (const char *, mode_t)"
.br
.ti -1c
.RI "DIR * \fBgfal_opendir\fP (const char *)"
.br
.RI "\fIopen a directory \fP"
.ti -1c
.RI "int \fBgfal_closedir\fP (DIR *)"
.br
.RI "\fIclose a file descriptor of a directory similar to the POSIX call closedir close the file descriptor of an opendir call \fP"
.ti -1c
.RI "dirent * \fBgfal_readdir\fP (DIR *)"
.br
.RI "\fIread a directory similar to the POSIX call readdir The readdir() function returns a pointer to a dirent structure representing the next directory entry in the directory stream pointed to by dirp. It returns NULL on reaching the end of the directory stream or if an error occurred. struct dirent { ino_t d_ino; // inode number off_t d_off; // offset to the next dirent unsigned short d_reclen; // length of this record unsigned char d_type; // type of file; not supported // by all file system types char d_name[256]; // filename }; \fP"
.ti -1c
.RI "int \fBgfal_rmdir\fP (const char *)"
.br
.RI "\fIremoves a directory if it is empty remove an existing directory, return error if the dir is not empty \fP"
.ti -1c
.RI "int \fBgfal_unlink\fP (const char *)"
.br
.RI "\fIdelete a name and possibly the file it refers to \fP"
.ti -1c
.RI "int \fBgfal_posix_check_error\fP ()"
.br
.ti -1c
.RI "void \fBgfal_posix_clear_error\fP ()"
.br
.ti -1c
.RI "void \fBgfal_posix_release_error\fP ()"
.br
.ti -1c
.RI "char * \fBgfal_posix_strerror_r\fP (char *buff_err, size_t s_err)"
.br
.ti -1c
.RI "void \fBgfal_posix_print_error\fP ()"
.br
.ti -1c
.RI "int \fBgfal_posix_code_error\fP ()"
.br
.ti -1c
.RI "int \fBgfal_set_verbose\fP (int)"
.br
.RI "\fIset the verbose mode for the current program \fP"
.ti -1c
.RI "char * \fBgfal_version\fP ()"
.br
.ti -1c
.RI "int \fBgfal_flush\fP (int fd)"
.br
.ti -1c
.RI "int \fBgfal_set_parameter_string\fP (const char *module, const char *name, const char *value)"
.br
.ti -1c
.RI "int \fBgfal_get_parameter_string\fP (const char *module, const char *name, char *buff_value, size_t s_buff)"
.br
.ti -1c
.RI "int \fBgfal_set_parameter_int\fP (const char *module, const char *name, int value)"
.br
.ti -1c
.RI "int \fBgfal_get_parameter_int\fP (const char *module, const char *name)"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "int gfal_access (const char * path, int amode)"
.PP
test access to the given file 
.PP
\fBParameters:\fP
.RS 4
\fIpath\fP path of the file to access, can be in supported protocols (lfn, srm, file, guid,..) 
.br
\fIamode\fP access mode to check (R_OK, W_OK, X_OK or F_OK) 
.RE
.PP
\fBReturns:\fP
.RS 4
This routine return 0 if the operation was successful, or -1 if error occured and errno is set, call \fBgfal_posix_check_error()\fP to check it. 
.RE
.PP

.PP
\fBExamples: \fP
.in +1c
\fBgfal_testchmod.c\fP.
.SS "int gfal_chmod (const char * path, mode_t mode)"
.PP
change the right for a file or a folder 
.PP
\fBParameters:\fP
.RS 4
\fIpath\fP : path of the file or the folder, can be in all supported protocols (lfn, srm, file, guid,..) 
.br
\fImode\fP : right to configure 
.RE
.PP
\fBReturns:\fP
.RS 4
return 0 if success else -1 and errno is set, call \fBgfal_posix_check_error()\fP to check it 
.RE
.PP

.PP
\fBExamples: \fP
.in +1c
\fBgfal_testchmod.c\fP.
.SS "int gfal_close (int fd)"
.PP
close a file similar to the POSIX call close closes the file whose descriptor fd is the one returned by gfal_open. 
.PP
\fBParameters:\fP
.RS 4
\fIfd\fP : descriptor or the file given by \fBgfal_open\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
This routine returns 0 if the operation was successful or -1 if the operation failed. In the latter case, errno is set appropriately 
.RE
.PP

.PP
\fBExamples: \fP
.in +1c
\fBgfal_testread.c\fP, and \fBgfal_testrw.c\fP.
.SS "int gfal_closedir (DIR * d)"
.PP
close a file descriptor of a directory similar to the POSIX call closedir close the file descriptor of an opendir call 
.PP
\fBParameters:\fP
.RS 4
\fId\fP file handle ( return by opendir ) to close 
.RE
.PP
\fBReturns:\fP
.RS 4
0 if success else negativevalue and errno is set ( ( gfal_posix_error_print() ) 
.RE
.PP

.PP
\fBExamples: \fP
.in +1c
\fBgfal_testdir.c\fP.
.SS "int gfal_creat (const char * filename, mode_t mode)"
.PP
create a new file or truncate an existing one similar to the POSIX call creat opens a file according to the value of flags. 
.PP
\fBParameters:\fP
.RS 4
\fIfilename\fP : url of the filename to create, can be in supported protocols (lfn, srm, file, guid,..) 
.br
\fImode\fP : is used only if the file is created. 
.RE
.PP
\fBReturns:\fP
.RS 4
return the file descriptor or -1 if errno is set call \fBgfal_posix_check_error()\fP to check it 
.RE
.PP

.SS "ssize_t gfal_getxattr (const char * path, const char * name, void * value, size_t size)"
.PP
retrieve an extended attribute value 
.PP
similar to the getxattr call of the libattr gfal_getxattr retrieves an extended value for an url in a supported protocol. The extended attributes are use for the advanced file operations ( like set/get replicas, grid status, comments, etc... ) 
.PP
\fBParameters:\fP
.RS 4
\fIpath\fP : path of the file/dir, can be in supported protocols (lfn, srm, file, guid,..) 
.br
\fIname,:\fP name of the attribute to get 
.br
\fIvalue,:\fP pointer to buffer to get the value 
.br
\fIsize\fP : size of the buffer 
.RE
.PP
\fBReturns:\fP
.RS 4
return the size of the data returned, or -1 if error. In this case, errno is set and you can call \fBgfal_posix_check_error()\fP for a more complete description. 
.RE
.PP

.PP
\fBExamples: \fP
.in +1c
\fBgfal_testget.c\fP.
.SS "ssize_t gfal_listxattr (const char * path, char * list, size_t size)"
.PP
list all extended attributes 
.PP
similar to listxattr standard call of libattr gfal_listxattr list all extended atributes associated with a file The extended attributes are use for the advanced file operations ( like set/get replicas, grid status, comments, etc... )
.PP
\fBParameters:\fP
.RS 4
\fIpath\fP : path of the file/dir, can be in a supported protocol (lfn, srm, file, guid,..) 
.br
\fIlist,:\fP a list of the attribute in a string format, on after each other, separated by '\\0'. 
.br
\fIsize\fP : size of the buffer 
.RE
.PP
\fBReturns:\fP
.RS 4
return the size of the data in list , or -1 if error. In this case, errno is set and you can call \fBgfal_posix_check_error()\fP for a more complete description. 
.RE
.PP

.SS "off_t gfal_lseek (int fd, off_t offset, int whence)"
.PP
set position in a file 
.PP
similar to the POSIX call lseek gfal_lseek positions/repositions to offset the file associated with the descriptor fd generated by a previous gfal_open. whence indicates how to interpret the offset value:
.PP
SEEK_SET The offset is set from beginning of file.
.PP
SEEK_CUR The offset is added to current position.
.PP
SEEK_END The offset is added to current file size. 
.PP
\fBParameters:\fP
.RS 4
\fIfd\fP : file descriptor to lseek 
.br
\fIoffset,:\fP offset in byte 
.br
\fIwhence,:\fP flag 
.RE
.PP
\fBReturns:\fP
.RS 4
This routine returns the actual offset from the beginning of the file if the operation was successful or -1 if the operation failed. In the latter case, errno is set appropriately, you can call \fBgfal_posix_check_error()\fP for a more complete description. 
.RE
.PP

.SS "int gfal_mkdir (const char * path, mode_t mode)"
.PP
Wrapper to mkdir for comptibility, same behavior than \fBgfal_mkdirp\fP ( but subject to change in order to follow POSIX mkdir in the futur ) 
.PP
\fBExamples: \fP
.in +1c
\fBgfal_testcreatedir.c\fP.
.SS "int gfal_open (const char * path, int flag,  ...)"
.PP
open a file similar to the POSIX call open opens a file according to the value of flags. 
.PP
\fBParameters:\fP
.RS 4
\fIpath\fP : url of the filename to open. can be in supported protocols (lfn, srm, file, guid,..) 
.br
\fIflag\fP : same flag supported value is built by OR’ing the bits defined in <fcntl.h> but one and only one of the first three flags below must be used O_RDONLY open for reading only O_WRONLY open for writing only O_RDWR open for reading and writing O_CREAT If the file exists already and O_EXCL is also set, gfal_open will fail O_LARGEFILE allows files whose sizes cannot be represented in 31 bits to be opened 
.br
\fImode\fP is used only if the file is created. 
.RE
.PP
\fBReturns:\fP
.RS 4
return the file descriptor or -1 if errno is set call \fBgfal_posix_check_error()\fP to check it 
.RE
.PP

.PP
\fBExamples: \fP
.in +1c
\fBgfal_testread.c\fP, and \fBgfal_testrw.c\fP.
.SS "DIR* gfal_opendir (const char * name)"
.PP
open a directory 
.PP
opens a directory to be used in subsequent gfal_readdir operations the url supported are : local files, surls, plugin url ( lfc,...) 
.PP
\fBParameters:\fP
.RS 4
\fIname\fP of the directory to open, can be in supported protocols (lfn, srm, file, guid,..) 
.RE
.PP
\fBReturns:\fP
.RS 4
file descriptor DIR* if success else NULL if error and errno is set call \fBgfal_posix_check_error()\fP to check it 
.RE
.PP

.PP
\fBExamples: \fP
.in +1c
\fBgfal_testdir.c\fP.
.SS "int gfal_posix_check_error ()"
.PP
check the last Error, if no error report return 0 else return 1 and print the error on stderr 
.PP
\fBWarning:\fP
.RS 4
this does not clear the error 
.RE
.PP

.PP
\fBExamples: \fP
.in +1c
\fBgfal_testchmod.c\fP, \fBgfal_testcreatedir.c\fP, \fBgfal_testget.c\fP, \fBgfal_testread.c\fP, and \fBgfal_testrw.c\fP.
.SS "void gfal_posix_clear_error ()"
.PP
clear the last error reported by a gfal posix function 
.SS "int gfal_posix_code_error ()"
.PP
return the last error code ( ERRNO-style ) most of the error code are ERRNO codes. 
.PP
\fBReturns:\fP
.RS 4
last error code reported or 0 if nothing. 
.RE
.PP

.SS "void gfal_posix_print_error ()"
.PP
print the last string error reported by the gfal error system for the posix API but DO NOT delete it Errors are printed on stderr 
.SS "void gfal_posix_release_error ()"
.PP
Display and clear the last string error reported by the gfal error system for the posix API equivalent to a \fBgfal_posix_print_error()\fP and a \fBgfal_posix_clear_error()\fP call 
.SS "char* gfal_posix_strerror_r (char * buff_err, size_t s_err)"
.PP
Get the last Error in a string format 
.PP
\fBReturns:\fP
.RS 4
return a pointer to the string buffer passed. 
.RE
.PP

.SS "int gfal_read (int fd, void * buff, size_t s_buff)"
.PP
read a file similar to the POSIX call read gfal_read reads up to size bytes from the file descriptor fd into the buffer pointed by buff 
.PP
\fBParameters:\fP
.RS 4
\fIfd\fP file descriptor 
.br
\fIbuff\fP buffer of the data to read 
.br
\fIs_buff\fP size of the data read in bytes 
.RE
.PP
\fBReturns:\fP
.RS 4
number of byte read or -1 if error, errno is set call \fBgfal_posix_check_error()\fP to check it 
.RE
.PP

.PP
\fBExamples: \fP
.in +1c
\fBgfal_testread.c\fP, and \fBgfal_testrw.c\fP.
.SS "struct dirent* gfal_readdir (DIR * d)"
.PP
read a directory similar to the POSIX call readdir The readdir() function returns a pointer to a dirent structure representing the next directory entry in the directory stream pointed to by dirp. It returns NULL on reaching the end of the directory stream or if an error occurred. struct dirent { ino_t d_ino; // inode number off_t d_off; // offset to the next dirent unsigned short d_reclen; // length of this record unsigned char d_type; // type of file; not supported // by all file system types char d_name[256]; // filename }; 
.PP
\fBParameters:\fP
.RS 4
\fId\fP file handle ( return by opendir ) to read 
.RE
.PP
\fBReturns:\fP
.RS 4
pointer to struct dirent with file information or NULL if end of list or error, errno is set call \fBgfal_posix_check_error()\fP to check it 
.RE
.PP
\fBWarning:\fP
.RS 4
struct dirents are allocated statically, do not use free() on them 
.RE
.PP

.PP
\fBExamples: \fP
.in +1c
\fBgfal_testdir.c\fP.
.SS "int gfal_removexattr (const char * path, const char * name)"
.PP
removes the extended attribute identified by name and associated with the given path in the filesystem similar to the removexattr standard call of libattr 
.PP
the effect of this call can be specific to the plugin used. ( ex : guid are read only)
.PP
\fBParameters:\fP
.RS 4
\fIpath\fP : path of the file 
.br
\fIname\fP : key of the extended to remove 
.RE
.PP
\fBReturns:\fP
.RS 4
0 if success or -1 if error. In this case, errno is set and you can call \fBgfal_posix_check_error()\fP for a more complete description. 
.RE
.PP

.SS "int gfal_rename (const char * oldpath, const char * newpath)"
.PP
change the name or location of a file oldpath and newpath need to be on the same plugin this functions work only with plugins (lfc ) and local files 
.PP
\fBParameters:\fP
.RS 4
\fIoldpath\fP : the old path of the file, can be in supported protocols but need to be in the same adress space than newpath 
.br
\fInewpath\fP : the new path of the file, can be in supported protocols (lfn, srm, file, guid,..) 
.RE
.PP
\fBReturns:\fP
.RS 4
: return 0 if success, else -1 and errno / \fBgfal_posix_check_error()\fP 
.RE
.PP

.PP
\fBExamples: \fP
.in +1c
\fBgfal_testcreatedir.c\fP.
.SS "int gfal_rmdir (const char * path)"
.PP
removes a directory if it is empty remove an existing directory, return error if the dir is not empty 
.PP
\fBParameters:\fP
.RS 4
\fIpath\fP specifies the directory name, can be in supported protocols (lfn, srm, file, guid,..) 
.RE
.PP
\fBReturns:\fP
.RS 4
return 0 is success else -1 and errno is set call \fBgfal_posix_check_error()\fP to check it 
.RE
.PP

.PP
\fBExamples: \fP
.in +1c
\fBgfal_testcreatedir.c\fP.
.SS "int gfal_set_verbose (int value)"
.PP
set the verbose mode for the current program 
.PP
set the verbose level of gfal 2 
.SS "int gfal_setxattr (const char * path, const char * name, const void * value, size_t size, int flags)"
.PP
set an extended attribute to a given value similar to the setxattr standard call of libattr 
.PP
the effect of this call can be specific to the plugin used. ( ex : guid are read only)
.PP
\fBParameters:\fP
.RS 4
\fIpath\fP : path of the file 
.br
\fIname\fP : key of the extended atribute to set 
.br
\fIvalue\fP : value to set, must be at least of the size size 
.br
\fIsize\fP : size of the attriute to set 
.br
\fIflags\fP : flags similar to the setxattr call, can be ignored by some plugins/call 
.RE
.PP
\fBReturns:\fP
.RS 4
0 if success else or -1 if error. In this case, errno is set and you can call \fBgfal_posix_check_error()\fP for a more complete description. 
.RE
.PP

.SS "int gfal_stat (const char * path, struct stat * buff)"
.PP
informations about a file These functions return information about a file. No permissions are required on the file itself, but — in the case of stat() and lstat() — execute (search) permission is required on all of the directories in path that lead to the file. 
.PP
\fBParameters:\fP
.RS 4
\fIpath\fP : path of the file, can be in supported protocols (lfn, srm, file, guid,..) 
.br
\fIbuff\fP : pointer to an allocated struct stat 
.RE
.PP
\fBReturns:\fP
.RS 4
return 0 if success else -1 and errno is set, call \fBgfal_posix_check_error()\fP to check it 
.RE
.PP

.SS "int gfal_symlink (const char * oldpath, const char * newpath)"
.PP
make a new name for a file 
.PP
similar to the POSIX call symlink . symlink() creates a symbolic link named newpath which contains the string oldpath. 
.PP
\fBParameters:\fP
.RS 4
\fInewpath\fP : path of the link, can be in supported protocols but need to be in the same adress space than newpath 
.br
\fIoldpath\fP : path of the linked file, can be in supported protocols (lfn, srm, file, guid,..) 
.RE
.PP
\fBReturns:\fP
.RS 4
0 if success else -1. if failure, errno is set, you can call \fBgfal_posix_check_error()\fP for a more complete description. 
.RE
.PP

.SS "int gfal_unlink (const char * path)"
.PP
delete a name and possibly the file it refers to 
.PP
similar to the POSIX call unlink \fBgfal_unlink()\fP deletes a name from the file system. If that name was the last link to a file and no processes have the file open the file is deleted and the space it was using is made avail‐ able for reuse.
.PP
If the name was the last link to a file but any processes still have the file open the file will remain in existence until the last file descriptor referring to it is closed.
.PP
If the name referred to a symbolic link the link is removed.
.PP
If the name referred to a socket, fifo or device the name for it is removed but processes which have the object open may continue to use it. 
.PP
\fBReturns:\fP
.RS 4
On success, zero is returned. On error, -1 is returned, and errno is set appropriately and you can call \fBgfal_posix_check_error()\fP for a more complete description. 
.RE
.PP

.SS "char* gfal_version ()"
.PP
return a string of the current gfal version 
.SS "int gfal_write (int fd, const void * buff, size_t s_buff)"
.PP
write a file similar to the POSIX call write gfal_write writes size bytes from the buffer pointed by buff to the file descriptor fd. 
.PP
\fBParameters:\fP
.RS 4
\fIfd\fP file descriptor 
.br
\fIbuff\fP buffer of the data to write 
.br
\fIs_buff\fP size of the data write in bytes 
.RE
.PP
\fBReturns:\fP
.RS 4
number of byte write or -1 if error, errno is set call \fBgfal_posix_check_error()\fP to check it 
.RE
.PP

.PP
\fBExamples: \fP
.in +1c
\fBgfal_testrw.c\fP.
