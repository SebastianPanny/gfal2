.TH "all POSIX style function" 3 "31 May 2011" "Version 1.90" "CERN org.glite.Gfal" \" -*- nroff -*-
.ad l
.nh
.SH NAME
all POSIX style function \- 
.SS "Functions"

.in +1c
.ti -1c
.RI "int \fBgfal_access\fP (const char *, int)"
.br
.RI "\fItest access to the given file \fP"
.ti -1c
.RI "int \fBgfal_chmod\fP (const char *, mode_t)"
.br
.RI "\fIset rights of the file/dir \fP"
.ti -1c
.RI "int \fBgfal_close\fP (int)"
.br
.RI "\fIclose the current file descriptor \fP"
.ti -1c
.RI "int \fBgfal_closedir\fP (DIR *)"
.br
.RI "\fIgfal_closedir - close a directory \fP"
.ti -1c
.RI "int \fBgfal_creat\fP (const char *, mode_t)"
.br
.RI "\fIcreates a new file or truncates an existing one \fP"
.ti -1c
.RI "int \fBgfal_creat64\fP (const char *, mode_t)"
.br
.RI "\fIsame as create for large file \fP"
.ti -1c
.RI "off_t \fBgfal_lseek\fP (int, off_t, int)"
.br
.RI "\fIgfal_lseek - position a file \fP"
.ti -1c
.RI "int \fBgfal_mkdir\fP (const char *, mode_t)"
.br
.RI "\fIcreate a new directory creates a new directory with permission bits taken from mode. The default behavior of this command is recursive, like 'mkdir -p'. \fP"
.ti -1c
.RI "int \fBgfal_open\fP (const char *, int, mode_t)"
.br
.RI "\fIopens a file according to the value of flags \fP"
.ti -1c
.RI "int \fBgfal_open64\fP (const char *, int, mode_t)"
.br
.ti -1c
.RI "DIR * \fBgfal_opendir\fP (const char *)"
.br
.RI "\fIopen a directory \fP"
.ti -1c
.RI "ssize_t \fBgfal_read\fP (int, void *, size_t)"
.br
.ti -1c
.RI "dirent * \fBgfal_readdir\fP (DIR *)"
.br
.RI "\fIread a directory \fP"
.ti -1c
.RI "int \fBgfal_rename\fP (const char *, const char *)"
.br
.RI "\fIchange the name or location of a file oldpath and newpath need to be on the same catalog this functions work only with catalogs (lfc ) and local files \fP"
.ti -1c
.RI "int \fBgfal_rmdir\fP (const char *)"
.br
.RI "\fIremoves a directory if it is empty remove an existing directory, return error if the dir is not empty \fP"
.ti -1c
.RI "ssize_t \fBgfal_setfilchg\fP (int, const void *, size_t)"
.br
.ti -1c
.RI "int \fBgfal_unlink\fP (const char *)"
.br
.ti -1c
.RI "ssize_t \fBgfal_write\fP (int, const void *, size_t)"
.br
.ti -1c
.RI "off64_t \fBgfal_lseek64\fP (int, off64_t, int)"
.br
.ti -1c
.RI "int \fBgfal_lstat\fP (const char *, struct stat *)"
.br
.RI "\fIgfal_lstat is identical to \fBgfal_stat\fP except for symbolic links. In this case, the link itself is statted and not followed. \fP"
.ti -1c
.RI "int \fBgfal_lstat64\fP (const char *, struct stat64 *)"
.br
.ti -1c
.RI "int \fBgfal_stat\fP (const char *, struct stat *)"
.br
.RI "\fIinformations about a file These functions return information about a file. No permissions are required on the file itself, but — in the case of stat() and lstat() — execute (search) permission is required on all of the directories in path that lead to the file. \fP"
.ti -1c
.RI "int \fBgfal_stat64\fP (const char *, struct stat64 *)"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "int gfal_access (const char * path, int amode)"
.PP
test access to the given file 
.PP
\fBParameters:\fP
.RS 4
\fIfile\fP can be in supported protocols lfn, srm, file, guid 
.RE
.PP
\fBReturns:\fP
.RS 4
This routine return 0 if the operation was successful, or -1 if error occured and errno is set, call \fBgfal_posix_print_error()\fP to check it. 
.br
.IP "\(bu" 2
ERRNO list : 
.br
.IP "  \(bu" 4
usual errors:
.IP "    \(bu" 6
ENOENT: The named file/directory does not exist.
.IP "    \(bu" 6
EACCES: Search permission is denied on a component of the path prefix or specified access to the file itself is denied.
.IP "    \(bu" 6
EFAULT: path is a NULL pointer.
.IP "    \(bu" 6
ENOTDIR: A component of path prefix is not a directory.
.IP "    \(bu" 6
ECOMM: Communication error
.IP "    \(bu" 6
EPROTONOSUPPORT: Access method not supported.
.IP "    \(bu" 6
EINVAL: path has an invalid syntax or amode is invalid. 
.PP

.PP

.PP
.RE
.PP

.SS "int gfal_chmod (const char * path, mode_t mode)"
.PP
set rights of the file/dir 
.PP
\fBParameters:\fP
.RS 4
\fIpath\fP : path of the file or the folder concerned : must be a Catalog URL ( lfn: ), a guid, or a local file URL ( file: ) 
.br
\fImode\fP : right to configure 
.RE
.PP
\fBReturns:\fP
.RS 4
return 0 if success else -1 and errno is set, call \fBgfal_posix_print_error()\fP to check it
.IP "\(bu" 2
ERRNO list : 
.br
.IP "  \(bu" 4
usual errors:
.IP "    \(bu" 6
ENOENT: The named file/directory does not exist.
.IP "    \(bu" 6
EACCES: Search permission is denied on a component of the path prefix or specified access to the file itself is denied.
.IP "    \(bu" 6
EFAULT: path is a NULL pointer.
.IP "    \(bu" 6
ENOTDIR: A component of path prefix is not a directory.
.IP "    \(bu" 6
ECOMM: Communication error
.IP "    \(bu" 6
EPROTONOSUPPORT: Access method not supported.
.IP "    \(bu" 6
EINVAL: path has an invalid syntax or amode is invalid. 
.PP

.PP

.PP
.RE
.PP

.SS "int gfal_close (int)"
.PP
close the current file descriptor 
.PP
close the file whose descriptor fd is the one returned by gfal_open. 
.PP
\fBReturns:\fP
.RS 4
This routine returns 0 if the operation was successful or -1 if the operation failed. In the latter case, errno is set appropriately.
.IP "\(bu" 2
ERRNO list : 
.br
.IP "  \(bu" 4
EBADF: fd is not a valid file descriptor
.IP "  \(bu" 4
ECOMM: Communication error.
.IP "  \(bu" 4
EPROTONOSUPPORT: Access method not supported. 
.PP

.PP
.RE
.PP

.SS "int gfal_closedir (DIR * d)"
.PP
gfal_closedir - close a directory 
.PP
\fBParameters:\fP
.RS 4
\fId\fP file handle ( return by opendir ) to close 
.RE
.PP
\fBReturns:\fP
.RS 4
0 if success else negative value and errno is set ( ( gfal_posix_error_print() )
.RE
.PP
.IP "\(bu" 2
ERRNO list : 
.br
.IP "  \(bu" 4
usual errors:
.IP "    \(bu" 6
EBADF : bad file descriptor
.IP "      \(bu" 8
ECOMM : Communication error 
.PP

.PP

.PP

.PP

.SS "int gfal_creat (const char * filename, mode_t mode)"
.PP
creates a new file or truncates an existing one 
.PP
int gfal_closedir (DIR *dir){ struct dir_info *di; int rc;
.PP
di = find_di (dir);
.PP
if (di == NULL || di->pops == NULL) { return -1; }
.PP
rc = di->pops->closedir (dir);
.PP
if (rc < 0) { errno = di->pops->maperror (di->pops, 0); }
.PP
if (strcmp (di->pops->proto_name, 'lfc') == 0) free (di->pops);
.PP
free_di (di); return (rc); } 
.SS "off_t gfal_lseek (int, off_t, int)"
.PP
gfal_lseek - position a file 
.PP
gfal_lseek positions/repositions to offset the file associated with the descriptor fd generated by a previous gfal_open. whence indicates how to interpret the offset value:
.PP
.IP "\(bu" 2
SEEK_SET The offset is set from beginning of file.
.IP "\(bu" 2
SEEK_CUR The offset is added to current position.
.IP "\(bu" 2
SEEK_END The offset is added to current file size.
.PP
.PP
\fBReturns:\fP
.RS 4
This routine returns the actual offset from the beginning of the file if the operation was successful or -1 if the operation failed. In the latter case, errno is set appropriately.
.IP "\(bu" 2
ERRORS :
.IP "  \(bu" 4
EBADF fd is not a valid file descriptor.
.IP "  \(bu" 4
EINVAL incorrect value for whence.
.IP "  \(bu" 4
EFBIG Resulting offset is too big to fit in off_t.
.IP "  \(bu" 4
ECOMM Communication error.
.IP "  \(bu" 4
EPROTONOSUPPORT Access method not supported.
.PP

.PP
.RE
.PP
gfal_lseek64 performs the same function on large files using off64_t rather than off_t. 
.SS "int gfal_mkdir (const char * path, mode_t mode)"
.PP
create a new directory creates a new directory with permission bits taken from mode. The default behavior of this command is recursive, like 'mkdir -p'. 
.PP
\fBParameters:\fP
.RS 4
\fIpath\fP : url of the directory. Can be surl ( srm://), local (file://), or catalog's url (lfc:, ....) 
.br
\fImode\fP : right of the directory ( depend of the implementation ) 
.RE
.PP
\fBReturns:\fP
.RS 4
return 0 if success else -1 and errno is set ( and \fBgfal_posix_print_error()\fP )
.IP "\(bu" 2
ERRNO list : 
.br
.IP "  \(bu" 4
usual errors:
.IP "    \(bu" 6
ENOENT: The named file/directory does not exist.
.IP "    \(bu" 6
EACCES: Write perimission is denied for newpath or oldpath, or, search permission is denied for one of the directories in the path prefix of oldpath or newpath, or oldpath is a directory and does not allow write permission (needed to update the .. entry)
.IP "    \(bu" 6
EFAULT: oldpath or newpath is a NULL pointer.
.IP "    \(bu" 6
ENOTDIR: A component of path prefix is not a directory.
.IP "      \(bu" 8
EEXIST: file already exist
.PP

.IP "    \(bu" 6
ECOMM: Communication error
.IP "    \(bu" 6
EPROTONOSUPPORT: oldpath or newpath has a syntax error or the protocol speficied is not supported
.IP "    \(bu" 6
EINVAL: oldpath or newpath has an invalid syntax . 
.PP

.PP

.PP
.RE
.PP

.SS "int gfal_open (const char *, int, mode_t)"
.PP
opens a file according to the value of flags 
.PP
\fBParameters:\fP
.RS 4
\fIfilename\fP specifies the file name: either a logical file name, a guid, an SURL or a TURL 
.br
\fIflags\fP value is built by OR’ing the bits defined in <fcntl.h> but one and only one of the first three flags below must be used
.IP "\(bu" 2
O_RDONLY open for reading only
.IP "  \(bu" 4
O_WRONLY open for writing only
.PP

.IP "\(bu" 2
O_RDWR open for reading and writing
.IP "  \(bu" 4
O_CREAT If the file exists already and O_EXCL is also set, gfal_open will fail.
.IP "  \(bu" 4
O_LARGEFILE allows files whose sizes cannot be represented in 31 bits to be opened 
.PP

.PP
.br
\fImode\fP usef only if file is created 
.RE
.PP
\fBReturns:\fP
.RS 4
This routine returns the file descriptor if the operation was successful or -1 if the operation failed. In the latter case, errno is set appropriately
.IP "\(bu" 2
ERRNO list : 
.br
.IP "  \(bu" 4
EACCES: Search permission is denied on a component of the path prefix or specified access to the file itself is denied.
.IP "  \(bu" 4
EFAULT: path is a NULL pointer.
.IP "  \(bu" 4
ENOTDIR: A component of path prefix is not a directory.
.IP "  \(bu" 4
EINVAL: path has an invalid syntax or amode is invalid.
.IP "  \(bu" 4
ECOMM: Communication error.
.IP "  \(bu" 4
EPROTONOSUPPORT: Access method not supported. 
.PP

.PP
.RE
.PP

.SS "DIR * gfal_opendir (const char * name)"
.PP
open a directory 
.PP
opens a directory to be used in subsequent gfal_readdir operations the url supported are : local files, surls, catalog url ( lfc,...) 
.PP
\fBParameters:\fP
.RS 4
\fIname\fP of the directory to open 
.RE
.PP
\fBReturns:\fP
.RS 4
file descriptor DIR* if success else NULL if error and errno is set ( gfal_posix_error_print() )
.RE
.PP
.IP "\(bu" 2
ERRNO list : 
.br
.IP "  \(bu" 4
usual errors:
.IP "    \(bu" 6
ENOENT: The named file/directory does not exist.
.IP "    \(bu" 6
EACCES: Write perimission is denied for path, or, search permission is denied for one of the directories in the path prefix of oldpath or newpath, or oldpath is a directory and does not allow write permission (needed to update the .. entry)
.IP "    \(bu" 6
EFAULT: path is a NULL pointer.
.IP "      \(bu" 8
ENOTEMPTY : newpath is a nonempty directory, that is, contains entries other than '.' and '..'
.PP

.IP "    \(bu" 6
ENOTDIR: path or a component in path is not a directory.
.IP "      \(bu" 8
EMFILE: too many file open by the process
.PP

.IP "    \(bu" 6
ECOMM: Communication error
.IP "    \(bu" 6
EPROTONOSUPPORT: path has a syntax error or the protocol speficied is not supported
.IP "    \(bu" 6
EINVAL: path has an invalid syntax . 
.PP

.PP

.PP

.SS "struct dirent * gfal_readdir (DIR * dir)"
.PP
read a directory 
.PP
The readdir() function returns a pointer to a dirent structure representing the next directory entry in the directory stream pointed to by dirp. It returns NULL on reaching the end of the directory stream or if an error occurred. struct dirent { ino_t d_ino; // inode number off_t d_off; // offset to the next dirent unsigned short d_reclen; // length of this record unsigned char d_type; // type of file; not supported // by all file system types char d_name[256]; // filename };
.PP
\fBParameters:\fP
.RS 4
\fId\fP file handle ( return by opendir ) to read 
.RE
.PP
\fBReturns:\fP
.RS 4
pointer to struct dirent with file information or NULL if end of list or error ( errno is set ( gfal_posix_error_print() ) ) 
.RE
.PP
\fBWarning:\fP
.RS 4
struct dirents are allocated statically, do not use free() on them
.RE
.PP
.IP "\(bu" 2
ERRNO list : 
.br
.IP "  \(bu" 4
usual errors:
.IP "    \(bu" 6
EBADF : bad file descriptor
.IP "      \(bu" 8
ECOMM : Communication error 
.PP

.PP

.PP

.PP

.SS "int gfal_rename (const char * oldpath, const char * newpath)"
.PP
change the name or location of a file oldpath and newpath need to be on the same catalog this functions work only with catalogs (lfc ) and local files 
.PP
\fBParameters:\fP
.RS 4
\fIoldpath\fP : the old path of the file 
.br
\fInewpath\fP : the new path of the file 
.RE
.PP
\fBReturns:\fP
.RS 4
: return 0 if success, else -1 and errno / \fBgfal_posix_error_print()\fP
.IP "\(bu" 2
ERRNO list : 
.br
.IP "  \(bu" 4
usual errors:
.IP "    \(bu" 6
ENOENT: The named file/directory does not exist.
.IP "    \(bu" 6
EACCES: Write perimission is denied for newpath or oldpath, or, search permission is denied for one of the directories in the path prefix of oldpath or newpath, or oldpath is a directory and does not allow write permission (needed to update the .. entry)
.IP "    \(bu" 6
EFAULT: oldpath or newpath is a NULL pointer.
.IP "      \(bu" 8
EISDIR: newpath is an existing directory but oldpath is not a directory
.IP "      \(bu" 8
ENOTEMPTY or EEXIST : newpath is a nonempty directory, that is, contains entries other than '.' and '..'
.PP

.IP "    \(bu" 6
ENOTDIR: A component of path prefix is not a directory.
.IP "      \(bu" 8
EXDEV oldpath and newpath are not on the same mounted file system.
.PP

.IP "    \(bu" 6
ECOMM: Communication error
.IP "    \(bu" 6
EPROTONOSUPPORT: oldpath or newpath has a syntax error or the protocol speficied is not supported
.IP "    \(bu" 6
EINVAL: oldpath or newpath has an invalid syntax . 
.PP

.PP

.PP
.RE
.PP

.SS "int gfal_rmdir (const char * path)"
.PP
removes a directory if it is empty remove an existing directory, return error if the dir is not empty 
.PP
\fBParameters:\fP
.RS 4
\fIpath\fP specifies the directory name, can be a surl ( srm://), local (file://) or a catalog url ( lfc:, ....) 
.RE
.PP
\fBReturns:\fP
.RS 4
return 0 is success else -1 and errno is set ( and \fBgfal_posix_print_error()\fP )
.IP "\(bu" 2
ERRNO list : 
.br
.IP "  \(bu" 4
usual errors:
.IP "    \(bu" 6
ENOENT: The named file/directory does not exist.
.IP "    \(bu" 6
EACCES: Write perimission is denied for path, or, search permission is denied for one of the directories in the path prefix of oldpath or newpath, or oldpath is a directory and does not allow write permission (needed to update the .. entry)
.IP "    \(bu" 6
EFAULT: path is a NULL pointer.
.IP "      \(bu" 8
ENOTEMPTY : path is a nonempty directory, that is, contains entries other than '.' and '..'
.PP

.IP "    \(bu" 6
ENOTDIR: A component of path prefix is not a directory.
.IP "    \(bu" 6
ECOMM: Communication error
.IP "    \(bu" 6
EPROTONOSUPPORT: path has a syntax error or the protocol speficied is not supported
.IP "    \(bu" 6
EINVAL: path has an invalid syntax . 
.PP

.PP

.PP
.RE
.PP

.SS "int gfal_stat (const char * path, struct stat * buf)"
.PP
informations about a file These functions return information about a file. No permissions are required on the file itself, but — in the case of stat() and lstat() — execute (search) permission is required on all of the directories in path that lead to the file. 
.PP
\fBParameters:\fP
.RS 4
\fIpath\fP : path of a file. Can be a SURL, a Catalog URL or a guid 
.br
\fIbuff\fP : pointer to an allocated struct stat 
.RE
.PP
\fBReturns:\fP
.RS 4
return 0 if success else -1 and errno is set ( and \fBgfal_posix_print_error()\fP )
.RE
.PP
.IP "\(bu" 2
ERRNO list : 
.br
.IP "  \(bu" 4
usual errors:
.IP "    \(bu" 6
ENOENT: The named file/directory does not exist.
.IP "    \(bu" 6
EACCES: Write perimission is denied for newpath or oldpath, or, search permission is denied for one of the directories in the path prefix of oldpath or newpath, or oldpath is a directory and does not allow write permission (needed to update the .. entry)
.IP "    \(bu" 6
EFAULT: oldpath or newpath is a NULL pointer.
.IP "    \(bu" 6
ENOTDIR: A component of path prefix is not a directory.
.IP "    \(bu" 6
ECOMM: Communication error
.IP "    \(bu" 6
EPROTONOSUPPORT: oldpath or newpath has a syntax error or the protocol speficied is not supported
.IP "    \(bu" 6
EINVAL: oldpath or newpath has an invalid syntax . 
.PP

.PP

.PP

