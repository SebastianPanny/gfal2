.TH "/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" 3 "17 Oct 2011" "Version 2.0.1" "CERN org.glite.Gfal" \" -*- nroff -*-
.ad l
.nh
.SH NAME
/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c \- new file for the posix interface 
.SH SYNOPSIS
.br
.PP
\fC#include <common/gfal_constants.h>\fP
.br
\fC#include 'gfal_posix_api.h'\fP
.br
\fC#include 'gfal_posix_internal.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "int \fBgfal_access\fP (const char *path, int amode)"
.br
.RI "\fItest access to the given file \fP"
.ti -1c
.RI "int \fBgfal_chmod\fP (const char *path, mode_t mode)"
.br
.RI "\fIchange the right for a file or a folder \fP"
.ti -1c
.RI "int \fBgfal_rename\fP (const char *oldpath, const char *newpath)"
.br
.RI "\fIchange the name or location of a file oldpath and newpath need to be on the same plugin this functions work only with plugins (lfc ) and local files \fP"
.ti -1c
.RI "int \fBgfal_stat\fP (const char *path, struct stat *buff)"
.br
.RI "\fIinformations about a file These functions return information about a file. No permissions are required on the file itself, but — in the case of stat() and lstat() — execute (search) permission is required on all of the directories in path that lead to the file. \fP"
.ti -1c
.RI "int \fBgfal_lstat\fP (const char *path, struct stat *buff)"
.br
.RI "\fIgfal_lstat is identical to \fBgfal_stat\fP except for symbolic links. In this case, the link itself is statted and not followed. \fP"
.ti -1c
.RI "int \fBgfal_mkdirp\fP (const char *path, mode_t mode)"
.br
.RI "\fIcreate a new directory creates a new directory with permission bits taken from mode. The default behavior of this command is recursive, like 'mkdir -p'. \fP"
.ti -1c
.RI "int \fBgfal_mkdir\fP (const char *path, mode_t mode)"
.br
.ti -1c
.RI "int \fBgfal_rmdir\fP (const char *path)"
.br
.RI "\fIremoves a directory if it is empty remove an existing directory, return error if the dir is not empty \fP"
.ti -1c
.RI "DIR * \fBgfal_opendir\fP (const char *name)"
.br
.RI "\fIopen a directory \fP"
.ti -1c
.RI "dirent * \fBgfal_readdir\fP (DIR *d)"
.br
.RI "\fIread a directory similar to the POSIX call readdir The readdir() function returns a pointer to a dirent structure representing the next directory entry in the directory stream pointed to by dirp. It returns NULL on reaching the end of the directory stream or if an error occurred. struct dirent { ino_t d_ino; // inode number off_t d_off; // offset to the next dirent unsigned short d_reclen; // length of this record unsigned char d_type; // type of file; not supported // by all file system types char d_name[256]; // filename }; \fP"
.ti -1c
.RI "int \fBgfal_closedir\fP (DIR *d)"
.br
.RI "\fIclose a file descriptor of a directory similar to the POSIX call closedir close the file descriptor of an opendir call \fP"
.ti -1c
.RI "int \fBgfal_open\fP (const char *path, int flag,...)"
.br
.RI "\fIopen a file similar to the POSIX call open opens a file according to the value of flags. \fP"
.ti -1c
.RI "int \fBgfal_creat\fP (const char *filename, mode_t mode)"
.br
.RI "\fIcreate a new file or truncate an existing one similar to the POSIX call creat opens a file according to the value of flags. \fP"
.ti -1c
.RI "int \fBgfal_read\fP (int fd, void *buff, size_t s_buff)"
.br
.RI "\fIread a file similar to the POSIX call read gfal_read reads up to size bytes from the file descriptor fd into the buffer pointed by buff \fP"
.ti -1c
.RI "int \fBgfal_write\fP (int fd, const void *buff, size_t s_buff)"
.br
.RI "\fIwrite a file similar to the POSIX call write gfal_write writes size bytes from the buffer pointed by buff to the file descriptor fd. \fP"
.ti -1c
.RI "int \fBgfal_close\fP (int fd)"
.br
.RI "\fIclose a file similar to the POSIX call close closes the file whose descriptor fd is the one returned by gfal_open. \fP"
.ti -1c
.RI "int \fBgfal_symlink\fP (const char *oldpath, const char *newpath)"
.br
.RI "\fImake a new name for a file \fP"
.ti -1c
.RI "off_t \fBgfal_lseek\fP (int fd, off_t offset, int whence)"
.br
.RI "\fIset position in a file \fP"
.ti -1c
.RI "ssize_t \fBgfal_getxattr\fP (const char *path, const char *name, void *value, size_t size)"
.br
.RI "\fIretrieve an extended attribute value \fP"
.ti -1c
.RI "ssize_t \fBgfal_readlink\fP (const char *path, char *buff, size_t buffsiz)"
.br
.ti -1c
.RI "int \fBgfal_unlink\fP (const char *path)"
.br
.RI "\fIdelete a name and possibly the file it refers to \fP"
.ti -1c
.RI "ssize_t \fBgfal_listxattr\fP (const char *path, char *list, size_t size)"
.br
.RI "\fIlist all extended attributes \fP"
.ti -1c
.RI "int \fBgfal_setxattr\fP (const char *path, const char *name, const void *value, size_t size, int flags)"
.br
.RI "\fIset an extended attribute to a given value similar to the setxattr standard call of libattr \fP"
.ti -1c
.RI "int \fBgfal_removexattr\fP (const char *path, const char *name)"
.br
.RI "\fIremoves the extended attribute identified by name and associated with the given path in the filesystem similar to the removexattr standard call of libattr \fP"
.ti -1c
.RI "void \fBgfal_posix_print_error\fP ()"
.br
.ti -1c
.RI "int \fBgfal_flush\fP (int fd)"
.br
.ti -1c
.RI "void \fBgfal_posix_release_error\fP ()"
.br
.ti -1c
.RI "int \fBgfal_set_parameter_string\fP (const char *module, const char *name, const char *value)"
.br
.ti -1c
.RI "int \fBgfal_get_parameter\fP (const char *module, const char *name, char *buff_value, size_t s_buff)"
.br
.ti -1c
.RI "int \fBgfal_set_parameter_int\fP (const char *module, const char *name, int value)"
.br
.ti -1c
.RI "int \fBgfal_get_parameter_int\fP (const char *module, const char *name)"
.br
.ti -1c
.RI "void \fBgfal_posix_clear_error\fP ()"
.br
.ti -1c
.RI "int \fBgfal_posix_code_error\fP ()"
.br
.ti -1c
.RI "int \fBgfal_posix_check_error\fP ()"
.br
.ti -1c
.RI "char * \fBgfal_posix_strerror_r\fP (char *buff_err, size_t s_err)"
.br
.ti -1c
.RI "ssize_t \fBgfal_pread\fP (int fd, void *buffer, size_t count, off_t offset)"
.br
.ti -1c
.RI "ssize_t \fBgfal_pwrite\fP (int fd, const void *buffer, size_t count, off_t offset)"
.br
.ti -1c
.RI "void \fBgfal_set_nobdii\fP (int value)"
.br
.ti -1c
.RI "int \fBgfal_is_nobdii\fP ()"
.br
.in -1c
.SH "Detailed Description"
.PP 
new file for the posix interface 

\fBAuthor:\fP
.RS 4
Devresse Adrien 
.RE
.PP
\fBDate:\fP
.RS 4
09/05/2011 
.RE
.PP

.SH "Function Documentation"
.PP 
.SS "int gfal_mkdirp (const char * path, mode_t mode)"
.PP
create a new directory creates a new directory with permission bits taken from mode. The default behavior of this command is recursive, like 'mkdir -p'. 
.PP
\fBParameters:\fP
.RS 4
\fIpath\fP : url of the directory, can be in supported protocols (lfn, srm, file, guid,..) 
.br
\fImode\fP : right of the directory ( depend of the implementation ) 
.RE
.PP
\fBReturns:\fP
.RS 4
return 0 if success else -1 and errno is set call \fBgfal_posix_check_error()\fP to check it 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for CERN org.glite.Gfal from the source code.
