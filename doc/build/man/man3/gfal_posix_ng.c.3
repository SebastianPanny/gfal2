.TH "/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" 3 "29 Aug 2011" "Version 1.90" "CERN org.glite.Gfal" \" -*- nroff -*-
.ad l
.nh
.SH NAME
/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c \- new file for the posix interface 
.SH SYNOPSIS
.br
.PP
\fC#include '../common/gfal_constants.h'\fP
.br
\fC#include 'gfal_posix_api.h'\fP
.br
\fC#include 'gfal_posix_internal.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "int \fBgfal_access\fP (const char *path, int amode)"
.br
.RI "\fItest access to the given file \fP"
.ti -1c
.RI "int \fBgfal_chmod\fP (const char *path, mode_t mode)"
.br
.RI "\fIchange the right for a file or a folder \fP"
.ti -1c
.RI "int \fBgfal_rename\fP (const char *oldpath, const char *newpath)"
.br
.RI "\fIchange the name or location of a file oldpath and newpath need to be on the same catalog this functions work only with catalogs (lfc ) and local files \fP"
.ti -1c
.RI "int \fBgfal_stat\fP (const char *path, struct stat *buff)"
.br
.RI "\fIinformations about a file These functions return information about a file. No permissions are required on the file itself, but — in the case of stat() and lstat() — execute (search) permission is required on all of the directories in path that lead to the file. \fP"
.ti -1c
.RI "int \fBgfal_lstat\fP (const char *path, struct stat *buff)"
.br
.RI "\fIgfal_lstat is identical to \fBgfal_stat\fP except for symbolic links. In this case, the link itself is statted and not followed. \fP"
.ti -1c
.RI "int \fBgfal_mkdirp\fP (const char *path, mode_t mode)"
.br
.RI "\fIcreate a new directory creates a new directory with permission bits taken from mode. The default behavior of this command is recursive, like 'mkdir -p'. \fP"
.ti -1c
.RI "int \fBgfal_mkdir\fP (const char *path, mode_t mode)"
.br
.ti -1c
.RI "int \fBgfal_rmdir\fP (const char *path)"
.br
.RI "\fIremoves a directory if it is empty remove an existing directory, return error if the dir is not empty \fP"
.ti -1c
.RI "DIR * \fBgfal_opendir\fP (const char *name)"
.br
.RI "\fIopen a directory \fP"
.ti -1c
.RI "dirent * \fBgfal_readdir\fP (DIR *d)"
.br
.RI "\fIread a directory \fP"
.ti -1c
.RI "int \fBgfal_closedir\fP (DIR *d)"
.br
.RI "\fIread a directory close the file descriptor of an opendir call \fP"
.ti -1c
.RI "int \fBgfal_open\fP (const char *path, int flag, mode_t mode)"
.br
.RI "\fIopen a file opens a file according to the value of flags. \fP"
.ti -1c
.RI "int \fBgfal_creat\fP (const char *filename, mode_t mode)"
.br
.RI "\fIcreate a new file or truncate an existing one opens a file according to the value of flags. \fP"
.ti -1c
.RI "int \fBgfal_read\fP (int fd, void *buff, size_t s_buff)"
.br
.RI "\fIread a file gfal_read reads up to size bytes from the file descriptor fd into the buffer pointed by buff \fP"
.ti -1c
.RI "int \fBgfal_write\fP (int fd, const void *buff, size_t s_buff)"
.br
.RI "\fIwrite a file gfal_write writes size bytes from the buffer pointed by buff to the file descriptor fd. \fP"
.ti -1c
.RI "int \fBgfal_close\fP (int fd)"
.br
.RI "\fIclose a file closes the file whose descriptor fd is the one returned by gfal_open. \fP"
.ti -1c
.RI "int \fBgfal_symlink\fP (const char *oldpath, const char *newpath)"
.br
.RI "\fImake a new name for a file symlink() creates a symbolic link named newpath which contains the string oldpath. \fP"
.ti -1c
.RI "off_t \fBgfal_lseek\fP (int fd, off_t offset, int whence)"
.br
.RI "\fIset position in a file gfal_lseek positions/repositions to offset the file associated with the descriptor fd generated by a previous gfal_open. whence indicates how to interpret the offset value: \fP"
.ti -1c
.RI "ssize_t \fBgfal_getxattr\fP (const char *path, const char *name, void *value, size_t size)"
.br
.RI "\fIretrieve an extended attribute value gfal_getxattr retrieves an extended value from an url managed by gfal \fP"
.ti -1c
.RI "ssize_t \fBgfal_readlink\fP (const char *path, char *buff, size_t buffsiz)"
.br
.ti -1c
.RI "int \fBgfal_unlink\fP (const char *path)"
.br
.ti -1c
.RI "ssize_t \fBgfal_listxattr\fP (const char *path, char *list, size_t size)"
.br
.RI "\fIlist all extended attributes gfal_listxattr list all extended atributes associated with a file \fP"
.ti -1c
.RI "void \fBgfal_posix_print_error\fP ()"
.br
.ti -1c
.RI "void \fBgfal_posix_release_error\fP ()"
.br
.ti -1c
.RI "void \fBgfal_posix_clear_error\fP ()"
.br
.ti -1c
.RI "int \fBgfal_posix_code_error\fP ()"
.br
.ti -1c
.RI "int \fBgfal_posix_check_error\fP ()"
.br
.ti -1c
.RI "char * \fBgfal_posix_strerror_r\fP (char *buff_err, size_t s_err)"
.br
.ti -1c
.RI "void \fBgfal_set_nobdii\fP (int value)"
.br
.RI "\fIdefine if bdii System is ignored or not \fP"
.ti -1c
.RI "int \fBgfal_is_nobdii\fP ()"
.br
.in -1c
.SH "Detailed Description"
.PP 
new file for the posix interface 

\fBAuthor:\fP
.RS 4
Devresse Adrien 
.RE
.PP
\fBDate:\fP
.RS 4
09/05/2011 
.RE
.PP

.SH "Function Documentation"
.PP 
.SS "void gfal_set_nobdii (int value)"
.PP
define if bdii System is ignored or not 
.PP
End of the POSIX groupe 
.SH "Author"
.PP 
Generated automatically by Doxygen for CERN org.glite.Gfal from the source code.
