.TH "/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" 3 "30 Jun 2011" "Version 1.90" "CERN org.glite.Gfal" \" -*- nroff -*-
.ad l
.nh
.SH NAME
/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c \- main file of the posix lib ng 
.SH SYNOPSIS
.br
.PP
\fC#include '../common/gfal_constants.h'\fP
.br
\fC#include 'gfal_posix_api.h'\fP
.br
\fC#include 'gfal_posix_internal.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "int \fBgfal_access\fP (const char *path, int amode)"
.br
.RI "\fItest access to the given file \fP"
.ti -1c
.RI "int \fBgfal_chmod\fP (const char *path, mode_t mode)"
.br
.RI "\fIset rights of the file/dir \fP"
.ti -1c
.RI "int \fBgfal_rename\fP (const char *oldpath, const char *newpath)"
.br
.RI "\fIchange the name or location of a file oldpath and newpath need to be on the same catalog this functions work only with catalogs (lfc ) and local files \fP"
.ti -1c
.RI "int \fBgfal_stat\fP (const char *path, struct stat *buf)"
.br
.RI "\fIinformations about a file These functions return information about a file. No permissions are required on the file itself, but — in the case of stat() and lstat() — execute (search) permission is required on all of the directories in path that lead to the file. \fP"
.ti -1c
.RI "int \fBgfal_lstat\fP (const char *path, struct stat *buf)"
.br
.RI "\fIgfal_lstat is identical to \fBgfal_stat\fP except for symbolic links. In this case, the link itself is statted and not followed. \fP"
.ti -1c
.RI "int \fBgfal_mkdir\fP (const char *path, mode_t mode)"
.br
.RI "\fIcreate a new directory creates a new directory with permission bits taken from mode. The default behavior of this command is recursive, like 'mkdir -p'. \fP"
.ti -1c
.RI "int \fBgfal_rmdir\fP (const char *path)"
.br
.RI "\fIremoves a directory if it is empty remove an existing directory, return error if the dir is not empty \fP"
.ti -1c
.RI "DIR * \fBgfal_opendir\fP (const char *name)"
.br
.RI "\fIopen a directory \fP"
.ti -1c
.RI "dirent * \fBgfal_readdir\fP (DIR *dir)"
.br
.RI "\fIread a directory \fP"
.ti -1c
.RI "int \fBgfal_closedir\fP (DIR *d)"
.br
.RI "\fIgfal_closedir - close a directory \fP"
.ti -1c
.RI "int \fBgfal_open\fP (const char *path, int flag, mode_t mode)"
.br
.RI "\fIopens a file according to the value of flags \fP"
.ti -1c
.RI "int \fBgfal_close\fP (int fd)"
.br
.RI "\fIclose the current file descriptor \fP"
.ti -1c
.RI "void \fBgfal_posix_print_error\fP ()"
.br
.ti -1c
.RI "void \fBgfal_posix_release_error\fP ()"
.br
.ti -1c
.RI "void \fBgfal_posix_clear_error\fP ()"
.br
.ti -1c
.RI "int \fBgfal_posix_code_error\fP ()"
.br
.ti -1c
.RI "int \fBgfal_posix_check_error\fP ()"
.br
.ti -1c
.RI "char * \fBgfal_posix_strerror\fP ()"
.br
.in -1c
.SH "Detailed Description"
.PP 
main file of the posix lib ng 

\fBAuthor:\fP
.RS 4
Devresse Adrien 
.RE
.PP
\fBVersion:\fP
.RS 4
2.0 
.RE
.PP
\fBDate:\fP
.RS 4
09/05/2011 
.RE
.PP

.SH "Function Documentation"
.PP 
.SS "int gfal_posix_check_error ()"
.PP
check the current error, if no error report return 0 else return 1 and print the error on stderr 
.PP
\fBWarning:\fP
.RS 4
this does not clear the error 
.RE
.PP

.SS "void gfal_posix_clear_error ()"
.PP
clear the last error reported by a gfal posix function 
.SS "int gfal_posix_code_error ()"
.PP
return the current error code registered or if not exist 
.SS "void gfal_posix_print_error ()"
.PP
Display the last string error reported by the gfal error system for the posix API Errors are printed on stderr 
.SS "void gfal_posix_release_error ()"
.PP
Display and clear the last string error reported by the gfal error system for the posix API and similar to a \fBgfal_posix_print_error()\fP and a \fBgfal_posix_clear_error()\fP 
.SS "char* gfal_posix_strerror ()"
.PP
get the current error string 
.SH "Author"
.PP 
Generated automatically by Doxygen for CERN org.glite.Gfal from the source code.
