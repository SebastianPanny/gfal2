.TH "_gfal_plugin_interface" 3 "4 Oct 2011" "Version 2.0.1" "CERN org.glite.Gfal" \" -*- nroff -*-
.ad l
.nh
.SH NAME
_gfal_plugin_interface \- 
.SH SYNOPSIS
.br
.PP
\fC#include <gfal_common_plugin_interface.h>\fP
.PP
.SS "Data Fields"

.in +1c
.ti -1c
.RI "plugin_handle \fBhandle\fP"
.br
.ti -1c
.RI "const char *(* \fBgetName\fP )()"
.br
.ti -1c
.RI "void(* \fBplugin_delete\fP )(plugin_handle)"
.br
.ti -1c
.RI "gboolean(* \fBcheck_plugin_url\fP )(plugin_handle, const char *url, plugin_mode mode, GError **err)"
.br
.ti -1c
.RI "int(* \fBaccessG\fP )(plugin_handle, const char *path, int mode, GError **err)"
.br
.ti -1c
.RI "int(* \fBchmodG\fP )(plugin_handle, const char *, mode_t, GError **err)"
.br
.ti -1c
.RI "int(* \fBrenameG\fP )(plugin_handle, const char *, const char *, GError **err)"
.br
.ti -1c
.RI "int(* \fBsymlinkG\fP )(plugin_handle, const char *, const char *, GError **err)"
.br
.ti -1c
.RI "int(* \fBstatG\fP )(plugin_handle, const char *, struct stat *buf, GError **err)"
.br
.ti -1c
.RI "int(* \fBlstatG\fP )(plugin_handle, const char *, struct stat *buf, GError **err)"
.br
.ti -1c
.RI "ssize_t(* \fBreadlinkG\fP )(plugin_handle, const char *, char *buff, size_t buffsiz, GError **)"
.br
.ti -1c
.RI "gfal_file_handle(* \fBopendirG\fP )(plugin_handle, const char *, GError **)"
.br
.ti -1c
.RI "int(* \fBclosedirG\fP )(plugin_handle, gfal_file_handle, GError **)"
.br
.ti -1c
.RI "dirent *(* \fBreaddirG\fP )(plugin_handle, gfal_file_handle, GError **)"
.br
.ti -1c
.RI "int(* \fBmkdirpG\fP )(plugin_handle, const char *, mode_t, gboolean pflag, GError **)"
.br
.ti -1c
.RI "int(* \fBrmdirG\fP )(plugin_handle, const char *, GError **)"
.br
.ti -1c
.RI "gfal_file_handle(* \fBopenG\fP )(plugin_handle, const char *path, int flag, mode_t mode, GError **)"
.br
.ti -1c
.RI "int(* \fBreadG\fP )(plugin_handle, gfal_file_handle fd, void *buff, size_t count, GError **)"
.br
.ti -1c
.RI "int(* \fBwriteG\fP )(plugin_handle, gfal_file_handle fd, void *buff, size_t count, GError **)"
.br
.ti -1c
.RI "int(* \fBcloseG\fP )(plugin_handle, gfal_file_handle fd, GError **)"
.br
.ti -1c
.RI "int(* \fBlseekG\fP )(plugin_handle, gfal_file_handle fd, off_t offset, int whence, GError **err)"
.br
.ti -1c
.RI "int(* \fBunlinkG\fP )(plugin_handle, const char *path, GError **)"
.br
.ti -1c
.RI "ssize_t(* \fBgetxattrG\fP )(plugin_handle, const char *, const char *, void *buff, size_t s_buff, GError **err)"
.br
.ti -1c
.RI "ssize_t(* \fBlistxattrG\fP )(plugin_handle, const char *, char *list, size_t s_list, GError **err)"
.br
.ti -1c
.RI "int(* \fBsetxattrG\fP )(plugin_handle, const char *, const char *, const void *, size_t, int, GError **)"
.br
.ti -1c
.RI "int(* \fBplugin_parameter\fP )(plugin_handle handle, const char *name, char *value, size_t max_size, GFAL_PARAM_FUNC func, GFAL_TYPE req_type, GError **err)"
.br
.in -1c
.SH "Detailed Description"
.PP 
Main Interface that Must return the function 'gfal_plugin_init' of each plugin of GFAL 2.0 the minimums calls are : getName, plugin_delete, check_plugin_url all the unused function pointers must be set to NULL 
.PP
.SH "Field Documentation"
.PP 
.SS "int(* \fB_gfal_plugin_interface::accessG\fP)(plugin_handle, const char *path, int mode, GError **err)"
.PP
access function for the access for the normal associated url 
.SS "gboolean(* \fB_gfal_plugin_interface::check_plugin_url\fP)(plugin_handle, const char *url, plugin_mode mode, GError **err)"
.PP
Check the url syntax and the operation, return TRUE if the operation is compatible with the plugin, else FALSE. THIS function MUST be implemented in EACH plugin. 
.PP
\fBWarning:\fP
.RS 4
This function is a key function of GFAL 2.0, It MUST be as fast as possible. 
.RE
.PP

.SS "int(* \fB_gfal_plugin_interface::chmodG\fP)(plugin_handle, const char *, mode_t, GError **err)"
.PP
function pointer for the access using the guid url 
.SS "void(* \fB_gfal_plugin_interface::plugin_delete\fP)(plugin_handle)"
.PP
Called before the destruction of the plugin interface 

.SH "Author"
.PP 
Generated automatically by Doxygen for CERN org.glite.Gfal from the source code.
