<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.4.7">
  <compounddef id="gfal__common__srm__endpoint_8c" kind="file">
    <compoundname>gfal_common_srm_endpoint.c</compoundname>
    <includes local="no">time.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">unistd.h</includes>
    <includes local="no">regex.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">errno.h</includes>
    <includes refid="gfal__common__internal_8h" local="yes">../gfal_common_internal.h</includes>
    <includes refid="gfal__common__srm__endpoint_8h" local="yes">gfal_common_srm_endpoint.h</includes>
    <includes refid="gfal__common__errverbose_8h" local="yes">../gfal_common_errverbose.h</includes>
    <includes refid="gfal__common__mds_8h" local="yes">../mds/gfal_common_mds.h</includes>
    <incdepgraph>
      <node id="1496">
        <label>sys/stat.h</label>
      </node>
      <node id="1499">
        <label>gfal_common_plugin_interface.h</label>
        <link refid="gfal__common__plugin__interface_8h-source"/>
        <childnode refid="1492" relation="include">
        </childnode>
        <childnode refid="1491" relation="include">
        </childnode>
        <childnode refid="1493" relation="include">
        </childnode>
        <childnode refid="1498" relation="include">
        </childnode>
      </node>
      <node id="1504">
        <label>stdarg.h</label>
      </node>
      <node id="1497">
        <label>attr/xattr.h</label>
      </node>
      <node id="1490">
        <label>../gfal_common_internal.h</label>
        <link refid="gfal__common__internal_8h"/>
        <childnode refid="1491" relation="include">
        </childnode>
        <childnode refid="1493" relation="include">
        </childnode>
      </node>
      <node id="1488">
        <label>stdlib.h</label>
      </node>
      <node id="1503">
        <label>../gfal_common_errverbose.h</label>
        <link refid="gfal__common__errverbose_8h"/>
        <childnode refid="1498" relation="include">
        </childnode>
        <childnode refid="1504" relation="include">
        </childnode>
        <childnode refid="1505" relation="include">
        </childnode>
        <childnode refid="1485" relation="include">
        </childnode>
        <childnode refid="1489" relation="include">
        </childnode>
        <childnode refid="1492" relation="include">
        </childnode>
      </node>
      <node id="1491">
        <label>gfal_prototypes.h</label>
        <link refid="gfal__prototypes_8h-source"/>
        <childnode refid="1492" relation="include">
        </childnode>
      </node>
      <node id="1489">
        <label>errno.h</label>
      </node>
      <node id="1483">
        <label>/home/adevress/myworkspace/gfal/src/common/srm/gfal_common_srm_endpoint.c</label>
        <link refid="gfal_common_srm_endpoint.c"/>
        <childnode refid="1484" relation="include">
        </childnode>
        <childnode refid="1485" relation="include">
        </childnode>
        <childnode refid="1486" relation="include">
        </childnode>
        <childnode refid="1487" relation="include">
        </childnode>
        <childnode refid="1488" relation="include">
        </childnode>
        <childnode refid="1489" relation="include">
        </childnode>
        <childnode refid="1490" relation="include">
        </childnode>
        <childnode refid="1500" relation="include">
        </childnode>
        <childnode refid="1503" relation="include">
        </childnode>
        <childnode refid="1506" relation="include">
        </childnode>
      </node>
      <node id="1500">
        <label>gfal_common_srm_endpoint.h</label>
        <link refid="gfal__common__srm__endpoint_8h"/>
        <childnode refid="1491" relation="include">
        </childnode>
        <childnode refid="1493" relation="include">
        </childnode>
        <childnode refid="1501" relation="include">
        </childnode>
        <childnode refid="1498" relation="include">
        </childnode>
        <childnode refid="1488" relation="include">
        </childnode>
      </node>
      <node id="1506">
        <label>../mds/gfal_common_mds.h</label>
        <link refid="gfal__common__mds_8h-source"/>
        <childnode refid="1492" relation="include">
        </childnode>
        <childnode refid="1491" relation="include">
        </childnode>
        <childnode refid="1493" relation="include">
        </childnode>
      </node>
      <node id="1501">
        <label>gfal_common_srm.h</label>
        <link refid="gfal__common__srm_8h"/>
        <childnode refid="1485" relation="include">
        </childnode>
        <childnode refid="1487" relation="include">
        </childnode>
        <childnode refid="1491" relation="include">
        </childnode>
        <childnode refid="1493" relation="include">
        </childnode>
        <childnode refid="1498" relation="include">
        </childnode>
        <childnode refid="1502" relation="include">
        </childnode>
      </node>
      <node id="1494">
        <label>sys/types.h</label>
      </node>
      <node id="1485">
        <label>string.h</label>
      </node>
      <node id="1486">
        <label>unistd.h</label>
      </node>
      <node id="1502">
        <label>../../externals/gsimplecache/gcachemain.h</label>
        <link refid="gcachemain_8h-source"/>
        <childnode refid="1492" relation="include">
        </childnode>
      </node>
      <node id="1492">
        <label>glib.h</label>
      </node>
      <node id="1484">
        <label>time.h</label>
      </node>
      <node id="1498">
        <label>gfal_constants.h</label>
        <link refid="gfal__constants_8h"/>
      </node>
      <node id="1487">
        <label>regex.h</label>
      </node>
      <node id="1505">
        <label>stdio.h</label>
      </node>
      <node id="1493">
        <label>gfal_types.h</label>
        <link refid="gfal__types_8h-source"/>
        <childnode refid="1486" relation="include">
        </childnode>
        <childnode refid="1492" relation="include">
        </childnode>
        <childnode refid="1494" relation="include">
        </childnode>
        <childnode refid="1495" relation="include">
        </childnode>
        <childnode refid="1496" relation="include">
        </childnode>
        <childnode refid="1497" relation="include">
        </childnode>
        <childnode refid="1498" relation="include">
        </childnode>
        <childnode refid="1491" relation="include">
        </childnode>
        <childnode refid="1499" relation="include">
        </childnode>
      </node>
      <node id="1495">
        <label>dirent.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="gfal__common__srm__endpoint_8c_153abf256730d533302d1910e5fb61efe" prot="public" static="no">
        <name>_GNU_SOURCE</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/common/srm/gfal_common_srm_endpoint.c" line="26" bodyfile="/home/adevress/myworkspace/gfal/src/common/srm/gfal_common_srm_endpoint.c" bodystart="26" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="gfal__common__srm__endpoint_8c_1e0b7b0c302d9d514df5518cbf8b4c215" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gfal_srm_determine_endpoint</definition>
        <argsstring>(gfal_srmv2_opt *opts, const char *surl, char *buff_endpoint, size_t s_buff, enum gfal_srm_proto *srm_type, GError **err)</argsstring>
        <name>gfal_srm_determine_endpoint</name>
        <param>
          <type>gfal_srmv2_opt *</type>
          <declname>opts</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>surl</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>buff_endpoint</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>s_buff</declname>
        </param>
        <param>
          <type>enum gfal_srm_proto *</type>
          <declname>srm_type</declname>
        </param>
        <param>
          <type>GError **</type>
          <declname>err</declname>
        </param>
        <briefdescription>
<para>extract endpoint and srm_type from a surl determine the best endpoint associated with the surl and the param of the actual handle (no bdii check or not) see the diagram in doc/diagrams/surls_get_endpoint_activity_diagram.svg for more informations </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>return 0 with endpoint and types set if success else -1 and set Error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/common/srm/gfal_common_srm_endpoint.c" line="47" bodyfile="/home/adevress/myworkspace/gfal/src/common/srm/gfal_common_srm_endpoint.c" bodystart="47" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="gfal__common__srm__endpoint_8c_199a6995d5d222d54f28d7952499f60ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>gboolean</type>
        <definition>gboolean gfal_check_fullendpoint_in_surlG</definition>
        <argsstring>(const char *surl, GError **err)</argsstring>
        <name>gfal_check_fullendpoint_in_surlG</name>
        <param>
          <type>const char *</type>
          <declname>surl</declname>
        </param>
        <param>
          <type>GError **</type>
          <declname>err</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>return TRUE if a full endpoint is contained in surl else FALSE </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/common/srm/gfal_common_srm_endpoint.c" line="77" bodyfile="/home/adevress/myworkspace/gfal/src/common/srm/gfal_common_srm_endpoint.c" bodystart="77" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="gfal__common__srm__endpoint_8c_1fbb46a068ea2a908160cb7b998377ffd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gfal_get_fullendpointG</definition>
        <argsstring>(const char *surl, char *buff_endpoint, size_t s_buff, GError **err)</argsstring>
        <name>gfal_get_fullendpointG</name>
        <param>
          <type>const char *</type>
          <declname>surl</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>buff_endpoint</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>s_buff</declname>
        </param>
        <param>
          <type>GError **</type>
          <declname>err</declname>
        </param>
        <briefdescription>
<para>create a full endpoint from a &quot;full-surl&quot; </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/common/srm/gfal_common_srm_endpoint.c" line="90" bodyfile="/home/adevress/myworkspace/gfal/src/common/srm/gfal_common_srm_endpoint.c" bodystart="90" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="gfal__common__srm__endpoint_8c_12f98241970670a89375554bc1a37a139" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>enum gfal_srm_proto</type>
        <definition>static enum gfal_srm_proto gfal_convert_proto_from_bdii</definition>
        <argsstring>(const char *se_type_bdii)</argsstring>
        <name>gfal_convert_proto_from_bdii</name>
        <param>
          <type>const char *</type>
          <declname>se_type_bdii</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>map a bdii se protocol type to a gfal protocol type </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/common/srm/gfal_common_srm_endpoint.c" line="111" bodyfile="/home/adevress/myworkspace/gfal/src/common/srm/gfal_common_srm_endpoint.c" bodystart="111" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="gfal__common__srm__endpoint_8c_118f17508658a17b98000d81d5300306c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gfal_select_best_protocol_and_endpointG</definition>
        <argsstring>(gfal_srmv2_opt *opts, char **tab_se_type, char **tab_endpoint, char *buff_endpoint, size_t s_buff, enum gfal_srm_proto *srm_type, GError **err)</argsstring>
        <name>gfal_select_best_protocol_and_endpointG</name>
        <param>
          <type>gfal_srmv2_opt *</type>
          <declname>opts</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>tab_se_type</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>tab_endpoint</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>buff_endpoint</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>s_buff</declname>
        </param>
        <param>
          <type>enum gfal_srm_proto *</type>
          <declname>srm_type</declname>
        </param>
        <param>
          <type>GError **</type>
          <declname>err</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>select the best protocol choice and the best endpoint choice from a list of protocol and endpoints obtained by the bdii </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/common/srm/gfal_common_srm_endpoint.c" line="128" bodyfile="/home/adevress/myworkspace/gfal/src/common/srm/gfal_common_srm_endpoint.c" bodystart="128" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="gfal__common__srm__endpoint_8c_1c986f73b04fffd801b49861414fd33b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gfal_get_hostname_from_surlG</definition>
        <argsstring>(const char *surl, char *buff_hostname, size_t s_buff, GError **err)</argsstring>
        <name>gfal_get_hostname_from_surlG</name>
        <param>
          <type>const char *</type>
          <declname>surl</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>buff_hostname</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>s_buff</declname>
        </param>
        <param>
          <type>GError **</type>
          <declname>err</declname>
        </param>
        <briefdescription>
<para>get the hostname from a surl </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>return 0 if success else -1 and err is set </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/common/srm/gfal_common_srm_endpoint.c" line="157" bodyfile="/home/adevress/myworkspace/gfal/src/common/srm/gfal_common_srm_endpoint.c" bodystart="157" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="gfal__common__srm__endpoint_8c_18ce7110e994216e73c28b439829b1d21" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gfal_get_endpoint_and_setype_from_bdiiG</definition>
        <argsstring>(gfal_srmv2_opt *opts, const char *surl, char *buff_endpoint, size_t s_buff, enum gfal_srm_proto *srm_type, GError **err)</argsstring>
        <name>gfal_get_endpoint_and_setype_from_bdiiG</name>
        <param>
          <type>gfal_srmv2_opt *</type>
          <declname>opts</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>surl</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>buff_endpoint</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>s_buff</declname>
        </param>
        <param>
          <type>enum gfal_srm_proto *</type>
          <declname>srm_type</declname>
        </param>
        <param>
          <type>GError **</type>
          <declname>err</declname>
        </param>
        <briefdescription>
<para>get endpoint from the bdii system only </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>0 if success with endpoint and srm_type set correctly else -1 and err set </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/common/srm/gfal_common_srm_endpoint.c" line="186" bodyfile="/home/adevress/myworkspace/gfal/src/common/srm/gfal_common_srm_endpoint.c" bodystart="186" bodyend="206"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="gfal__common__srm__endpoint_8c_1251fb86c4e0980e895246d8276260284" prot="public" static="yes" mutable="no">
        <type>enum gfal_srm_proto</type>
        <definition>enum gfal_srm_proto gfal_proto_list_prefG[]</definition>
        <argsstring>[]</argsstring>
        <name>gfal_proto_list_prefG</name>
        <initializer> { PROTO_SRMv2, PROTO_SRM, PROTO_ERROR_UNKNOW }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/common/srm/gfal_common_srm_endpoint.c" line="39" bodyfile="/home/adevress/myworkspace/gfal/src/common/srm/gfal_common_srm_endpoint.c" bodystart="39" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>file for internal use in the srm part, endpoint determination </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Devresse Adrien </para></simplesect>
<simplesect kind="version"><para>2.0 </para></simplesect>
<simplesect kind="date"><para>22/06/2011 </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>Members<sp/>of<sp/>the<sp/>EGEE<sp/>Collaboration.<sp/>2004.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>See<sp/>http://www.eu-egee.org/partners/<sp/>for<sp/>details<sp/>on<sp/>the<sp/>copyright<sp/>holders.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="preprocessor">#define<sp/>_GNU_SOURCE</highlight></codeline>
<codeline lineno="27"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;time.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unistd.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;regex.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;errno.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../gfal_common_internal.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="gfal__common__srm__endpoint_8h" kindref="compound">gfal_common_srm_endpoint.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../gfal_common_errverbose.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../mds/gfal_common_mds.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>gfal_srm_proto<sp/>gfal_proto_list_prefG[]=<sp/>{<sp/>PROTO_SRMv2,<sp/>PROTO_SRM,<sp/>PROTO_ERROR_UNKNOW<sp/>};</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="gfal__common__srm__endpoint_8c_1e0b7b0c302d9d514df5518cbf8b4c215" kindref="member">gfal_srm_determine_endpoint</ref>(gfal_srmv2_opt*<sp/>opts,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>surl,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>buff_endpoint,<sp/>size_t<sp/>s_buff,<sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>gfal_srm_proto*<sp/>srm_type,<sp/>GError**<sp/>err){</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_return_val_err_if_fail(opts<sp/>&amp;&amp;<sp/>buff_endpoint<sp/>&amp;&amp;<sp/>srm_type<sp/>&amp;&amp;<sp/>surl<sp/>&amp;&amp;<sp/>s_buff,-1,<sp/>err,<sp/></highlight><highlight class="stringliteral">&quot;[gfal_srm_determine_endpoint]<sp/>invalid<sp/>value<sp/>in<sp/>params&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//<sp/>check<sp/>params</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GError*<sp/>tmp_err=NULL;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gboolean<sp/>isFullEndpoint<sp/>=<sp/><ref refid="gfal__common__srm__endpoint_8c_199a6995d5d222d54f28d7952499f60ba" kindref="member">gfal_check_fullendpoint_in_surlG</ref>(surl,<sp/>&amp;tmp_err);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>if<sp/>a<sp/>full<sp/>endpoint<sp/>exist</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!tmp_err){</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>isFullEndpoint<sp/>==<sp/>TRUE<sp/><sp/>){<sp/></highlight><highlight class="comment">//<sp/>if<sp/>full<sp/>endpoint<sp/>contained<sp/>in<sp/>url,<sp/>get<sp/>it<sp/>and<sp/>set<sp/>type<sp/>to<sp/>default<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="gfal__common__srm__endpoint_8c_1fbb46a068ea2a908160cb7b998377ffd" kindref="member">gfal_get_fullendpointG</ref>(surl,<sp/>buff_endpoint,<sp/>s_buff,<sp/>&amp;tmp_err)<sp/><sp/>==<sp/>0){</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*srm_type=<sp/>opts-&gt;srm_proto_type;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(opts-&gt;handle-&gt;no_bdii_check<sp/>==<sp/>FALSE){</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/><ref refid="gfal__common__srm__endpoint_8c_18ce7110e994216e73c28b439829b1d21" kindref="member">gfal_get_endpoint_and_setype_from_bdiiG</ref>(opts,<sp/>surl,<sp/>buff_endpoint,<sp/>s_buff,<sp/>srm_type,<sp/>&amp;tmp_err);<sp/><sp/></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_set_error(&amp;tmp_err,0,EINVAL,</highlight><highlight class="stringliteral">&quot;<sp/>no_bdii_check<sp/>option<sp/>is<sp/>set,<sp/>need<sp/>a<sp/>full<sp/>endpoint<sp/>in<sp/>the<sp/>first<sp/>surl&quot;</highlight><highlight class="normal">);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(tmp_err)</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_propagate_prefixed_error(err,<sp/>tmp_err,<sp/></highlight><highlight class="stringliteral">&quot;[%s]&quot;</highlight><highlight class="normal">,__func__);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="70"><highlight class="normal">}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal">gboolean<sp/><ref refid="gfal__common__srm__endpoint_8c_199a6995d5d222d54f28d7952499f60ba" kindref="member">gfal_check_fullendpoint_in_surlG</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>surl,<sp/>GError<sp/>**<sp/>err){</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>regex_t<sp/>rex;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>regcomp(&amp;rex,<sp/></highlight><highlight class="stringliteral">&quot;^srm://([:alnum:]|-|/|\.|_)+:[0-9]+/([:alnum:]|-|/|\.|_)+?SFN=&quot;</highlight><highlight class="normal">,REG_ICASE<sp/>|<sp/>REG_EXTENDED);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_return_val_err_if_fail(ret==0,-1,err,</highlight><highlight class="stringliteral">&quot;[gfal_check_fullendpoint_in_surl]<sp/>fail<sp/>to<sp/>compile<sp/>regex,<sp/>report<sp/>this<sp/>bug&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret=<sp/><sp/>regexec(&amp;rex,surl,0,NULL,0);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>regfree(&amp;rex);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(ret==0)?TRUE:FALSE;<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="84"><highlight class="normal">}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="gfal__common__srm__endpoint_8c_1fbb46a068ea2a908160cb7b998377ffd" kindref="member">gfal_get_fullendpointG</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>surl,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>buff_endpoint,<sp/>size_t<sp/>s_buff,<sp/>GError**<sp/>err){</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>p<sp/>=<sp/>strstr(surl,</highlight><highlight class="stringliteral">&quot;?SFN=&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len_prefix<sp/>=<sp/>strlen(GFAL_PREFIX_SRM);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>the<sp/>srm<sp/>prefix<sp/>length</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len_endpoint_prefix<sp/>=<sp/>strlen(GFAL_ENDPOINT_DEFAULT_PREFIX);<sp/></highlight><highlight class="comment">//<sp/>get<sp/>the<sp/>endpoint<sp/>protocol<sp/>prefix<sp/>len<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_return_val_err_if_fail(p<sp/>&amp;&amp;<sp/>len_prefix<sp/>&amp;&amp;<sp/>(p&gt;(surl+len_prefix))<sp/>&amp;&amp;<sp/>len_endpoint_prefix,<sp/>-1,err,</highlight><highlight class="stringliteral">&quot;[gfal_get_fullendpoint]<sp/>full<sp/>surl<sp/>must<sp/>contain<sp/>?SFN=<sp/>and<sp/>a<sp/>valid<sp/>prefix,<sp/>fatal<sp/>error&quot;</highlight><highlight class="normal">);<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>assertion<sp/>on<sp/>params</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size_t<sp/>need_size<sp/>=<sp/>p-<sp/>surl-len_prefix<sp/>+len_endpoint_prefix;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(s_buff<sp/>&gt;<sp/>need_size){</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(buff_endpoint,<sp/>GFAL_ENDPOINT_DEFAULT_PREFIX,<sp/>len_endpoint_prefix);<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>prefix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)mempcpy(buff_endpoint<sp/>+<sp/>len_endpoint_prefix,<sp/>surl+len_prefix,<sp/>p-<sp/>surl-len_prefix))=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>endpoint</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_set_error(err,<sp/>0,<sp/>ENOBUFS,<sp/></highlight><highlight class="stringliteral">&quot;[%s]<sp/>buffer<sp/>too<sp/>small&quot;</highlight><highlight class="normal">,<sp/>__func__);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="104"><highlight class="normal">}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>gfal_srm_proto<sp/>gfal_convert_proto_from_bdii(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>se_type_bdii){</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>gfal_srm_proto<sp/>resu;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>strcmp(se_type_bdii,</highlight><highlight class="stringliteral">&quot;srm_v1&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0){</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>resu<sp/>=<sp/>PROTO_SRM;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>strcmp(se_type_bdii,</highlight><highlight class="stringliteral">&quot;srm_v2&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0){</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>resu<sp/>=<sp/>PROTO_SRMv2;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>resu<sp/>=<sp/>PROTO_ERROR_UNKNOW;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>resu;</highlight></codeline>
<codeline lineno="121"><highlight class="normal">}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="gfal__common__srm__endpoint_8c_118f17508658a17b98000d81d5300306c" kindref="member">gfal_select_best_protocol_and_endpointG</ref>(gfal_srmv2_opt*<sp/>opts,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>tab_se_type,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>tab_endpoint,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>buff_endpoint,<sp/>size_t<sp/>s_buff,<sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>gfal_srm_proto*<sp/>srm_type,<sp/>GError**<sp/>err){</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_return_val_err_if_fail(opts<sp/>&amp;&amp;<sp/>buff_endpoint<sp/>&amp;&amp;<sp/>s_buff<sp/>&amp;&amp;<sp/>srm_type<sp/>&amp;&amp;<sp/>tab_se_type<sp/>&amp;&amp;<sp/>tab_endpoint,<sp/>-1,<sp/>err,<sp/></highlight><highlight class="stringliteral">&quot;[gfal_select_best_protocol_and_endpoint]<sp/>Invalid<sp/>value&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>pse<sp/>=tab_se_type;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>gfal_srm_proto*<sp/>p_pref<sp/>=<sp/>&amp;(opts-&gt;srm_proto_type);<sp/><sp/></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<sp/>*p_pref<sp/>!=<sp/>PROTO_ERROR_UNKNOW){</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(pse<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/><sp/>tab_endpoint<sp/>!=<sp/>NULL<sp/>){</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>*p_pref<sp/>==<sp/>gfal_convert_proto_from_bdii(*pse)<sp/>){<sp/></highlight><highlight class="comment">//<sp/>test<sp/>if<sp/>the<sp/>response<sp/>is<sp/>the<sp/>actual<sp/>preferred<sp/>response</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_strlcpy(buff_endpoint,<sp/>*tab_endpoint,<sp/>s_buff);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*srm_type<sp/>=<sp/>*p_pref;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tab_endpoint++;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pse++;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(p_pref<sp/>==<sp/>&amp;(opts-&gt;srm_proto_type))<sp/></highlight><highlight class="comment">//<sp/>switch<sp/>desired<sp/>proto<sp/>to<sp/>the<sp/>list<sp/>if<sp/>the<sp/>default<sp/>choice<sp/>is<sp/>not<sp/>in<sp/>the<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_pref=gfal_proto_list_prefG;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_pref++;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_set_error(err,0,<sp/>EINVAL,<sp/></highlight><highlight class="stringliteral">&quot;[gfal_select_best_protocol_and_endpoint]<sp/>cannot<sp/>obtain<sp/>a<sp/>valid<sp/>protocol<sp/>from<sp/>the<sp/>bdii<sp/>response,<sp/>fatal<sp/>error&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-2;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="150"><highlight class="normal">}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><ref refid="gfal__common__srm__endpoint_8c_1c986f73b04fffd801b49861414fd33b1" kindref="member">gfal_get_hostname_from_surlG</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>surl,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>buff_hostname,<sp/>size_t<sp/>s_buff,<sp/>GError**<sp/>err){</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>srm_prefix_len<sp/>=<sp/>strlen(GFAL_PREFIX_SRM);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>surl_len<sp/>=<sp/>strnlen(surl,GFAL_URL_MAX_LEN);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_return_val_err_if_fail(surl<sp/>&amp;&amp;<sp/><sp/>(srm_prefix_len<sp/>&lt;<sp/>surl_len)<sp/><sp/>&amp;&amp;<sp/>(surl_len<sp/>&lt;<sp/>GFAL_URL_MAX_LEN),-1,<sp/>err,<sp/></highlight><highlight class="stringliteral">&quot;[gfal_get_hostname_from_surl]<sp/>invalid<sp/>value<sp/>in<sp/>params&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>p;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((p<sp/>=<sp/>strchr(surl+srm_prefix_len,</highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">))<sp/>==NULL){</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_set_error(err,<sp/>0,<sp/>EINVAL,<sp/></highlight><highlight class="stringliteral">&quot;[%s]<sp/>url<sp/>invalid&quot;</highlight><highlight class="normal">,__func__);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(s_buff<sp/>&gt;<sp/>(p-surl-srm_prefix_len)){<sp/><sp/></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<sp/>mempcpy(buff_hostname,<sp/>surl+srm_prefix_len,<sp/>p-surl-srm_prefix_len))<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(*buff_hostname<sp/>==</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_set_error(err,<sp/>0,<sp/>EINVAL,<sp/></highlight><highlight class="stringliteral">&quot;[%s]<sp/>url<sp/>invalid&quot;</highlight><highlight class="normal">,__func__);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_set_error(err,<sp/>0,<sp/>ENOBUFS,<sp/></highlight><highlight class="stringliteral">&quot;[%s]<sp/>buffer<sp/>size<sp/>too<sp/>small&quot;</highlight><highlight class="normal">,__func__);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;<sp/></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="gfal__common__srm__endpoint_8c_18ce7110e994216e73c28b439829b1d21" kindref="member">gfal_get_endpoint_and_setype_from_bdiiG</ref>(gfal_srmv2_opt*<sp/>opts,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>surl,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>buff_endpoint,<sp/>size_t<sp/>s_buff,<sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>gfal_srm_proto*<sp/>srm_type,<sp/>GError**<sp/>err){</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_return_val_err_if_fail(opts<sp/>&amp;&amp;<sp/>buff_endpoint<sp/>&amp;&amp;<sp/>srm_type<sp/>&amp;&amp;<sp/>surl<sp/>&amp;&amp;<sp/>s_buff,<sp/>-1,<sp/>err,<sp/></highlight><highlight class="stringliteral">&quot;[gfal_get_endpoint_and_setype_from_bdiiG]<sp/>invalid<sp/>parameters&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>tab_endpoint=NULL;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>tab_se_type=NULL;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>hostname[GFAL_URL_MAX_LEN];</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret<sp/>=-1;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GError*<sp/>tmp_err=NULL;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(ret<sp/>=<sp/><ref refid="gfal__common__srm__endpoint_8c_1c986f73b04fffd801b49861414fd33b1" kindref="member">gfal_get_hostname_from_surlG</ref>(surl,<sp/>hostname,<sp/>GFAL_URL_MAX_LEN,<sp/>&amp;tmp_err))<sp/>==<sp/>0){<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>the<sp/>hostname</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(ret<sp/>=gfal_mds_get_se_types_and_endpoints(<sp/>hostname,<sp/><sp/>&amp;tab_se_type,<sp/>&amp;tab_endpoint,<sp/>&amp;tmp_err))<sp/>==<sp/>0){<sp/></highlight><highlight class="comment">//<sp/>questioning<sp/>the<sp/>bdii</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="gfal__common__srm__endpoint_8c_118f17508658a17b98000d81d5300306c" kindref="member">gfal_select_best_protocol_and_endpointG</ref>(opts,<sp/>tab_se_type,<sp/>tab_endpoint,<sp/>buff_endpoint,<sp/>GFAL_URL_MAX_LEN,<sp/>srm_type,<sp/>&amp;tmp_err);<sp/></highlight><highlight class="comment">//<sp/>map<sp/>the<sp/>response<sp/>if<sp/>correct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_strfreev(tab_endpoint);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_strfreev(tab_se_type);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(tmp_err)</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_propagate_prefixed_error(err,<sp/>tmp_err,<sp/></highlight><highlight class="stringliteral">&quot;[%s]&quot;</highlight><highlight class="normal">,<sp/>__func__);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="206"><highlight class="normal">}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/adevress/myworkspace/gfal/src/common/srm/gfal_common_srm_endpoint.c"/>
  </compounddef>
</doxygen>
