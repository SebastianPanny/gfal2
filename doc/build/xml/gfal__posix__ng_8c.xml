<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.4.7">
  <compounddef id="gfal__posix__ng_8c" kind="file">
    <compoundname>gfal_posix_ng.c</compoundname>
    <includes refid="gfal__constants_8h" local="yes">../common/gfal_constants.h</includes>
    <includes refid="gfal__posix__api_8h" local="yes">gfal_posix_api.h</includes>
    <includes refid="gfal__posix__internal_8h" local="yes">gfal_posix_internal.h</includes>
    <incdepgraph>
      <node id="2104">
        <label>sys/stat.h</label>
      </node>
      <node id="2114">
        <label>stdarg.h</label>
      </node>
      <node id="2098">
        <label>/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c</label>
        <link refid="gfal_posix_ng.c"/>
        <childnode refid="2099" relation="include">
        </childnode>
        <childnode refid="2100" relation="include">
        </childnode>
        <childnode refid="2108" relation="include">
        </childnode>
      </node>
      <node id="2105">
        <label>stdlib.h</label>
      </node>
      <node id="2118">
        <label>gfal_common_errverbose.h</label>
        <link refid="gfal__common__errverbose_8h"/>
        <childnode refid="2099" relation="include">
        </childnode>
        <childnode refid="2114" relation="include">
        </childnode>
        <childnode refid="2106" relation="include">
        </childnode>
        <childnode refid="2117" relation="include">
        </childnode>
        <childnode refid="2116" relation="include">
        </childnode>
        <childnode refid="2110" relation="include">
        </childnode>
      </node>
      <node id="2109">
        <label>../common/gfal_prototypes.h</label>
        <link refid="gfal__prototypes_8h-source"/>
        <childnode refid="2110" relation="include">
        </childnode>
      </node>
      <node id="2116">
        <label>errno.h</label>
      </node>
      <node id="2102">
        <label>fcntl.h</label>
      </node>
      <node id="2112">
        <label>gfal_srm_ifce_types.h</label>
      </node>
      <node id="2108">
        <label>gfal_posix_internal.h</label>
        <link refid="gfal__posix__internal_8h-source"/>
        <childnode refid="2109" relation="include">
        </childnode>
        <childnode refid="2111" relation="include">
        </childnode>
        <childnode refid="2118" relation="include">
        </childnode>
      </node>
      <node id="2115">
        <label>uuid/uuid.h</label>
      </node>
      <node id="2100">
        <label>gfal_posix_api.h</label>
        <link refid="gfal__posix__api_8h-source"/>
        <childnode refid="2101" relation="include">
        </childnode>
        <childnode refid="2102" relation="include">
        </childnode>
        <childnode refid="2103" relation="include">
        </childnode>
        <childnode refid="2104" relation="include">
        </childnode>
        <childnode refid="2105" relation="include">
        </childnode>
        <childnode refid="2106" relation="include">
        </childnode>
        <childnode refid="2107" relation="include">
        </childnode>
        <childnode refid="2099" relation="include">
        </childnode>
      </node>
      <node id="2101">
        <label>sys/types.h</label>
      </node>
      <node id="2117">
        <label>string.h</label>
      </node>
      <node id="2107">
        <label>unistd.h</label>
      </node>
      <node id="2110">
        <label>glib.h</label>
      </node>
      <node id="2113">
        <label>gfal_common_catalog.h</label>
        <link refid="gfal__common__catalog_8h"/>
        <childnode refid="2114" relation="include">
        </childnode>
        <childnode refid="2115" relation="include">
        </childnode>
        <childnode refid="2110" relation="include">
        </childnode>
        <childnode refid="2116" relation="include">
        </childnode>
        <childnode refid="2117" relation="include">
        </childnode>
        <childnode refid="2103" relation="include">
        </childnode>
        <childnode refid="2104" relation="include">
        </childnode>
        <childnode refid="2109" relation="include">
        </childnode>
        <childnode refid="2111" relation="include">
        </childnode>
      </node>
      <node id="2099">
        <label>../common/gfal_constants.h</label>
        <link refid="gfal__constants_8h-source"/>
      </node>
      <node id="2106">
        <label>stdio.h</label>
      </node>
      <node id="2111">
        <label>../common/gfal_types.h</label>
        <link refid="gfal__types_8h-source"/>
        <childnode refid="2107" relation="include">
        </childnode>
        <childnode refid="2110" relation="include">
        </childnode>
        <childnode refid="2101" relation="include">
        </childnode>
        <childnode refid="2103" relation="include">
        </childnode>
        <childnode refid="2104" relation="include">
        </childnode>
        <childnode refid="2112" relation="include">
        </childnode>
        <childnode refid="2099" relation="include">
        </childnode>
        <childnode refid="2109" relation="include">
        </childnode>
        <childnode refid="2113" relation="include">
        </childnode>
      </node>
      <node id="2103">
        <label>dirent.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__posix__group_1g33d6a4a93117a6c07405aa6ac0d42122" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gfal_access</definition>
        <argsstring>(const char *path, int amode)</argsstring>
        <name>gfal_access</name>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <param>
          <type>int</type>
          <declname>amode</declname>
        </param>
        <briefdescription>
<para>test access to the given file </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>path of the file to access, can be in supported protocols (lfn, srm, file, guid,..) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>amode</parametername>
</parameternamelist>
<parameterdescription>
<para>access mode to check (R_OK, W_OK, X_OK or F_OK) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This routine return 0 if the operation was successful, or -1 if error occured and errno is set, call <ref refid="gfal__posix__ng_8c_157ced6eae7afd2d0413988da02fe0373" kindref="member">gfal_posix_check_error()</ref>  to check it. <linebreak/>
<itemizedlist>
<listitem><para>ERRNO list : <linebreak/>
<itemizedlist>
<listitem><para>usual errors:<itemizedlist>
<listitem><para>ENOENT: The named file/directory does not exist.</para></listitem><listitem><para>EACCES: Search permission is denied on a component of the path prefix or specified access to the file itself is denied.</para></listitem><listitem><para>EFAULT: path is a NULL pointer.</para></listitem><listitem><para>ENOTDIR: A component of path prefix is not a directory.</para></listitem><listitem><para>ECOMM: Communication error</para></listitem><listitem><para>EPROTONOSUPPORT: Access method not supported.</para></listitem><listitem><para>EINVAL: path has an invalid syntax or amode is invalid. </para></listitem></itemizedlist>
</para></listitem></itemizedlist>
</para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" line="52" bodyfile="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" bodystart="52" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="group__posix__group_1geed11d6e570d3a22977d860c2b000285" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gfal_chmod</definition>
        <argsstring>(const char *path, mode_t mode)</argsstring>
        <name>gfal_chmod</name>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <param>
          <type>mode_t</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>change the right for a file or a folder </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>: path of the file or the folder, can be in all supported protocols (lfn, srm, file, guid,..) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>: right to configure </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>return 0 if success else -1 and errno is set, call <ref refid="gfal__posix__ng_8c_157ced6eae7afd2d0413988da02fe0373" kindref="member">gfal_posix_check_error()</ref>  to check it<itemizedlist>
<listitem><para>ERRNO list : <linebreak/>
<itemizedlist>
<listitem><para>usual errors:<itemizedlist>
<listitem><para>ENOENT: The named file/directory does not exist.</para></listitem><listitem><para>EACCES: Search permission is denied on a component of the path prefix or specified access to the file itself is denied.</para></listitem><listitem><para>EFAULT: path is a NULL pointer.</para></listitem><listitem><para>ENOTDIR: A component of path prefix is not a directory.</para></listitem><listitem><para>ECOMM: Communication error</para></listitem><listitem><para>EPROTONOSUPPORT: Access method not supported.</para></listitem><listitem><para>EINVAL: path has an invalid syntax or amode is invalid. </para></listitem></itemizedlist>
</para></listitem></itemizedlist>
</para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" line="71" bodyfile="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" bodystart="71" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="group__posix__group_1gc56b24046cef203517f30023a999bf1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gfal_rename</definition>
        <argsstring>(const char *oldpath, const char *newpath)</argsstring>
        <name>gfal_rename</name>
        <param>
          <type>const char *</type>
          <declname>oldpath</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>newpath</declname>
        </param>
        <briefdescription>
<para>change the name or location of a file oldpath and newpath need to be on the same catalog this functions work only with catalogs (lfc ) and local files </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>oldpath</parametername>
</parameternamelist>
<parameterdescription>
<para>: the old path of the file, can be in supported protocols but need to be in the same adress space than newpath </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>newpath</parametername>
</parameternamelist>
<parameterdescription>
<para>: the new path of the file, can be in supported protocols (lfn, srm, file, guid,..) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>: return 0 if success, else -1 and errno / <ref refid="gfal__posix__ng_8c_157ced6eae7afd2d0413988da02fe0373" kindref="member">gfal_posix_check_error()</ref> <itemizedlist>
<listitem><para>ERRNO list : <linebreak/>
<itemizedlist>
<listitem><para>ENOENT: The named file/directory does not exist.</para></listitem><listitem><para>EACCES: Write perimission is denied for newpath or oldpath, or, search permission is denied for one of the directories in the path prefix of oldpath or newpath, or oldpath is a directory and does not allow write permission (needed to update the .. entry)</para></listitem><listitem><para>EFAULT: oldpath or newpath is a NULL pointer</para></listitem><listitem><para>EISDIR: newpath is an existing directory but oldpath is not a directory</para></listitem><listitem><para>ENOTEMPTY or EEXIST : newpath is a nonempty directory, that is, contains entries other than &quot;.&quot; and &quot;..&quot;</para></listitem><listitem><para>ENOTDIR: A component of path prefix is not a directory</para></listitem><listitem><para>EXDEV oldpath and newpath are not on the same mounted file system</para></listitem><listitem><para>ECOMM: Communication error</para></listitem><listitem><para>EPROTONOSUPPORT: oldpath or newpath has a syntax error or the protocol speficied is not supported</para></listitem><listitem><para>EINVAL: oldpath or newpath has an invalid syntax </para></listitem></itemizedlist>
</para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" line="96" bodyfile="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" bodystart="96" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="group__posix__group_1g1d8c86d522d5dd26ee7ddcd9c6925964" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gfal_stat</definition>
        <argsstring>(const char *path, struct stat *buff)</argsstring>
        <name>gfal_stat</name>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <param>
          <type>struct stat *</type>
          <declname>buff</declname>
        </param>
        <briefdescription>
<para>informations about a file These functions return information about a file. No permissions are required on the file itself, but — in the case of stat() and lstat() — execute (search) permission is required on all of the directories in path that lead to the file. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>: path of the file, can be in supported protocols (lfn, srm, file, guid,..) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buff</parametername>
</parameternamelist>
<parameterdescription>
<para>: pointer to an allocated struct stat </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>return 0 if success else -1 and errno is set, call <ref refid="gfal__posix__ng_8c_157ced6eae7afd2d0413988da02fe0373" kindref="member">gfal_posix_check_error()</ref>  to check it</para></simplesect>
<itemizedlist>
<listitem><para>ERRNO list : <linebreak/>
<itemizedlist>
<listitem><para>usual errors:<itemizedlist>
<listitem><para>ENOENT: The named file/directory does not exist.</para></listitem><listitem><para>EACCES: Write perimission is denied for newpath or oldpath, or, search permission is denied for one of the directories in the path prefix of oldpath or newpath, or oldpath is a directory and does not allow write permission (needed to update the .. entry)</para></listitem><listitem><para>EFAULT: oldpath or newpath is a NULL pointer.</para></listitem><listitem><para>ENOTDIR: A component of path prefix is not a directory.</para></listitem><listitem><para>ECOMM: Communication error</para></listitem><listitem><para>EPROTONOSUPPORT: oldpath or newpath has a syntax error or the protocol speficied is not supported</para></listitem><listitem><para>EINVAL: oldpath or newpath has an invalid syntax . </para></listitem></itemizedlist>
</para></listitem></itemizedlist>
</para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" line="119" bodyfile="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" bodystart="119" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="group__posix__group_1g347f867802a33bc04fdfb769da857103" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gfal_lstat</definition>
        <argsstring>(const char *path, struct stat *buff)</argsstring>
        <name>gfal_lstat</name>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <param>
          <type>struct stat *</type>
          <declname>buff</declname>
        </param>
        <briefdescription>
<para>gfal_lstat is identical to <ref refid="group__posix__group_1g1d8c86d522d5dd26ee7ddcd9c6925964" kindref="member">gfal_stat</ref>  except for symbolic links. In this case, the link itself is statted and not followed. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" line="128" bodyfile="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" bodystart="128" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="gfal__posix__ng_8c_1412d6606fcf2f735747f278eab8af19a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gfal_mkdirp</definition>
        <argsstring>(const char *path, mode_t mode)</argsstring>
        <name>gfal_mkdirp</name>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <param>
          <type>mode_t</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>create a new directory creates a new directory with permission bits taken from mode. The default behavior of this command is recursive, like &quot;mkdir -p&quot;. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>: url of the directory, can be in supported protocols (lfn, srm, file, guid,..) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>: right of the directory ( depend of the implementation ) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>return 0 if success else -1 and errno is set call <ref refid="gfal__posix__ng_8c_157ced6eae7afd2d0413988da02fe0373" kindref="member">gfal_posix_check_error()</ref>  to check it<itemizedlist>
<listitem><para>ERRNO list : <linebreak/>
<itemizedlist>
<listitem><para>usual errors:<itemizedlist>
<listitem><para>ENOENT: The named file/directory does not exist.</para></listitem><listitem><para>EACCES: Write perimission is denied for newpath or oldpath, or, search permission is denied for one of the directories in the path prefix of oldpath or newpath, or oldpath is a directory and does not allow write permission (needed to update the .. entry)</para></listitem><listitem><para>EFAULT: oldpath or newpath is a NULL pointer</para></listitem><listitem><para>ENOTDIR: A component of path prefix is not a directory<itemizedlist>
<listitem><para>EEXIST: file already exist</para></listitem></itemizedlist>
</para></listitem><listitem><para>ECOMM: Communication error</para></listitem><listitem><para>EPROTONOSUPPORT: oldpath or newpath has a syntax error or the protocol speficied is not supported</para></listitem><listitem><para>EINVAL: oldpath or newpath has an invalid syntax . </para></listitem></itemizedlist>
</para></listitem></itemizedlist>
</para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" line="150" bodyfile="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" bodystart="150" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="group__posix__group_1g6f6affcf386900efc5443a9c97556a57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gfal_mkdir</definition>
        <argsstring>(const char *path, mode_t mode)</argsstring>
        <name>gfal_mkdir</name>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <param>
          <type>mode_t</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Wrapper to mkdir for comptibility, same behavior than <ref refid="gfal__posix__ng_8c_1412d6606fcf2f735747f278eab8af19a" kindref="member">gfal_mkdirp</ref>  ( but subject to change in order to follow POSIX mkdir in the futur ) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" line="157" bodyfile="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" bodystart="157" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="group__posix__group_1gcc4b6347640a722674c2d6df437490df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gfal_rmdir</definition>
        <argsstring>(const char *path)</argsstring>
        <name>gfal_rmdir</name>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>removes a directory if it is empty remove an existing directory, return error if the dir is not empty </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>specifies the directory name, can be in supported protocols (lfn, srm, file, guid,..) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>return 0 is success else -1 and errno is set call <ref refid="gfal__posix__ng_8c_157ced6eae7afd2d0413988da02fe0373" kindref="member">gfal_posix_check_error()</ref>  to check it<itemizedlist>
<listitem><para>ERRNO list : <linebreak/>
<itemizedlist>
<listitem><para>usual errors:<itemizedlist>
<listitem><para>ENOENT: The named file/directory does not exist.</para></listitem><listitem><para>EACCES: Write perimission is denied for path, or, search permission is denied for one of the directories in the path prefix of oldpath or newpath, or oldpath is a directory and does not allow write permission (needed to update the .. entry)</para></listitem><listitem><para>EFAULT: path is a NULL pointer.<itemizedlist>
<listitem><para>ENOTEMPTY : path is a nonempty directory, that is, contains entries other than &quot;.&quot; and &quot;..&quot;</para></listitem></itemizedlist>
</para></listitem><listitem><para>ENOTDIR: A component of path prefix is not a directory</para></listitem><listitem><para>ECOMM: Communication error</para></listitem><listitem><para>EPROTONOSUPPORT: path has a syntax error or the protocol speficied is not supported</para></listitem><listitem><para>EINVAL: path has an invalid syntax . </para></listitem></itemizedlist>
</para></listitem></itemizedlist>
</para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" line="180" bodyfile="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" bodystart="180" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="group__posix__group_1g004ad5efbd544da820823e597e57be92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DIR *</type>
        <definition>DIR* gfal_opendir</definition>
        <argsstring>(const char *name)</argsstring>
        <name>gfal_opendir</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>open a directory </para>        </briefdescription>
        <detaileddescription>
<para>opens a directory to be used in subsequent gfal_readdir operations the url supported are : local files, surls, catalog url ( lfc,...) <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>of the directory to open, can be in supported protocols (lfn, srm, file, guid,..) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>file descriptor DIR* if success else NULL if error and errno is set call <ref refid="gfal__posix__ng_8c_157ced6eae7afd2d0413988da02fe0373" kindref="member">gfal_posix_check_error()</ref>  to check it</para></simplesect>
<itemizedlist>
<listitem><para>ERRNO list : <linebreak/>
<itemizedlist>
<listitem><para>usual errors:<itemizedlist>
<listitem><para>ENOENT: The named file/directory does not exist.</para></listitem><listitem><para>EACCES: Write perimission is denied for path, or, search permission is denied for one of the directories in the path prefix of oldpath or newpath, or oldpath is a directory and does not allow write permission (needed to update the .. entry)</para></listitem><listitem><para>EFAULT: path is a NULL pointer.<itemizedlist>
<listitem><para>ENOTEMPTY : newpath is a nonempty directory, that is, contains entries other than &quot;.&quot; and &quot;..&quot;</para></listitem></itemizedlist>
</para></listitem><listitem><para>ENOTDIR: path or a component in path is not a directory<itemizedlist>
<listitem><para>EMFILE: too many file open by the process</para></listitem></itemizedlist>
</para></listitem><listitem><para>ECOMM: Communication error</para></listitem><listitem><para>EPROTONOSUPPORT: path has a syntax error or the protocol speficied is not supported</para></listitem><listitem><para>EINVAL: path has an invalid syntax . </para></listitem></itemizedlist>
</para></listitem></itemizedlist>
</para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" line="205" bodyfile="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" bodystart="205" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="group__posix__group_1g2a8ed205f7748d7817a18521268a1f2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>dirent *</type>
        <definition>struct dirent* gfal_readdir</definition>
        <argsstring>(DIR *d)</argsstring>
        <name>gfal_readdir</name>
        <param>
          <type>DIR *</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>read a directory </para>        </briefdescription>
        <detaileddescription>
<para>The readdir() function returns a pointer to a dirent structure representing the next directory entry in the directory stream pointed to by dirp. It returns NULL on reaching the end of the directory stream or if an error occurred. struct dirent { ino_t d_ino; // inode number off_t d_off; // offset to the next dirent unsigned short d_reclen; // length of this record unsigned char d_type; // type of file; not supported // by all file system types char d_name[256]; // filename };</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>file handle ( return by opendir ) to read </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pointer to struct dirent with file information or NULL if end of list or error, errno is set call <ref refid="gfal__posix__ng_8c_157ced6eae7afd2d0413988da02fe0373" kindref="member">gfal_posix_check_error()</ref>  to check it </para></simplesect>
<simplesect kind="warning"><para>struct dirents are allocated statically, do not use free() on them</para></simplesect>
<itemizedlist>
<listitem><para>ERRNO list : <linebreak/>
<itemizedlist>
<listitem><para>usual errors:<itemizedlist>
<listitem><para>EBADF : bad file descriptor<itemizedlist>
<listitem><para>ECOMM : Communication error </para></listitem></itemizedlist>
</para></listitem></itemizedlist>
</para></listitem></itemizedlist>
</para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" line="234" bodyfile="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" bodystart="234" bodyend="236"/>
      </memberdef>
      <memberdef kind="function" id="group__posix__group_1g1c97c21d23c919b2647f17bbc8b79db2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gfal_closedir</definition>
        <argsstring>(DIR *d)</argsstring>
        <name>gfal_closedir</name>
        <param>
          <type>DIR *</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>read a directory close the file descriptor of an opendir call </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>file handle ( return by opendir ) to close </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if success else negativevalue and errno is set ( ( gfal_posix_error_print() )</para></simplesect>
<itemizedlist>
<listitem><para>ERRNO list : <linebreak/>
<itemizedlist>
<listitem><para>EBADF: bad file descriptor</para></listitem><listitem><para>ECOMM: Communication error </para></listitem></itemizedlist>
</para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" line="251" bodyfile="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" bodystart="251" bodyend="253"/>
      </memberdef>
      <memberdef kind="function" id="group__posix__group_1g6a431a0bdd01baf8cadbdcaa98b1c622" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gfal_open</definition>
        <argsstring>(const char *path, int flag, mode_t mode)</argsstring>
        <name>gfal_open</name>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flag</declname>
        </param>
        <param>
          <type>mode_t</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>open a file opens a file according to the value of flags. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>: url of the filename to open. can be in supported protocols (lfn, srm, file, guid,..) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flag</parametername>
</parameternamelist>
<parameterdescription>
<para>: same flag supported value is built by OR’ing the bits defined in &lt;fcntl.h&gt; but one and only one of the first three flags below must be used O_RDONLY open for reading only O_WRONLY open for writing only O_RDWR open for reading and writing O_CREAT If the file exists already and O_EXCL is also set, gfal_open will fail O_LARGEFILE allows files whose sizes cannot be represented in 31 bits to be opened </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>is used only if the file is created. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>return the file descriptor or -1 if errno is set call <ref refid="gfal__posix__ng_8c_157ced6eae7afd2d0413988da02fe0373" kindref="member">gfal_posix_check_error()</ref>  to check it </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" line="268" bodyfile="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" bodystart="268" bodyend="270"/>
      </memberdef>
      <memberdef kind="function" id="group__posix__group_1g5fcdc6f3e7911787be049e20b6ab19b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gfal_creat</definition>
        <argsstring>(const char *filename, mode_t mode)</argsstring>
        <name>gfal_creat</name>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>mode_t</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>create a new file or truncate an existing one opens a file according to the value of flags. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>: url of the filename to create, can be in supported protocols (lfn, srm, file, guid,..) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>is used only if the file is created. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>return the file descriptor or -1 if errno is set call <ref refid="gfal__posix__ng_8c_157ced6eae7afd2d0413988da02fe0373" kindref="member">gfal_posix_check_error()</ref>  to check it </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" line="281" bodyfile="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" bodystart="281" bodyend="283"/>
      </memberdef>
      <memberdef kind="function" id="group__posix__group_1gbfe92147d0bf650be3e471747ef2096f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gfal_read</definition>
        <argsstring>(int fd, void *buff, size_t s_buff)</argsstring>
        <name>gfal_read</name>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>buff</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>s_buff</declname>
        </param>
        <briefdescription>
<para>read a file gfal_read reads up to size bytes from the file descriptor fd into the buffer pointed by buff </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fd</parametername>
</parameternamelist>
<parameterdescription>
<para>file descriptor </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buff</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer of the data to read </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s_buff</parametername>
</parameternamelist>
<parameterdescription>
<para>size of the data read in bytes </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>number of byte read or -1 if error, errno is set call <ref refid="gfal__posix__ng_8c_157ced6eae7afd2d0413988da02fe0373" kindref="member">gfal_posix_check_error()</ref>  to check it </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" line="293" bodyfile="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" bodystart="293" bodyend="295"/>
      </memberdef>
      <memberdef kind="function" id="group__posix__group_1g7237b84e87965301f5030058eca38333" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gfal_write</definition>
        <argsstring>(int fd, const void *buff, size_t s_buff)</argsstring>
        <name>gfal_write</name>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>buff</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>s_buff</declname>
        </param>
        <briefdescription>
<para>write a file gfal_write writes size bytes from the buffer pointed by buff to the file descriptor fd. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fd</parametername>
</parameternamelist>
<parameterdescription>
<para>file descriptor </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buff</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer of the data to write </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s_buff</parametername>
</parameternamelist>
<parameterdescription>
<para>size of the data write in bytes </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>number of byte write or -1 if error, errno is set call <ref refid="gfal__posix__ng_8c_157ced6eae7afd2d0413988da02fe0373" kindref="member">gfal_posix_check_error()</ref>  to check it </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" line="304" bodyfile="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" bodystart="304" bodyend="306"/>
      </memberdef>
      <memberdef kind="function" id="group__posix__group_1g83b88bd27def4c4e2fdfea3c5bbf88b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gfal_close</definition>
        <argsstring>(int fd)</argsstring>
        <name>gfal_close</name>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <briefdescription>
<para>close a file closes the file whose descriptor fd is the one returned by gfal_open. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fd</parametername>
</parameternamelist>
<parameterdescription>
<para>: descriptor or the file given by <ref refid="group__posix__group_1g6a431a0bdd01baf8cadbdcaa98b1c622" kindref="member">gfal_open</ref>  </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This routine returns 0 if the operation was successful or -1 if the operation failed. In the latter case, errno is set appropriately<itemizedlist>
<listitem><para>ERRNO list : <linebreak/>
<itemizedlist>
<listitem><para>usual errors:<itemizedlist>
<listitem><para>EBADF: fd is not a valid file descriptor</para></listitem><listitem><para>ECOMM: Communication error</para></listitem><listitem><para>EPROTONOSUPPORT: path has a syntax error or the protocol speficied is not supported </para></listitem></itemizedlist>
</para></listitem></itemizedlist>
</para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" line="319" bodyfile="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" bodystart="319" bodyend="321"/>
      </memberdef>
      <memberdef kind="function" id="gfal__posix__ng_8c_1c9b6944315e891beca5a56d15292658f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gfal_symlink</definition>
        <argsstring>(const char *oldpath, const char *newpath)</argsstring>
        <name>gfal_symlink</name>
        <param>
          <type>const char *</type>
          <declname>oldpath</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>newpath</declname>
        </param>
        <briefdescription>
<para>make a new name for a file symlink() creates a symbolic link named newpath which contains the string oldpath. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>newpath</parametername>
</parameternamelist>
<parameterdescription>
<para>: path of the link, can be in supported protocols but need to be in the same adress space than newpath </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oldpath</parametername>
</parameternamelist>
<parameterdescription>
<para>: path of the linked file, can be in supported protocols (lfn, srm, file, guid,..) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if success else -1. if failure, errno is set, you can call <ref refid="gfal__posix__ng_8c_157ced6eae7afd2d0413988da02fe0373" kindref="member">gfal_posix_check_error()</ref>  for a more complete description. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" line="330" bodyfile="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" bodystart="330" bodyend="332"/>
      </memberdef>
      <memberdef kind="function" id="group__posix__group_1g8ba4e1df5f2e6439641c56f245d5ce73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>off_t</type>
        <definition>off_t gfal_lseek</definition>
        <argsstring>(int fd, off_t offset, int whence)</argsstring>
        <name>gfal_lseek</name>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>off_t</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>int</type>
          <declname>whence</declname>
        </param>
        <briefdescription>
<para>set position in a file gfal_lseek positions/repositions to offset the file associated with the descriptor fd generated by a previous gfal_open. whence indicates how to interpret the offset value: </para>        </briefdescription>
        <detaileddescription>
<para>SEEK_SET The offset is set from beginning of file.</para><para>SEEK_CUR The offset is added to current position.</para><para>SEEK_END The offset is added to current file size. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fd</parametername>
</parameternamelist>
<parameterdescription>
<para>: file descriptor to lseek </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
<parametername>:</parametername>
</parameternamelist>
<parameterdescription>
<para>offset in byte </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>whence</parametername>
<parametername>:</parametername>
</parameternamelist>
<parameterdescription>
<para>flag </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This routine returns the actual offset from the beginning of the file if the operation was successful or -1 if the operation failed. In the latter case, errno is set appropriately, you can call <ref refid="gfal__posix__ng_8c_157ced6eae7afd2d0413988da02fe0373" kindref="member">gfal_posix_check_error()</ref>  for a more complete description. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" line="350" bodyfile="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" bodystart="350" bodyend="352"/>
      </memberdef>
      <memberdef kind="function" id="group__posix__group_1gc793467bb55cd10d991ee1023b321dae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ssize_t</type>
        <definition>ssize_t gfal_getxattr</definition>
        <argsstring>(const char *path, const char *name, void *value, size_t size)</argsstring>
        <name>gfal_getxattr</name>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>retrieve an extended attribute value gfal_getxattr retrieves an extended value from an url managed by gfal </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>: path of the file/dir, can be in supported protocols (lfn, srm, file, guid,..) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
<parametername>:</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the attribute to get </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
<parametername>:</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to buffer to get the value </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>: size of the buffer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>return the size of the data returned, or -1 if error. In the latter case, errno is set appropriately, you can call <ref refid="gfal__posix__ng_8c_157ced6eae7afd2d0413988da02fe0373" kindref="member">gfal_posix_check_error()</ref>  for a more complete description. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" line="366" bodyfile="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" bodystart="365" bodyend="368"/>
      </memberdef>
      <memberdef kind="function" id="group__posix__group_1g3a5bc0f156017008ab7fdb92cb6f9c80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ssize_t</type>
        <definition>ssize_t gfal_readlink</definition>
        <argsstring>(const char *path, char *buff, size_t buffsiz)</argsstring>
        <name>gfal_readlink</name>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>buff</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>buffsiz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" line="371" bodyfile="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" bodystart="371" bodyend="373"/>
      </memberdef>
      <memberdef kind="function" id="group__posix__group_1gdeb4c6cc47f507da3e3b498374e308fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gfal_unlink</definition>
        <argsstring>(const char *path)</argsstring>
        <name>gfal_unlink</name>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" line="375" bodyfile="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" bodystart="375" bodyend="377"/>
      </memberdef>
      <memberdef kind="function" id="group__posix__group_1gb3af1720532d8ad4798b08fa0868f4c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ssize_t</type>
        <definition>ssize_t gfal_listxattr</definition>
        <argsstring>(const char *path, char *list, size_t size)</argsstring>
        <name>gfal_listxattr</name>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>list</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>list all extended attributes gfal_listxattr list all extended atributes associated with a file </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>: path of the file/dir, can be in supported protocols (lfn, srm, file, guid,..) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>list</parametername>
<parametername>:</parametername>
</parameternamelist>
<parameterdescription>
<para>lsit of the attribute ina stirng format, separated by &apos;\0&apos;. the size is equal of of the return </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>: size of the buffer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>return the size of the data returned, or -1 if error. In the latter case, errno is set appropriately, you can call <ref refid="gfal__posix__ng_8c_157ced6eae7afd2d0413988da02fe0373" kindref="member">gfal_posix_check_error()</ref>  for a more complete description. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" line="389" bodyfile="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" bodystart="389" bodyend="391"/>
      </memberdef>
      <memberdef kind="function" id="group__posix__group_1g03fcc29bc5d79dc2f65010846b0db024" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gfal_posix_print_error</definition>
        <argsstring>()</argsstring>
        <name>gfal_posix_print_error</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Display the last string error reported by the gfal error system for the posix API Errors are printed on stderr </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" line="398" bodyfile="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" bodystart="398" bodyend="411"/>
      </memberdef>
      <memberdef kind="function" id="group__posix__group_1g85337290460234042db0adfd54514df9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gfal_posix_release_error</definition>
        <argsstring>()</argsstring>
        <name>gfal_posix_release_error</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Display and clear the last string error reported by the gfal error system for the posix API and similar to a <ref refid="group__posix__group_1g03fcc29bc5d79dc2f65010846b0db024" kindref="member">gfal_posix_print_error()</ref> and a <ref refid="group__posix__group_1ga8252652c1dc86d71ba37b401fb675f9" kindref="member">gfal_posix_clear_error()</ref> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" line="417" bodyfile="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" bodystart="417" bodyend="420"/>
      </memberdef>
      <memberdef kind="function" id="group__posix__group_1ga8252652c1dc86d71ba37b401fb675f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gfal_posix_clear_error</definition>
        <argsstring>()</argsstring>
        <name>gfal_posix_clear_error</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>clear the last error reported by a gfal posix function </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" line="428" bodyfile="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" bodystart="428" bodyend="431"/>
      </memberdef>
      <memberdef kind="function" id="group__posix__group_1gc6149b0b3c9c8af05789169a18832634" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gfal_posix_code_error</definition>
        <argsstring>()</argsstring>
        <name>gfal_posix_code_error</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>return the current error code registered or if not exist </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" line="437" bodyfile="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" bodystart="437" bodyend="441"/>
      </memberdef>
      <memberdef kind="function" id="gfal__posix__ng_8c_157ced6eae7afd2d0413988da02fe0373" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gfal_posix_check_error</definition>
        <argsstring>()</argsstring>
        <name>gfal_posix_check_error</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>check the current error, if no error report return 0 else return 1 and print the error on stderr <simplesect kind="warning"><para>this does not clear the error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" line="447" bodyfile="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" bodystart="447" bodyend="454"/>
      </memberdef>
      <memberdef kind="function" id="group__posix__group_1g2a9e2951c934dd1c3205a89c0d25ac29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* gfal_posix_strerror_r</definition>
        <argsstring>(char *buff_err, size_t s_err)</argsstring>
        <name>gfal_posix_strerror_r</name>
        <param>
          <type>char *</type>
          <declname>buff_err</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>s_err</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get the current error string </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" line="460" bodyfile="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" bodystart="460" bodyend="462"/>
      </memberdef>
      <memberdef kind="function" id="gfal__posix__ng_8c_1a3f35e131b2db4c3b742a29790e08bdf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gfal_set_nobdii</definition>
        <argsstring>(int value)</argsstring>
        <name>gfal_set_nobdii</name>
        <param>
          <type>int</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" line="468" bodyfile="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" bodystart="468" bodyend="470"/>
      </memberdef>
      <memberdef kind="function" id="gfal__posix__ng_8c_10d2a0557bdb571ccb85c6ab5c05ae56f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gfal_is_nobdii</definition>
        <argsstring>()</argsstring>
        <name>gfal_is_nobdii</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" line="472" bodyfile="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" bodystart="472" bodyend="474"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="gfal__posix__ng_8c_18d2039688b4b5c5523bd647e8b4fdcf6" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int nobdii</definition>
        <argsstring></argsstring>
        <name>nobdii</name>
        <initializer> 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" line="31" bodyfile="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" bodystart="31" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>new file for the posix interface </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Devresse Adrien </para></simplesect>
<simplesect kind="date"><para>09/05/2011 </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>Members<sp/>of<sp/>the<sp/>EGEE<sp/>Collaboration.<sp/>2004.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>See<sp/>http://www.eu-egee.org/partners/<sp/>for<sp/>details<sp/>on<sp/>the<sp/>copyright<sp/>holders.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="preprocessor">#include<sp/>&quot;../common/gfal_constants.h&quot;</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gfal_posix_api.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gfal_posix_internal.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nobdii<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__posix__group_1g33d6a4a93117a6c07405aa6ac0d42122" kindref="member">gfal_access</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*path,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>amode){</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gfal_posix_internal_access(path,<sp/>amode);<sp/></highlight></codeline>
<codeline lineno="54"><highlight class="normal">}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__posix__group_1geed11d6e570d3a22977d860c2b000285" kindref="member">gfal_chmod</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>path,<sp/>mode_t<sp/>mode){</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gfal_posix_internal_chmod(path,<sp/>mode);</highlight></codeline>
<codeline lineno="73"><highlight class="normal">}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__posix__group_1gc56b24046cef203517f30023a999bf1c" kindref="member">gfal_rename</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*oldpath,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*newpath){</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gfal_posix_internal_rename(oldpath,<sp/>newpath);</highlight></codeline>
<codeline lineno="98"><highlight class="normal">}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__posix__group_1g1d8c86d522d5dd26ee7ddcd9c6925964" kindref="member">gfal_stat</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>path,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>stat*<sp/>buff){</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="gfal__posix__stat_8c_1d0ea9a538a524c4b0216d306773b5b0f" kindref="member">gfal_posix_internal_stat</ref>(path,<sp/>buff);</highlight></codeline>
<codeline lineno="121"><highlight class="normal">}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__posix__group_1g347f867802a33bc04fdfb769da857103" kindref="member">gfal_lstat</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>path,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>stat*<sp/>buff){</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gfal_posix_internal_lstat(path,<sp/>buff);</highlight></codeline>
<codeline lineno="130"><highlight class="normal">}</highlight></codeline>
<codeline lineno="150"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="gfal__posix__ng_8c_1412d6606fcf2f735747f278eab8af19a" kindref="member">gfal_mkdirp</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>path,<sp/>mode_t<sp/>mode){</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><sp/><ref refid="gfal__posix__mkdir_8c_14389d46c4fffcc478b9f2f1312364184" kindref="member">gfal_posix_internal_mkdir</ref>(<sp/>path,<sp/>mode);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="153"><highlight class="normal">}</highlight></codeline>
<codeline lineno="157"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__posix__group_1g6f6affcf386900efc5443a9c97556a57" kindref="member">gfal_mkdir</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>path,<sp/>mode_t<sp/>mode){</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><sp/><ref refid="gfal__posix__ng_8c_1412d6606fcf2f735747f278eab8af19a" kindref="member">gfal_mkdirp</ref>(<sp/>path,<sp/>mode);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="160"><highlight class="normal">}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__posix__group_1gcc4b6347640a722674c2d6df437490df" kindref="member">gfal_rmdir</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>path){</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="gfal__posix__rmdir_8c_1bb2b0fb8b7cc5c2c1ef27a1dea280ca0" kindref="member">gfal_posix_internal_rmdir</ref>(path);</highlight></codeline>
<codeline lineno="182"><highlight class="normal">}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal">DIR*<sp/><ref refid="group__posix__group_1g004ad5efbd544da820823e597e57be92" kindref="member">gfal_opendir</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name){</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gfal_posix_internal_opendir(name);</highlight></codeline>
<codeline lineno="207"><highlight class="normal">}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="keyword">struct<sp/></highlight><highlight class="normal">dirent*<sp/><ref refid="group__posix__group_1g2a8ed205f7748d7817a18521268a1f2d" kindref="member">gfal_readdir</ref>(DIR*<sp/>d){</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="gfal__posix__readdir_8c_1e8c201ec9e7b66c815761bb6b460d6bf" kindref="member">gfal_posix_internal_readdir</ref>(d);<sp/><sp/></highlight></codeline>
<codeline lineno="236"><highlight class="normal">}</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__posix__group_1g1c97c21d23c919b2647f17bbc8b79db2" kindref="member">gfal_closedir</ref>(DIR*<sp/>d){</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gfal_posix_internal_closedir(d);</highlight></codeline>
<codeline lineno="253"><highlight class="normal">}</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__posix__group_1g6a431a0bdd01baf8cadbdcaa98b1c622" kindref="member">gfal_open</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>path,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flag,<sp/>mode_t<sp/>mode){</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="gfal__posix__open_8c_1ada7cd81ad685011082167f02d3c2149" kindref="member">gfal_posix_internal_open</ref>(path,<sp/>flag,<sp/>mode);</highlight></codeline>
<codeline lineno="270"><highlight class="normal">}</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__posix__group_1g5fcdc6f3e7911787be049e20b6ab19b8" kindref="member">gfal_creat</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*filename,<sp/>mode_t<sp/>mode){</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="group__posix__group_1g6a431a0bdd01baf8cadbdcaa98b1c622" kindref="member">gfal_open</ref><sp/>(filename,<sp/>O_WRONLY|O_CREAT|O_TRUNC,<sp/>mode));</highlight></codeline>
<codeline lineno="283"><highlight class="normal">}</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__posix__group_1gbfe92147d0bf650be3e471747ef2096f" kindref="member">gfal_read</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>buff,<sp/>size_t<sp/>s_buff){</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="gfal__posix__read_8c_11f42df17317461c2831cd270cde9819e" kindref="member">gfal_posix_internal_read</ref>(fd,<sp/>buff,<sp/>s_buff);</highlight></codeline>
<codeline lineno="295"><highlight class="normal">}</highlight></codeline>
<codeline lineno="304"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__posix__group_1g7237b84e87965301f5030058eca38333" kindref="member">gfal_write</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*buff,<sp/>size_t<sp/>s_buff){</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="gfal__posix__write_8c_1fccb68462e2f770a8691d2358f2b75b6" kindref="member">gfal_posix_internal_write</ref>(fd,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)<sp/>buff,<sp/>s_buff);</highlight></codeline>
<codeline lineno="306"><highlight class="normal">}</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__posix__group_1g83b88bd27def4c4e2fdfea3c5bbf88b4" kindref="member">gfal_close</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd){</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gfal_posix_internal_close(fd);</highlight></codeline>
<codeline lineno="321"><highlight class="normal">}</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="gfal__posix__ng_8c_1c9b6944315e891beca5a56d15292658f" kindref="member">gfal_symlink</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>oldpath,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>newpath){</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="gfal__posix__symlink_8c_1dc9e646bbdc504844fab47bdcb1699f0" kindref="member">gfal_posix_internal_symlink</ref>(oldpath,<sp/>newpath);</highlight></codeline>
<codeline lineno="332"><highlight class="normal">}</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal">off_t<sp/><ref refid="group__posix__group_1g8ba4e1df5f2e6439641c56f245d5ce73" kindref="member">gfal_lseek</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd,<sp/>off_t<sp/>offset,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>whence){</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="gfal__posix__lseek_8c_1dc5f1f6e23db605ce3687110e96e03be" kindref="member">gfal_posix_internal_lseek</ref>(fd,<sp/>offset,<sp/>whence);</highlight></codeline>
<codeline lineno="352"><highlight class="normal">}</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal">ssize_t<sp/><ref refid="group__posix__group_1gc793467bb55cd10d991ee1023b321dae" kindref="member">gfal_getxattr</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*path,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*value,<sp/>size_t<sp/>size){</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gfal_posix_internal_getxattr(path,name,<sp/>value,<sp/>size);</highlight></codeline>
<codeline lineno="368"><highlight class="normal">}</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal">ssize_t<sp/>gfal_readlink(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>path,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>buff,<sp/>size_t<sp/>buffsiz){</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="gfal__posix__readlink_8c_1eb0e2d14bb83951a480a411b9746dcb2" kindref="member">gfal_posix_internal_readlink</ref>(path,<sp/>buff,<sp/>buffsiz);</highlight></codeline>
<codeline lineno="373"><highlight class="normal">}</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>gfal_unlink(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>path){</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="gfal__posix__unlink_8c_17facf305283ec9fd77f0df1c99d8dfa8" kindref="member">gfal_posix_internal_unlink</ref>(path);</highlight></codeline>
<codeline lineno="377"><highlight class="normal">}</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal">ssize_t<sp/><ref refid="group__posix__group_1gb3af1720532d8ad4798b08fa0868f4c7" kindref="member">gfal_listxattr</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*path,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*list,<sp/>size_t<sp/>size){</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gfal_posix_internal_listxattr(path,<sp/>list,<sp/>size);</highlight></codeline>
<codeline lineno="391"><highlight class="normal">}</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__posix__group_1g03fcc29bc5d79dc2f65010846b0db024" kindref="member">gfal_posix_print_error</ref>(){</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gfal_handle<sp/>handle;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GError*<sp/>err=NULL;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((handle<sp/>=<sp/>gfal_posix_instance())<sp/>==<sp/>NULL){</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_printerr(</highlight><highlight class="stringliteral">&quot;[gfal]<sp/>Initialisation<sp/>error<sp/>gfal_posix_instance()<sp/>failure\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(err<sp/>=<sp/>*gfal_posix_get_last_error())<sp/>!=<sp/>NULL){</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_printerr(</highlight><highlight class="stringliteral">&quot;[gfal]%s<sp/>\n&quot;</highlight><highlight class="normal">,<sp/>err-&gt;message);</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(errno<sp/>!=0){</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>sterr<sp/>=<sp/>strerror(errno);</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_printerr(</highlight><highlight class="stringliteral">&quot;[gfal]<sp/>errno<sp/>reported<sp/>by<sp/>external<sp/>lib<sp/>:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>sterr);</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_printerr(</highlight><highlight class="stringliteral">&quot;[gfal]<sp/>No<sp/>gfal<sp/>error<sp/>reported\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="411"><highlight class="normal">}</highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__posix__group_1g85337290460234042db0adfd54514df9" kindref="member">gfal_posix_release_error</ref>(){</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__posix__group_1g03fcc29bc5d79dc2f65010846b0db024" kindref="member">gfal_posix_print_error</ref>();</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__posix__group_1ga8252652c1dc86d71ba37b401fb675f9" kindref="member">gfal_posix_clear_error</ref>();</highlight></codeline>
<codeline lineno="420"><highlight class="normal">}</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__posix__group_1ga8252652c1dc86d71ba37b401fb675f9" kindref="member">gfal_posix_clear_error</ref>(){</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_clear_error(<sp/>gfal_posix_get_last_error());</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errno<sp/>=0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="431"><highlight class="normal">}</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__posix__group_1gc6149b0b3c9c8af05789169a18832634" kindref="member">gfal_posix_code_error</ref>(){</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GError*<sp/>err=NULL;</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>((err<sp/>=<sp/>*gfal_posix_get_last_error())<sp/>!=<sp/>NULL)?<sp/>err-&gt;code<sp/>:0<sp/>;</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="441"><highlight class="normal">}</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="gfal__posix__ng_8c_157ced6eae7afd2d0413988da02fe0373" kindref="member">gfal_posix_check_error</ref>(){</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GError*<sp/>err=NULL;</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((err<sp/>=<sp/>*gfal_posix_get_last_error())<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_printerr(</highlight><highlight class="stringliteral">&quot;[gfal]%s\n&quot;</highlight><highlight class="normal">,<sp/>err-&gt;message);</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="454"><highlight class="normal">}</highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="group__posix__group_1g2a9e2951c934dd1c3205a89c0d25ac29" kindref="member">gfal_posix_strerror_r</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>buff_err,<sp/>size_t<sp/>s_err){</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<ref refid="gfal__common__errverbose_8c_14dec12f0df920db39c004776d7f04e6e" kindref="member">gfal_str_GError_r</ref>(gfal_posix_get_last_error(),<sp/>buff_err,<sp/>s_err);</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>gfal_set_nobdii<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value){</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/>nobdii<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="470"><highlight class="normal">}</highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>gfal_is_nobdii<sp/>(){</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(nobdii);</highlight></codeline>
<codeline lineno="474"><highlight class="normal">}</highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c"/>
  </compounddef>
</doxygen>
