<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.4.7">
  <compounddef id="gfal__posix__ng_8c" kind="file">
    <compoundname>gfal_posix_ng.c</compoundname>
    <includes refid="gfal__constants_8h" local="no">common/gfal_constants.h</includes>
    <includes refid="gfal__posix__api_8h" local="yes">gfal_posix_api.h</includes>
    <includes refid="gfal__posix__internal_8h" local="yes">gfal_posix_internal.h</includes>
    <incdepgraph>
      <node id="2391">
        <label>sys/stat.h</label>
      </node>
      <node id="2400">
        <label>gfal_common_plugin_interface.h</label>
        <link refid="gfal__common__plugin__interface_8h-source"/>
        <childnode refid="2397" relation="include">
        </childnode>
        <childnode refid="2396" relation="include">
        </childnode>
        <childnode refid="2398" relation="include">
        </childnode>
        <childnode refid="2386" relation="include">
        </childnode>
      </node>
      <node id="2402">
        <label>stdarg.h</label>
      </node>
      <node id="2399">
        <label>attr/xattr.h</label>
      </node>
      <node id="2385">
        <label>/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c</label>
        <link refid="gfal_posix_ng.c"/>
        <childnode refid="2386" relation="include">
        </childnode>
        <childnode refid="2387" relation="include">
        </childnode>
        <childnode refid="2395" relation="include">
        </childnode>
      </node>
      <node id="2392">
        <label>stdlib.h</label>
      </node>
      <node id="2401">
        <label>common/gfal_common_errverbose.h</label>
        <link refid="gfal__common__errverbose_8h"/>
        <childnode refid="2386" relation="include">
        </childnode>
        <childnode refid="2402" relation="include">
        </childnode>
        <childnode refid="2393" relation="include">
        </childnode>
        <childnode refid="2403" relation="include">
        </childnode>
        <childnode refid="2404" relation="include">
        </childnode>
        <childnode refid="2397" relation="include">
        </childnode>
      </node>
      <node id="2396">
        <label>../common/gfal_prototypes.h</label>
        <link refid="gfal__prototypes_8h-source"/>
        <childnode refid="2397" relation="include">
        </childnode>
      </node>
      <node id="2404">
        <label>errno.h</label>
      </node>
      <node id="2389">
        <label>fcntl.h</label>
      </node>
      <node id="2395">
        <label>gfal_posix_internal.h</label>
        <link refid="gfal__posix__internal_8h-source"/>
        <childnode refid="2396" relation="include">
        </childnode>
        <childnode refid="2398" relation="include">
        </childnode>
        <childnode refid="2401" relation="include">
        </childnode>
      </node>
      <node id="2387">
        <label>gfal_posix_api.h</label>
        <link refid="gfal__posix__api_8h-source"/>
        <childnode refid="2388" relation="include">
        </childnode>
        <childnode refid="2389" relation="include">
        </childnode>
        <childnode refid="2390" relation="include">
        </childnode>
        <childnode refid="2391" relation="include">
        </childnode>
        <childnode refid="2392" relation="include">
        </childnode>
        <childnode refid="2393" relation="include">
        </childnode>
        <childnode refid="2394" relation="include">
        </childnode>
        <childnode refid="2386" relation="include">
        </childnode>
      </node>
      <node id="2388">
        <label>sys/types.h</label>
      </node>
      <node id="2403">
        <label>string.h</label>
      </node>
      <node id="2394">
        <label>unistd.h</label>
      </node>
      <node id="2397">
        <label>glib.h</label>
      </node>
      <node id="2386">
        <label>common/gfal_constants.h</label>
        <link refid="gfal__constants_8h"/>
      </node>
      <node id="2393">
        <label>stdio.h</label>
      </node>
      <node id="2398">
        <label>../common/gfal_types.h</label>
        <link refid="gfal__types_8h-source"/>
        <childnode refid="2394" relation="include">
        </childnode>
        <childnode refid="2397" relation="include">
        </childnode>
        <childnode refid="2388" relation="include">
        </childnode>
        <childnode refid="2390" relation="include">
        </childnode>
        <childnode refid="2391" relation="include">
        </childnode>
        <childnode refid="2399" relation="include">
        </childnode>
        <childnode refid="2386" relation="include">
        </childnode>
        <childnode refid="2396" relation="include">
        </childnode>
        <childnode refid="2400" relation="include">
        </childnode>
      </node>
      <node id="2390">
        <label>dirent.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__posix__group_1g33d6a4a93117a6c07405aa6ac0d42122" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gfal_access</definition>
        <argsstring>(const char *path, int amode)</argsstring>
        <name>gfal_access</name>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <param>
          <type>int</type>
          <declname>amode</declname>
        </param>
        <briefdescription>
<para>test access to the given file </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>path of the file to access, can be in supported protocols (lfn, srm, file, guid,..) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>amode</parametername>
</parameternamelist>
<parameterdescription>
<para>access mode to check (R_OK, W_OK, X_OK or F_OK) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This routine return 0 if the operation was successful, or -1 if error occured and errno is set, call <ref refid="group__posix__group_1g57ced6eae7afd2d0413988da02fe0373" kindref="member">gfal_posix_check_error()</ref>  to check it. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" line="45" bodyfile="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" bodystart="45" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="group__posix__group_1geed11d6e570d3a22977d860c2b000285" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gfal_chmod</definition>
        <argsstring>(const char *path, mode_t mode)</argsstring>
        <name>gfal_chmod</name>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <param>
          <type>mode_t</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>change the right for a file or a folder </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>: path of the file or the folder, can be in all supported protocols (lfn, srm, file, guid,..) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>: right to configure </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>return 0 if success else -1 and errno is set, call <ref refid="group__posix__group_1g57ced6eae7afd2d0413988da02fe0373" kindref="member">gfal_posix_check_error()</ref>  to check it </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" line="56" bodyfile="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" bodystart="56" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="group__posix__group_1gc56b24046cef203517f30023a999bf1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gfal_rename</definition>
        <argsstring>(const char *oldpath, const char *newpath)</argsstring>
        <name>gfal_rename</name>
        <param>
          <type>const char *</type>
          <declname>oldpath</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>newpath</declname>
        </param>
        <briefdescription>
<para>change the name or location of a file oldpath and newpath need to be on the same plugin this functions work only with plugins (lfc ) and local files </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>oldpath</parametername>
</parameternamelist>
<parameterdescription>
<para>: the old path of the file, can be in supported protocols but need to be in the same adress space than newpath </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>newpath</parametername>
</parameternamelist>
<parameterdescription>
<para>: the new path of the file, can be in supported protocols (lfn, srm, file, guid,..) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>: return 0 if success, else -1 and errno / <ref refid="group__posix__group_1g57ced6eae7afd2d0413988da02fe0373" kindref="member">gfal_posix_check_error()</ref>  </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" line="70" bodyfile="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" bodystart="70" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="group__posix__group_1g1d8c86d522d5dd26ee7ddcd9c6925964" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gfal_stat</definition>
        <argsstring>(const char *path, struct stat *buff)</argsstring>
        <name>gfal_stat</name>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <param>
          <type>struct stat *</type>
          <declname>buff</declname>
        </param>
        <briefdescription>
<para>informations about a file These functions return information about a file. No permissions are required on the file itself, but — in the case of stat() and lstat() — execute (search) permission is required on all of the directories in path that lead to the file. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>: path of the file, can be in supported protocols (lfn, srm, file, guid,..) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buff</parametername>
</parameternamelist>
<parameterdescription>
<para>: pointer to an allocated struct stat </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>return 0 if success else -1 and errno is set, call <ref refid="group__posix__group_1g57ced6eae7afd2d0413988da02fe0373" kindref="member">gfal_posix_check_error()</ref>  to check it </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" line="83" bodyfile="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" bodystart="83" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="group__posix__group_1g347f867802a33bc04fdfb769da857103" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gfal_lstat</definition>
        <argsstring>(const char *path, struct stat *buff)</argsstring>
        <name>gfal_lstat</name>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <param>
          <type>struct stat *</type>
          <declname>buff</declname>
        </param>
        <briefdescription>
<para>gfal_lstat is identical to <ref refid="group__posix__group_1g1d8c86d522d5dd26ee7ddcd9c6925964" kindref="member">gfal_stat</ref>  except for symbolic links. In this case, the link itself is statted and not followed. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" line="92" bodyfile="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" bodystart="92" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="gfal__posix__ng_8c_1412d6606fcf2f735747f278eab8af19a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gfal_mkdirp</definition>
        <argsstring>(const char *path, mode_t mode)</argsstring>
        <name>gfal_mkdirp</name>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <param>
          <type>mode_t</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>create a new directory creates a new directory with permission bits taken from mode. The default behavior of this command is recursive, like &quot;mkdir -p&quot;. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>: url of the directory, can be in supported protocols (lfn, srm, file, guid,..) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>: right of the directory ( depend of the implementation ) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>return 0 if success else -1 and errno is set call <ref refid="group__posix__group_1g57ced6eae7afd2d0413988da02fe0373" kindref="member">gfal_posix_check_error()</ref>  to check it </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" line="104" bodyfile="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" bodystart="104" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="group__posix__group_1g6f6affcf386900efc5443a9c97556a57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gfal_mkdir</definition>
        <argsstring>(const char *path, mode_t mode)</argsstring>
        <name>gfal_mkdir</name>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <param>
          <type>mode_t</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Wrapper to mkdir for comptibility, same behavior than <ref refid="gfal__posix__ng_8c_1412d6606fcf2f735747f278eab8af19a" kindref="member">gfal_mkdirp</ref>  ( but subject to change in order to follow POSIX mkdir in the futur ) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" line="111" bodyfile="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" bodystart="111" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="group__posix__group_1gcc4b6347640a722674c2d6df437490df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gfal_rmdir</definition>
        <argsstring>(const char *path)</argsstring>
        <name>gfal_rmdir</name>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>removes a directory if it is empty remove an existing directory, return error if the dir is not empty </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>specifies the directory name, can be in supported protocols (lfn, srm, file, guid,..) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>return 0 is success else -1 and errno is set call <ref refid="group__posix__group_1g57ced6eae7afd2d0413988da02fe0373" kindref="member">gfal_posix_check_error()</ref>  to check it </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" line="123" bodyfile="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" bodystart="123" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="group__posix__group_1g004ad5efbd544da820823e597e57be92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DIR *</type>
        <definition>DIR* gfal_opendir</definition>
        <argsstring>(const char *name)</argsstring>
        <name>gfal_opendir</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>open a directory </para>        </briefdescription>
        <detaileddescription>
<para>opens a directory to be used in subsequent gfal_readdir operations the url supported are : local files, surls, plugin url ( lfc,...) <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>of the directory to open, can be in supported protocols (lfn, srm, file, guid,..) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>file descriptor DIR* if success else NULL if error and errno is set call <ref refid="group__posix__group_1g57ced6eae7afd2d0413988da02fe0373" kindref="member">gfal_posix_check_error()</ref>  to check it </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" line="136" bodyfile="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" bodystart="136" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="group__posix__group_1g2a8ed205f7748d7817a18521268a1f2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>dirent *</type>
        <definition>struct dirent* gfal_readdir</definition>
        <argsstring>(DIR *d)</argsstring>
        <name>gfal_readdir</name>
        <param>
          <type>DIR *</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>read a directory similar to the POSIX call readdir The readdir() function returns a pointer to a dirent structure representing the next directory entry in the directory stream pointed to by dirp. It returns NULL on reaching the end of the directory stream or if an error occurred. struct dirent { ino_t d_ino; // inode number off_t d_off; // offset to the next dirent unsigned short d_reclen; // length of this record unsigned char d_type; // type of file; not supported // by all file system types char d_name[256]; // filename }; </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>file handle ( return by opendir ) to read </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pointer to struct dirent with file information or NULL if end of list or error, errno is set call <ref refid="group__posix__group_1g57ced6eae7afd2d0413988da02fe0373" kindref="member">gfal_posix_check_error()</ref>  to check it </para></simplesect>
<simplesect kind="warning"><para>struct dirents are allocated statically, do not use free() on them </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" line="161" bodyfile="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" bodystart="161" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="group__posix__group_1g1c97c21d23c919b2647f17bbc8b79db2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gfal_closedir</definition>
        <argsstring>(DIR *d)</argsstring>
        <name>gfal_closedir</name>
        <param>
          <type>DIR *</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>close a file descriptor of a directory similar to the POSIX call closedir close the file descriptor of an opendir call </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>file handle ( return by opendir ) to close </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if success else negativevalue and errno is set ( ( gfal_posix_error_print() ) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" line="176" bodyfile="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" bodystart="176" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="group__posix__group_1gedd0cf1c9158d27dd3a9c4413ca04cfa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gfal_open</definition>
        <argsstring>(const char *path, int flag,...)</argsstring>
        <name>gfal_open</name>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flag</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>open a file similar to the POSIX call open opens a file according to the value of flags. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>: url of the filename to open. can be in supported protocols (lfn, srm, file, guid,..) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flag</parametername>
</parameternamelist>
<parameterdescription>
<para>: same flag supported value is built by OR’ing the bits defined in &lt;fcntl.h&gt; but one and only one of the first three flags below must be used O_RDONLY open for reading only O_WRONLY open for writing only O_RDWR open for reading and writing O_CREAT If the file exists already and O_EXCL is also set, gfal_open will fail O_LARGEFILE allows files whose sizes cannot be represented in 31 bits to be opened </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>is used only if the file is created. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>return the file descriptor or -1 if errno is set call <ref refid="group__posix__group_1g57ced6eae7afd2d0413988da02fe0373" kindref="member">gfal_posix_check_error()</ref>  to check it </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" line="194" bodyfile="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" bodystart="194" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="group__posix__group_1g5fcdc6f3e7911787be049e20b6ab19b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gfal_creat</definition>
        <argsstring>(const char *filename, mode_t mode)</argsstring>
        <name>gfal_creat</name>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>mode_t</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>create a new file or truncate an existing one similar to the POSIX call creat opens a file according to the value of flags. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>: url of the filename to create, can be in supported protocols (lfn, srm, file, guid,..) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>: is used only if the file is created. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>return the file descriptor or -1 if errno is set call <ref refid="group__posix__group_1g57ced6eae7afd2d0413988da02fe0373" kindref="member">gfal_posix_check_error()</ref>  to check it </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" line="213" bodyfile="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" bodystart="213" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="group__posix__group_1gbfe92147d0bf650be3e471747ef2096f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gfal_read</definition>
        <argsstring>(int fd, void *buff, size_t s_buff)</argsstring>
        <name>gfal_read</name>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>buff</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>s_buff</declname>
        </param>
        <briefdescription>
<para>read a file similar to the POSIX call read gfal_read reads up to size bytes from the file descriptor fd into the buffer pointed by buff </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fd</parametername>
</parameternamelist>
<parameterdescription>
<para>file descriptor </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buff</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer of the data to read </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s_buff</parametername>
</parameternamelist>
<parameterdescription>
<para>size of the data read in bytes </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>number of byte read or -1 if error, errno is set call <ref refid="group__posix__group_1g57ced6eae7afd2d0413988da02fe0373" kindref="member">gfal_posix_check_error()</ref>  to check it </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" line="226" bodyfile="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" bodystart="226" bodyend="228"/>
      </memberdef>
      <memberdef kind="function" id="group__posix__group_1g7237b84e87965301f5030058eca38333" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gfal_write</definition>
        <argsstring>(int fd, const void *buff, size_t s_buff)</argsstring>
        <name>gfal_write</name>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>buff</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>s_buff</declname>
        </param>
        <briefdescription>
<para>write a file similar to the POSIX call write gfal_write writes size bytes from the buffer pointed by buff to the file descriptor fd. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fd</parametername>
</parameternamelist>
<parameterdescription>
<para>file descriptor </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buff</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer of the data to write </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s_buff</parametername>
</parameternamelist>
<parameterdescription>
<para>size of the data write in bytes </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>number of byte write or -1 if error, errno is set call <ref refid="group__posix__group_1g57ced6eae7afd2d0413988da02fe0373" kindref="member">gfal_posix_check_error()</ref>  to check it </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" line="238" bodyfile="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" bodystart="238" bodyend="240"/>
      </memberdef>
      <memberdef kind="function" id="group__posix__group_1g83b88bd27def4c4e2fdfea3c5bbf88b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gfal_close</definition>
        <argsstring>(int fd)</argsstring>
        <name>gfal_close</name>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <briefdescription>
<para>close a file similar to the POSIX call close closes the file whose descriptor fd is the one returned by gfal_open. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fd</parametername>
</parameternamelist>
<parameterdescription>
<para>: descriptor or the file given by <ref refid="group__posix__group_1gedd0cf1c9158d27dd3a9c4413ca04cfa" kindref="member">gfal_open</ref>  </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This routine returns 0 if the operation was successful or -1 if the operation failed. In the latter case, errno is set appropriately </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" line="250" bodyfile="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" bodystart="250" bodyend="252"/>
      </memberdef>
      <memberdef kind="function" id="group__posix__group_1gc9b6944315e891beca5a56d15292658f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gfal_symlink</definition>
        <argsstring>(const char *oldpath, const char *newpath)</argsstring>
        <name>gfal_symlink</name>
        <param>
          <type>const char *</type>
          <declname>oldpath</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>newpath</declname>
        </param>
        <briefdescription>
<para>make a new name for a file </para>        </briefdescription>
        <detaileddescription>
<para>similar to the POSIX call symlink . symlink() creates a symbolic link named newpath which contains the string oldpath. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>newpath</parametername>
</parameternamelist>
<parameterdescription>
<para>: path of the link, can be in supported protocols but need to be in the same adress space than newpath </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oldpath</parametername>
</parameternamelist>
<parameterdescription>
<para>: path of the linked file, can be in supported protocols (lfn, srm, file, guid,..) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if success else -1. if failure, errno is set, you can call <ref refid="group__posix__group_1g57ced6eae7afd2d0413988da02fe0373" kindref="member">gfal_posix_check_error()</ref>  for a more complete description. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" line="263" bodyfile="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" bodystart="263" bodyend="265"/>
      </memberdef>
      <memberdef kind="function" id="group__posix__group_1g8ba4e1df5f2e6439641c56f245d5ce73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>off_t</type>
        <definition>off_t gfal_lseek</definition>
        <argsstring>(int fd, off_t offset, int whence)</argsstring>
        <name>gfal_lseek</name>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>off_t</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>int</type>
          <declname>whence</declname>
        </param>
        <briefdescription>
<para>set position in a file </para>        </briefdescription>
        <detaileddescription>
<para>similar to the POSIX call lseek gfal_lseek positions/repositions to offset the file associated with the descriptor fd generated by a previous gfal_open. whence indicates how to interpret the offset value:</para><para>SEEK_SET The offset is set from beginning of file.</para><para>SEEK_CUR The offset is added to current position.</para><para>SEEK_END The offset is added to current file size. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fd</parametername>
</parameternamelist>
<parameterdescription>
<para>: file descriptor to lseek </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
<parametername>:</parametername>
</parameternamelist>
<parameterdescription>
<para>offset in byte </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>whence</parametername>
<parametername>:</parametername>
</parameternamelist>
<parameterdescription>
<para>flag </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This routine returns the actual offset from the beginning of the file if the operation was successful or -1 if the operation failed. In the latter case, errno is set appropriately, you can call <ref refid="group__posix__group_1g57ced6eae7afd2d0413988da02fe0373" kindref="member">gfal_posix_check_error()</ref>  for a more complete description. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" line="285" bodyfile="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" bodystart="285" bodyend="287"/>
      </memberdef>
      <memberdef kind="function" id="group__posix__group_1gc793467bb55cd10d991ee1023b321dae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ssize_t</type>
        <definition>ssize_t gfal_getxattr</definition>
        <argsstring>(const char *path, const char *name, void *value, size_t size)</argsstring>
        <name>gfal_getxattr</name>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>retrieve an extended attribute value </para>        </briefdescription>
        <detaileddescription>
<para>similar to the getxattr call of the libattr gfal_getxattr retrieves an extended value for an url in a supported protocol. The extended attributes are use for the advanced file operations ( like set/get replicas, grid status, comments, etc... ) <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>: path of the file/dir, can be in supported protocols (lfn, srm, file, guid,..) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
<parametername>:</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the attribute to get </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
<parametername>:</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to buffer to get the value </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>: size of the buffer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>return the size of the data returned, or -1 if error. In this case, errno is set and you can call <ref refid="group__posix__group_1g57ced6eae7afd2d0413988da02fe0373" kindref="member">gfal_posix_check_error()</ref>  for a more complete description. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" line="303" bodyfile="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" bodystart="302" bodyend="305"/>
      </memberdef>
      <memberdef kind="function" id="group__posix__group_1g3a5bc0f156017008ab7fdb92cb6f9c80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ssize_t</type>
        <definition>ssize_t gfal_readlink</definition>
        <argsstring>(const char *path, char *buff, size_t buffsiz)</argsstring>
        <name>gfal_readlink</name>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>buff</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>buffsiz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" line="308" bodyfile="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" bodystart="308" bodyend="310"/>
      </memberdef>
      <memberdef kind="function" id="group__posix__group_1gdeb4c6cc47f507da3e3b498374e308fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gfal_unlink</definition>
        <argsstring>(const char *path)</argsstring>
        <name>gfal_unlink</name>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>delete a name and possibly the file it refers to </para>        </briefdescription>
        <detaileddescription>
<para>similar to the POSIX call unlink <ref refid="group__posix__group_1gdeb4c6cc47f507da3e3b498374e308fb" kindref="member">gfal_unlink()</ref> deletes a name from the file system. If that name was the last link to a file and no processes have the file open the file is deleted and the space it was using is made avail‐ able for reuse.</para><para>If the name was the last link to a file but any processes still have the file open the file will remain in existence until the last file descriptor referring to it is closed.</para><para>If the name referred to a symbolic link the link is removed.</para><para>If the name referred to a socket, fifo or device the name for it is removed but processes which have the object open may continue to use it. <simplesect kind="return"><para>On success, zero is returned. On error, -1 is returned, and errno is set appropriately and you can call <ref refid="group__posix__group_1g57ced6eae7afd2d0413988da02fe0373" kindref="member">gfal_posix_check_error()</ref>  for a more complete description. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" line="327" bodyfile="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" bodystart="327" bodyend="329"/>
      </memberdef>
      <memberdef kind="function" id="group__posix__group_1gb3af1720532d8ad4798b08fa0868f4c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ssize_t</type>
        <definition>ssize_t gfal_listxattr</definition>
        <argsstring>(const char *path, char *list, size_t size)</argsstring>
        <name>gfal_listxattr</name>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>list</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>list all extended attributes </para>        </briefdescription>
        <detaileddescription>
<para>similar to listxattr standard call of libattr gfal_listxattr list all extended atributes associated with a file The extended attributes are use for the advanced file operations ( like set/get replicas, grid status, comments, etc... )</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>: path of the file/dir, can be in a supported protocol (lfn, srm, file, guid,..) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>list</parametername>
<parametername>:</parametername>
</parameternamelist>
<parameterdescription>
<para>a list of the attribute in a string format, on after each other, separated by &apos;\0&apos;. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>: size of the buffer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>return the size of the data in list , or -1 if error. In this case, errno is set and you can call <ref refid="group__posix__group_1g57ced6eae7afd2d0413988da02fe0373" kindref="member">gfal_posix_check_error()</ref>  for a more complete description. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" line="344" bodyfile="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" bodystart="344" bodyend="346"/>
      </memberdef>
      <memberdef kind="function" id="group__posix__group_1g79d4f4e15b5915fe7f09b57cf09491c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gfal_setxattr</definition>
        <argsstring>(const char *path, const char *name, const void *value, size_t size, int flags)</argsstring>
        <name>gfal_setxattr</name>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>set an extended attribute to a given value similar to the setxattr standard call of libattr </para>        </briefdescription>
        <detaileddescription>
<para>the effect of this call can be specific to the plugin used. ( ex : guid are read only)</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>: path of the file </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>: key of the extended atribute to set </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>: value to set, must be at least of the size size </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>: size of the attriute to set </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>: flags similar to the setxattr call, can be ignored by some plugins/call </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if success else or -1 if error. In this case, errno is set and you can call <ref refid="group__posix__group_1g57ced6eae7afd2d0413988da02fe0373" kindref="member">gfal_posix_check_error()</ref>  for a more complete description. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" line="363" bodyfile="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" bodystart="362" bodyend="365"/>
      </memberdef>
      <memberdef kind="function" id="group__posix__group_1g8ea3cb3121985599bd7453f28891748a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gfal_removexattr</definition>
        <argsstring>(const char *path, const char *name)</argsstring>
        <name>gfal_removexattr</name>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>removes the extended attribute identified by name and associated with the given path in the filesystem similar to the removexattr standard call of libattr </para>        </briefdescription>
        <detaileddescription>
<para>the effect of this call can be specific to the plugin used. ( ex : guid are read only)</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>: path of the file </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>: key of the extended to remove </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if success or -1 if error. In this case, errno is set and you can call <ref refid="group__posix__group_1g57ced6eae7afd2d0413988da02fe0373" kindref="member">gfal_posix_check_error()</ref>  for a more complete description. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" line="378" bodyfile="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" bodystart="378" bodyend="380"/>
      </memberdef>
      <memberdef kind="function" id="group__posix__group_1g03fcc29bc5d79dc2f65010846b0db024" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gfal_posix_print_error</definition>
        <argsstring>()</argsstring>
        <name>gfal_posix_print_error</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>print the last string error reported by the gfal error system for the posix API but DO NOT delete it Errors are printed on stderr </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" line="387" bodyfile="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" bodystart="387" bodyend="400"/>
      </memberdef>
      <memberdef kind="function" id="group__posix__group_1gae43f250cf82271ee59b19d008b29ad8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gfal_flush</definition>
        <argsstring>(int fd)</argsstring>
        <name>gfal_flush</name>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" line="406" bodyfile="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" bodystart="406" bodyend="408"/>
      </memberdef>
      <memberdef kind="function" id="group__posix__group_1g85337290460234042db0adfd54514df9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gfal_posix_release_error</definition>
        <argsstring>()</argsstring>
        <name>gfal_posix_release_error</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Display and clear the last string error reported by the gfal error system for the posix API equivalent to a <ref refid="group__posix__group_1g03fcc29bc5d79dc2f65010846b0db024" kindref="member">gfal_posix_print_error()</ref> and a <ref refid="group__posix__group_1ga8252652c1dc86d71ba37b401fb675f9" kindref="member">gfal_posix_clear_error()</ref> call </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" line="414" bodyfile="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" bodystart="414" bodyend="417"/>
      </memberdef>
      <memberdef kind="function" id="group__posix__group_1g1e2e8a22bfc4927e4d4ca91d501633a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gfal_set_parameter_string</definition>
        <argsstring>(const char *namespace, const char *key, const char *value)</argsstring>
        <name>gfal_set_parameter_string</name>
        <param>
          <type>const char *</type>
          <declname>namespace</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" line="430" bodyfile="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" bodystart="430" bodyend="432"/>
      </memberdef>
      <memberdef kind="function" id="group__posix__group_1g9cddf85bdb0e56b21c8bc57583ecd5fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* gfal_get_parameter_string</definition>
        <argsstring>(const char *namespace, const char *key)</argsstring>
        <name>gfal_get_parameter_string</name>
        <param>
          <type>const char *</type>
          <declname>namespace</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" line="445" bodyfile="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" bodystart="445" bodyend="447"/>
      </memberdef>
      <memberdef kind="function" id="group__posix__group_1gb2f2e3e4ce52a9b4e306a8af2ce1642b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gfal_set_parameter_int</definition>
        <argsstring>(const char *module, const char *name, int value)</argsstring>
        <name>gfal_set_parameter_int</name>
        <param>
          <type>const char *</type>
          <declname>module</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" line="462" bodyfile="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" bodystart="462" bodyend="464"/>
      </memberdef>
      <memberdef kind="function" id="group__posix__group_1g87fe88667990c1c3b288e62d708831ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gfal_get_parameter_int</definition>
        <argsstring>(const char *module, const char *name)</argsstring>
        <name>gfal_get_parameter_int</name>
        <param>
          <type>const char *</type>
          <declname>module</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" line="478" bodyfile="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" bodystart="478" bodyend="480"/>
      </memberdef>
      <memberdef kind="function" id="group__posix__group_1g1566e98417764b361a733c55ea4d5c2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gfal_set_parameter_boolean</definition>
        <argsstring>(const char *namespace, const char *key, int value)</argsstring>
        <name>gfal_set_parameter_boolean</name>
        <param>
          <type>const char *</type>
          <declname>namespace</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>int</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" line="493" bodyfile="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" bodystart="493" bodyend="495"/>
      </memberdef>
      <memberdef kind="function" id="group__posix__group_1g2b30e8c9e59dada006127568d016cd1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gfal_get_parameter_boolean</definition>
        <argsstring>(const char *namespace, const char *key)</argsstring>
        <name>gfal_get_parameter_boolean</name>
        <param>
          <type>const char *</type>
          <declname>namespace</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" line="508" bodyfile="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" bodystart="508" bodyend="510"/>
      </memberdef>
      <memberdef kind="function" id="group__posix__group_1ga8252652c1dc86d71ba37b401fb675f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gfal_posix_clear_error</definition>
        <argsstring>()</argsstring>
        <name>gfal_posix_clear_error</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>clear the last error reported by a gfal posix function </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" line="517" bodyfile="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" bodystart="517" bodyend="520"/>
      </memberdef>
      <memberdef kind="function" id="group__posix__group_1gc6149b0b3c9c8af05789169a18832634" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gfal_posix_code_error</definition>
        <argsstring>()</argsstring>
        <name>gfal_posix_code_error</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>return the last error code ( ERRNO-style ) most of the error code are ERRNO codes. <simplesect kind="return"><para>last error code reported or 0 if nothing. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" line="528" bodyfile="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" bodystart="528" bodyend="532"/>
      </memberdef>
      <memberdef kind="function" id="group__posix__group_1g57ced6eae7afd2d0413988da02fe0373" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gfal_posix_check_error</definition>
        <argsstring>()</argsstring>
        <name>gfal_posix_check_error</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>check the last Error, if no error report return 0 else return 1 and print the error on stderr <simplesect kind="warning"><para>this does not clear the error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" line="538" bodyfile="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" bodystart="538" bodyend="545"/>
      </memberdef>
      <memberdef kind="function" id="group__posix__group_1g2a9e2951c934dd1c3205a89c0d25ac29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* gfal_posix_strerror_r</definition>
        <argsstring>(char *buff_err, size_t s_err)</argsstring>
        <name>gfal_posix_strerror_r</name>
        <param>
          <type>char *</type>
          <declname>buff_err</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>s_err</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the last Error in a string format <simplesect kind="return"><para>return a pointer to the string buffer passed. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" line="551" bodyfile="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" bodystart="551" bodyend="553"/>
      </memberdef>
      <memberdef kind="function" id="group__posix__group_1gb1918905381341a2dd35916d86d43449" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ssize_t</type>
        <definition>ssize_t gfal_pread</definition>
        <argsstring>(int fd, void *buffer, size_t count, off_t offset)</argsstring>
        <name>gfal_pread</name>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>off_t</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>pipelined call for read call, support parallels access similar to system call pread <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fd</parametername>
</parameternamelist>
<parameterdescription>
<para>: file descriptor </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>: buffer with the data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s_buff</parametername>
</parameternamelist>
<parameterdescription>
<para>: maximum size of the buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>: offset in bytes </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>return the number of bytes read, 0 means end of the file, and you can call <ref refid="group__posix__group_1g57ced6eae7afd2d0413988da02fe0373" kindref="member">gfal_posix_check_error()</ref>  for a more complete description </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" line="566" bodyfile="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" bodystart="566" bodyend="568"/>
      </memberdef>
      <memberdef kind="function" id="group__posix__group_1g2de061fcdbdec58660d5917a90772d6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ssize_t</type>
        <definition>ssize_t gfal_pwrite</definition>
        <argsstring>(int fd, const void *buffer, size_t count, off_t offset)</argsstring>
        <name>gfal_pwrite</name>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>off_t</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>pipelined write for write call, support parallels access similar to system call pwrite <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fd</parametername>
</parameternamelist>
<parameterdescription>
<para>: file descriptor </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>: buffer with the data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s_buff</parametername>
</parameternamelist>
<parameterdescription>
<para>: maximum size of the buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>: offset in bytes </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>return the number of bytes write, 0 means end of the file, and you can call <ref refid="group__posix__group_1g57ced6eae7afd2d0413988da02fe0373" kindref="member">gfal_posix_check_error()</ref>  for a more complete description </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" line="582" bodyfile="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" bodystart="582" bodyend="584"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>new file for the posix interface </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Devresse Adrien </para></simplesect>
<simplesect kind="date"><para>09/05/2011 </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>Members<sp/>of<sp/>the<sp/>EGEE<sp/>Collaboration.<sp/>2004.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>See<sp/>http://www.eu-egee.org/partners/<sp/>for<sp/>details<sp/>on<sp/>the<sp/>copyright<sp/>holders.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="preprocessor">#include<sp/>&lt;<ref refid="gfal__constants_8h" kindref="compound">common/gfal_constants.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gfal_posix_api.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gfal_posix_internal.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__posix__group_1g33d6a4a93117a6c07405aa6ac0d42122" kindref="member">gfal_access</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*path,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>amode){</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gfal_posix_internal_access(path,<sp/>amode);<sp/></highlight></codeline>
<codeline lineno="47"><highlight class="normal">}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__posix__group_1geed11d6e570d3a22977d860c2b000285" kindref="member">gfal_chmod</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>path,<sp/>mode_t<sp/>mode){</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gfal_posix_internal_chmod(path,<sp/>mode);</highlight></codeline>
<codeline lineno="58"><highlight class="normal">}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__posix__group_1gc56b24046cef203517f30023a999bf1c" kindref="member">gfal_rename</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*oldpath,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*newpath){</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gfal_posix_internal_rename(oldpath,<sp/>newpath);</highlight></codeline>
<codeline lineno="72"><highlight class="normal">}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__posix__group_1g1d8c86d522d5dd26ee7ddcd9c6925964" kindref="member">gfal_stat</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>path,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>stat*<sp/>buff){</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="gfal__posix__stat_8c_1d0ea9a538a524c4b0216d306773b5b0f" kindref="member">gfal_posix_internal_stat</ref>(path,<sp/>buff);</highlight></codeline>
<codeline lineno="85"><highlight class="normal">}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__posix__group_1g347f867802a33bc04fdfb769da857103" kindref="member">gfal_lstat</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>path,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>stat*<sp/>buff){</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gfal_posix_internal_lstat(path,<sp/>buff);</highlight></codeline>
<codeline lineno="94"><highlight class="normal">}</highlight></codeline>
<codeline lineno="104"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="gfal__posix__ng_8c_1412d6606fcf2f735747f278eab8af19a" kindref="member">gfal_mkdirp</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>path,<sp/>mode_t<sp/>mode){</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><sp/><ref refid="gfal__posix__mkdir_8c_14389d46c4fffcc478b9f2f1312364184" kindref="member">gfal_posix_internal_mkdir</ref>(<sp/>path,<sp/>mode);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="107"><highlight class="normal">}</highlight></codeline>
<codeline lineno="111"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__posix__group_1g6f6affcf386900efc5443a9c97556a57" kindref="member">gfal_mkdir</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>path,<sp/>mode_t<sp/>mode){</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><sp/><ref refid="gfal__posix__ng_8c_1412d6606fcf2f735747f278eab8af19a" kindref="member">gfal_mkdirp</ref>(<sp/>path,<sp/>mode);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="114"><highlight class="normal">}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__posix__group_1gcc4b6347640a722674c2d6df437490df" kindref="member">gfal_rmdir</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>path){</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="gfal__posix__rmdir_8c_1bb2b0fb8b7cc5c2c1ef27a1dea280ca0" kindref="member">gfal_posix_internal_rmdir</ref>(path);</highlight></codeline>
<codeline lineno="125"><highlight class="normal">}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal">DIR*<sp/><ref refid="group__posix__group_1g004ad5efbd544da820823e597e57be92" kindref="member">gfal_opendir</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name){</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gfal_posix_internal_opendir(name);</highlight></codeline>
<codeline lineno="138"><highlight class="normal">}</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="keyword">struct<sp/></highlight><highlight class="normal">dirent*<sp/><ref refid="group__posix__group_1g2a8ed205f7748d7817a18521268a1f2d" kindref="member">gfal_readdir</ref>(DIR*<sp/>d){</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="gfal__posix__readdir_8c_1e8c201ec9e7b66c815761bb6b460d6bf" kindref="member">gfal_posix_internal_readdir</ref>(d);<sp/><sp/></highlight></codeline>
<codeline lineno="163"><highlight class="normal">}</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__posix__group_1g1c97c21d23c919b2647f17bbc8b79db2" kindref="member">gfal_closedir</ref>(DIR*<sp/>d){</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gfal_posix_internal_closedir(d);</highlight></codeline>
<codeline lineno="178"><highlight class="normal">}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__posix__group_1gedd0cf1c9158d27dd3a9c4413ca04cfa" kindref="member">gfal_open</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>path,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flag,<sp/>...){</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mode_t<sp/>mode<sp/>=<sp/>S_IRWXU<sp/>|<sp/>S_IRGRP<sp/>|<sp/>S_IROTH;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>va_list<sp/>va;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>va_start(va,<sp/>flag);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mode<sp/>=<sp/>va_arg(va,<sp/>mode_t);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>va_end(va);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="gfal__posix__open_8c_1ada7cd81ad685011082167f02d3c2149" kindref="member">gfal_posix_internal_open</ref>(path,<sp/>flag,<sp/>mode);</highlight></codeline>
<codeline lineno="201"><highlight class="normal">}</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__posix__group_1g5fcdc6f3e7911787be049e20b6ab19b8" kindref="member">gfal_creat</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*filename,<sp/>mode_t<sp/>mode){</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="group__posix__group_1gedd0cf1c9158d27dd3a9c4413ca04cfa" kindref="member">gfal_open</ref><sp/>(filename,<sp/>O_WRONLY|O_CREAT|O_TRUNC,<sp/>mode));</highlight></codeline>
<codeline lineno="215"><highlight class="normal">}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__posix__group_1gbfe92147d0bf650be3e471747ef2096f" kindref="member">gfal_read</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>buff,<sp/>size_t<sp/>s_buff){</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="gfal__posix__read_8c_11f42df17317461c2831cd270cde9819e" kindref="member">gfal_posix_internal_read</ref>(fd,<sp/>buff,<sp/>s_buff);</highlight></codeline>
<codeline lineno="228"><highlight class="normal">}</highlight></codeline>
<codeline lineno="238"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__posix__group_1g7237b84e87965301f5030058eca38333" kindref="member">gfal_write</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*buff,<sp/>size_t<sp/>s_buff){</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="gfal__posix__write_8c_1fccb68462e2f770a8691d2358f2b75b6" kindref="member">gfal_posix_internal_write</ref>(fd,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)<sp/>buff,<sp/>s_buff);</highlight></codeline>
<codeline lineno="240"><highlight class="normal">}</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__posix__group_1g83b88bd27def4c4e2fdfea3c5bbf88b4" kindref="member">gfal_close</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd){</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gfal_posix_internal_close(fd);</highlight></codeline>
<codeline lineno="252"><highlight class="normal">}</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__posix__group_1gc9b6944315e891beca5a56d15292658f" kindref="member">gfal_symlink</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>oldpath,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>newpath){</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="gfal__posix__symlink_8c_1dc9e646bbdc504844fab47bdcb1699f0" kindref="member">gfal_posix_internal_symlink</ref>(oldpath,<sp/>newpath);</highlight></codeline>
<codeline lineno="265"><highlight class="normal">}</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal">off_t<sp/><ref refid="group__posix__group_1g8ba4e1df5f2e6439641c56f245d5ce73" kindref="member">gfal_lseek</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd,<sp/>off_t<sp/>offset,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>whence){</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="gfal__posix__lseek_8c_1dc5f1f6e23db605ce3687110e96e03be" kindref="member">gfal_posix_internal_lseek</ref>(fd,<sp/>offset,<sp/>whence);</highlight></codeline>
<codeline lineno="287"><highlight class="normal">}</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal">ssize_t<sp/><ref refid="group__posix__group_1gc793467bb55cd10d991ee1023b321dae" kindref="member">gfal_getxattr</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*path,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*value,<sp/>size_t<sp/>size){</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gfal_posix_internal_getxattr(path,name,<sp/>value,<sp/>size);</highlight></codeline>
<codeline lineno="305"><highlight class="normal">}</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal">ssize_t<sp/>gfal_readlink(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>path,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>buff,<sp/>size_t<sp/>buffsiz){</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="gfal__posix__readlink_8c_1eb0e2d14bb83951a480a411b9746dcb2" kindref="member">gfal_posix_internal_readlink</ref>(path,<sp/>buff,<sp/>buffsiz);</highlight></codeline>
<codeline lineno="310"><highlight class="normal">}</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__posix__group_1gdeb4c6cc47f507da3e3b498374e308fb" kindref="member">gfal_unlink</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>path){</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="gfal__posix__unlink_8c_17facf305283ec9fd77f0df1c99d8dfa8" kindref="member">gfal_posix_internal_unlink</ref>(path);</highlight></codeline>
<codeline lineno="329"><highlight class="normal">}</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal">ssize_t<sp/><ref refid="group__posix__group_1gb3af1720532d8ad4798b08fa0868f4c7" kindref="member">gfal_listxattr</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*path,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*list,<sp/>size_t<sp/>size){</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gfal_posix_internal_listxattr(path,<sp/>list,<sp/>size);</highlight></codeline>
<codeline lineno="346"><highlight class="normal">}</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__posix__group_1g79d4f4e15b5915fe7f09b57cf09491c5" kindref="member">gfal_setxattr</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*path,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*value,<sp/>size_t<sp/>size,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags){</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="gfal__posix__setxattr_8c_1c67a63706af21829d0e7b9209be4cfce" kindref="member">gfal_posix_internal_setxattr</ref>(path,<sp/>name,<sp/>value,<sp/>size,<sp/>flags);</highlight></codeline>
<codeline lineno="365"><highlight class="normal">}</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__posix__group_1g8ea3cb3121985599bd7453f28891748a" kindref="member">gfal_removexattr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*path,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name){</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="380"><highlight class="normal">}</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__posix__group_1g03fcc29bc5d79dc2f65010846b0db024" kindref="member">gfal_posix_print_error</ref>(){</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gfal_handle<sp/>handle;</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GError*<sp/>err=NULL;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((handle<sp/>=<sp/>gfal_posix_instance())<sp/>==<sp/>NULL){</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_printerr(</highlight><highlight class="stringliteral">&quot;[gfal]<sp/>Initialisation<sp/>error<sp/>gfal_posix_instance()<sp/>failure\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(err<sp/>=<sp/>*gfal_posix_get_last_error())<sp/>!=<sp/>NULL){</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_printerr(</highlight><highlight class="stringliteral">&quot;[gfal]%s<sp/>\n&quot;</highlight><highlight class="normal">,<sp/>err-&gt;message);</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(errno<sp/>!=0){</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>sterr<sp/>=<sp/>strerror(errno);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_printerr(</highlight><highlight class="stringliteral">&quot;[gfal]<sp/>errno<sp/>reported<sp/>by<sp/>external<sp/>lib<sp/>:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>sterr);</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_printerr(</highlight><highlight class="stringliteral">&quot;[gfal]<sp/>No<sp/>gfal<sp/>error<sp/>reported\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="400"><highlight class="normal">}</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight><highlight class="comment">/***</highlight></codeline>
<codeline lineno="403"><highlight class="comment"><sp/>*<sp/><sp/>commit<sp/>all<sp/>operations<sp/>associated<sp/>with<sp/>a<sp/>given<sp/>file<sp/>descriptor.</highlight></codeline>
<codeline lineno="404"><highlight class="comment"><sp/>*<sp/><sp/>@warning<sp/>return<sp/>always<sp/>true<sp/>in<sp/>the<sp/>current<sp/>state.</highlight></codeline>
<codeline lineno="405"><highlight class="comment"><sp/>*<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>gfal_flush(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd){</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="408"><highlight class="normal">}</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__posix__group_1g85337290460234042db0adfd54514df9" kindref="member">gfal_posix_release_error</ref>(){</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__posix__group_1g03fcc29bc5d79dc2f65010846b0db024" kindref="member">gfal_posix_print_error</ref>();</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__posix__group_1ga8252652c1dc86d71ba37b401fb675f9" kindref="member">gfal_posix_clear_error</ref>();</highlight></codeline>
<codeline lineno="417"><highlight class="normal">}</highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight><highlight class="comment">/***</highlight></codeline>
<codeline lineno="420"><highlight class="comment"><sp/>*<sp/>@brief<sp/>set<sp/>a<sp/>parameter<sp/>of<sp/>configuration<sp/>in<sp/>gfal</highlight></codeline>
<codeline lineno="421"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="422"><highlight class="comment"><sp/>*<sp/><sp/>set<sp/>a<sp/>parameter<sp/>identified<sp/>by<sp/>name<sp/>in<sp/>the<sp/>module<sp/>module<sp/>with<sp/>a<sp/>specific<sp/>string<sp/>value</highlight></codeline>
<codeline lineno="423"><highlight class="comment"><sp/>*<sp/><sp/></highlight></codeline>
<codeline lineno="424"><highlight class="comment"><sp/>*<sp/>@param<sp/>namespace<sp/>:<sp/>namespace<sp/>of<sp/>the<sp/>parameter<sp/>(<sp/>plugin<sp/>name,<sp/>isifce,<sp/>NULL<sp/>for<sp/>core),<sp/>etc....</highlight></codeline>
<codeline lineno="425"><highlight class="comment"><sp/>*<sp/>@param<sp/>key<sp/>:<sp/>key<sp/>of<sp/>the<sp/>parameter<sp/>to<sp/>set</highlight></codeline>
<codeline lineno="426"><highlight class="comment"><sp/>*<sp/>@param<sp/>value<sp/>:<sp/>value<sp/>of<sp/>the<sp/>parameter</highlight></codeline>
<codeline lineno="427"><highlight class="comment"><sp/>*<sp/>@return<sp/>0<sp/>if<sp/>success<sp/>or<sp/>-1<sp/>if<sp/>error.<sp/>In<sp/>this<sp/>case,<sp/><sp/>errno<sp/><sp/>is<sp/><sp/>set</highlight></codeline>
<codeline lineno="428"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>and<sp/>you<sp/>can<sp/>call<sp/>@ref<sp/>gfal_posix_check_error()<sp/>for<sp/>a<sp/>more<sp/>complete<sp/>description.<sp/></highlight></codeline>
<codeline lineno="429"><highlight class="comment"><sp/>*<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>gfal_set_parameter_string(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">namespace</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>key,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>value){</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="gfal__posix__parameters_8c_123635b7c02de0165acdc8b68880a4e87" kindref="member">gfal_set_parameter_string_internal</ref>(</highlight><highlight class="keyword">namespace</highlight><highlight class="normal">,<sp/>key,<sp/>value);</highlight></codeline>
<codeline lineno="432"><highlight class="normal">}</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight><highlight class="comment">/***</highlight></codeline>
<codeline lineno="436"><highlight class="comment"><sp/>*<sp/>@brief<sp/>get<sp/>a<sp/>parameter<sp/>of<sp/>configuration<sp/>in<sp/>gfal</highlight></codeline>
<codeline lineno="437"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="438"><highlight class="comment"><sp/>*<sp/><sp/>get<sp/>a<sp/>string<sp/>parameter<sp/>identified<sp/>by<sp/>name<sp/>in<sp/>the<sp/>module<sp/>module<sp/></highlight></codeline>
<codeline lineno="439"><highlight class="comment"><sp/>*<sp/><sp/></highlight></codeline>
<codeline lineno="440"><highlight class="comment"><sp/>*<sp/>@param<sp/>namespace<sp/>:<sp/>namespace<sp/>of<sp/>the<sp/>parameter<sp/>(<sp/>plugin<sp/>name,<sp/>isifce,<sp/>NULL<sp/>for<sp/>core),<sp/>etc....</highlight></codeline>
<codeline lineno="441"><highlight class="comment"><sp/>*<sp/>@param<sp/>key<sp/>:<sp/>key<sp/>of<sp/>the<sp/>parameter<sp/>to<sp/>get</highlight></codeline>
<codeline lineno="442"><highlight class="comment"><sp/>*<sp/>@return<sp/>string<sp/><sp/>of<sp/>the<sp/>parameter<sp/>if<sp/>valid<sp/>(<sp/>must<sp/>be<sp/>free),<sp/>or<sp/>NULL<sp/>if<sp/>not<sp/>valid</highlight></codeline>
<codeline lineno="443"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>and<sp/>you<sp/>can<sp/>call<sp/>@ref<sp/>gfal_posix_check_error()<sp/>for<sp/>a<sp/>more<sp/>complete<sp/>description.<sp/></highlight></codeline>
<codeline lineno="444"><highlight class="comment"><sp/>*<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>gfal_get_parameter_string(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">namespace</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>key){</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="gfal__posix__parameters_8c_1870af5bd0aa51f88dbe475c250a64152" kindref="member">gfal_get_parameter_string_internal</ref>(</highlight><highlight class="keyword">namespace</highlight><highlight class="normal">,<sp/>key);<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="447"><highlight class="normal">}</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight><highlight class="comment">/***</highlight></codeline>
<codeline lineno="452"><highlight class="comment"><sp/>*<sp/>@brief<sp/>set<sp/>a<sp/>parameter<sp/>of<sp/>configuration<sp/>in<sp/>gfal</highlight></codeline>
<codeline lineno="453"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="454"><highlight class="comment"><sp/>*<sp/><sp/>set<sp/>a<sp/>parameter<sp/>identified<sp/>by<sp/>name<sp/>in<sp/>the<sp/>module<sp/>module<sp/>with<sp/>a<sp/>specific<sp/>int<sp/>value<sp/></highlight></codeline>
<codeline lineno="455"><highlight class="comment"><sp/>*<sp/><sp/></highlight></codeline>
<codeline lineno="456"><highlight class="comment"><sp/>*<sp/>@param<sp/>module<sp/>:<sp/>namespace<sp/>of<sp/>the<sp/>parameter<sp/>(<sp/>plugin<sp/>name,<sp/>isifce,<sp/>NULL<sp/>for<sp/>core),<sp/>etc....</highlight></codeline>
<codeline lineno="457"><highlight class="comment"><sp/>*<sp/>@param<sp/>name<sp/>:<sp/>key<sp/>of<sp/>the<sp/>parameter<sp/>to<sp/>set</highlight></codeline>
<codeline lineno="458"><highlight class="comment"><sp/>*<sp/>@param<sp/>value<sp/>:<sp/>int<sp/>value<sp/>to<sp/>set</highlight></codeline>
<codeline lineno="459"><highlight class="comment"><sp/>*<sp/>@return<sp/>0<sp/>if<sp/>success<sp/>or<sp/>-1<sp/>if<sp/>error.<sp/>In<sp/>this<sp/>case,<sp/><sp/>errno<sp/><sp/>is<sp/><sp/>set</highlight></codeline>
<codeline lineno="460"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>and<sp/>you<sp/>can<sp/>call<sp/>@ref<sp/>gfal_posix_check_error()<sp/>for<sp/>a<sp/>more<sp/>complete<sp/>description.<sp/></highlight></codeline>
<codeline lineno="461"><highlight class="comment"><sp/>*<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>gfal_set_parameter_int(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>module,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value){</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="464"><highlight class="normal">}</highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight><highlight class="comment">/***</highlight></codeline>
<codeline lineno="469"><highlight class="comment"><sp/>*<sp/>@brief<sp/>sget<sp/>a<sp/>parameter<sp/>of<sp/>configuration<sp/>in<sp/>gfal</highlight></codeline>
<codeline lineno="470"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="471"><highlight class="comment"><sp/>*<sp/><sp/>get<sp/>a<sp/>parameter<sp/>identified<sp/>by<sp/>name<sp/>in<sp/>the<sp/>module<sp/>module<sp/></highlight></codeline>
<codeline lineno="472"><highlight class="comment"><sp/>*<sp/><sp/></highlight></codeline>
<codeline lineno="473"><highlight class="comment"><sp/>*<sp/>@param<sp/>module<sp/>:<sp/>namespace<sp/>of<sp/>the<sp/>parameter<sp/>(<sp/>plugin<sp/>name,<sp/>isifce,<sp/>NULL<sp/>for<sp/>core),<sp/>etc....</highlight></codeline>
<codeline lineno="474"><highlight class="comment"><sp/>*<sp/>@param<sp/>name<sp/>:<sp/>key<sp/>of<sp/>the<sp/>parameter<sp/>to<sp/>get</highlight></codeline>
<codeline lineno="475"><highlight class="comment"><sp/>*<sp/>@return<sp/>value<sp/>if<sp/>success<sp/>or<sp/>-1<sp/>if<sp/>error.<sp/>In<sp/>this<sp/>case,<sp/><sp/>errno<sp/><sp/>is<sp/><sp/>set</highlight></codeline>
<codeline lineno="476"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>and<sp/>you<sp/>can<sp/>call<sp/>@ref<sp/>gfal_posix_check_error()<sp/>for<sp/>a<sp/>more<sp/>complete<sp/>description.<sp/></highlight></codeline>
<codeline lineno="477"><highlight class="comment"><sp/>*<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>gfal_get_parameter_int(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>module,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name){</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="480"><highlight class="normal">}</highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight><highlight class="comment">/***</highlight></codeline>
<codeline lineno="483"><highlight class="comment"><sp/>*<sp/>@brief<sp/>set<sp/>a<sp/>boolean<sp/>parameter<sp/>in<sp/>gfal</highlight></codeline>
<codeline lineno="484"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="485"><highlight class="comment"><sp/>*<sp/><sp/>set<sp/>a<sp/>parameter<sp/>identified<sp/>by<sp/>name<sp/>in<sp/>the<sp/>module<sp/>module<sp/>with<sp/>a<sp/>specific<sp/>int<sp/>value<sp/></highlight></codeline>
<codeline lineno="486"><highlight class="comment"><sp/>*<sp/><sp/></highlight></codeline>
<codeline lineno="487"><highlight class="comment"><sp/>*<sp/>@param<sp/>module<sp/>:<sp/>namespace<sp/>of<sp/>the<sp/>parameter<sp/>(<sp/>plugin<sp/>name,<sp/>isifce,<sp/>NULL<sp/>for<sp/>core),<sp/>etc....</highlight></codeline>
<codeline lineno="488"><highlight class="comment"><sp/>*<sp/>@param<sp/>name<sp/>:<sp/>key<sp/>of<sp/>the<sp/>parameter<sp/>to<sp/>set</highlight></codeline>
<codeline lineno="489"><highlight class="comment"><sp/>*<sp/>@param<sp/>value<sp/>:<sp/>int<sp/>value<sp/>to<sp/>set</highlight></codeline>
<codeline lineno="490"><highlight class="comment"><sp/>*<sp/>@return<sp/>0<sp/>if<sp/>success<sp/>or<sp/>-1<sp/>if<sp/>error.<sp/>In<sp/>this<sp/>case,<sp/><sp/>errno<sp/><sp/>is<sp/><sp/>set</highlight></codeline>
<codeline lineno="491"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>and<sp/>you<sp/>can<sp/>call<sp/>@ref<sp/>gfal_posix_check_error()<sp/>for<sp/>a<sp/>more<sp/>complete<sp/>description.<sp/></highlight></codeline>
<codeline lineno="492"><highlight class="comment"><sp/>*<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>gfal_set_parameter_boolean(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">namespace</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>key,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value){</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="gfal__posix__parameters_8c_198b19bc6f63e4a3f0a741ed251af03b3" kindref="member">gfal_set_parameter_boolean_internal</ref>(</highlight><highlight class="keyword">namespace</highlight><highlight class="normal">,<sp/>key,<sp/>value);</highlight></codeline>
<codeline lineno="495"><highlight class="normal">}</highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight><highlight class="comment">/***</highlight></codeline>
<codeline lineno="498"><highlight class="comment"><sp/>*<sp/>@brief<sp/>set<sp/>a<sp/>parameter<sp/>of<sp/>configuration<sp/>in<sp/>gfal</highlight></codeline>
<codeline lineno="499"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="500"><highlight class="comment"><sp/>*<sp/><sp/>set<sp/>a<sp/>parameter<sp/>identified<sp/>by<sp/>name<sp/>in<sp/>the<sp/>module<sp/>module<sp/>with<sp/>a<sp/>specific<sp/>int<sp/>value<sp/></highlight></codeline>
<codeline lineno="501"><highlight class="comment"><sp/>*<sp/><sp/>store<sp/>a<sp/>-1<sp/>value<sp/>in<sp/>this<sp/>way<sp/>is<sp/>discouraged</highlight></codeline>
<codeline lineno="502"><highlight class="comment"><sp/>*<sp/><sp/></highlight></codeline>
<codeline lineno="503"><highlight class="comment"><sp/>*<sp/>@param<sp/>module<sp/>:<sp/>namespace<sp/>of<sp/>the<sp/>parameter<sp/>(<sp/>plugin<sp/>name,<sp/>isifce,<sp/>NULL<sp/>for<sp/>core),<sp/>etc....</highlight></codeline>
<codeline lineno="504"><highlight class="comment"><sp/>*<sp/>@param<sp/>name<sp/>:<sp/>key<sp/>of<sp/>the<sp/>parameter<sp/>to<sp/>set</highlight></codeline>
<codeline lineno="505"><highlight class="comment"><sp/>*<sp/>@return<sp/>return<sp/>the<sp/>value<sp/>0<sp/>if<sp/>False,<sp/>1<sp/>if<sp/>true<sp/>or<sp/>-1<sp/>if<sp/>error<sp/>occured</highlight></codeline>
<codeline lineno="506"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>and<sp/>you<sp/>can<sp/>call<sp/>@ref<sp/>gfal_posix_check_error()<sp/>for<sp/>a<sp/>more<sp/>complete<sp/>description.<sp/></highlight></codeline>
<codeline lineno="507"><highlight class="comment"><sp/>*<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>gfal_get_parameter_boolean(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">namespace</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>key){</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="gfal__posix__parameters_8c_15dd091f80a40fb000fff38087a99dde3" kindref="member">gfal_get_parameter_boolean_internal</ref>(</highlight><highlight class="keyword">namespace</highlight><highlight class="normal">,<sp/>key);</highlight></codeline>
<codeline lineno="510"><highlight class="normal">}</highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__posix__group_1ga8252652c1dc86d71ba37b401fb675f9" kindref="member">gfal_posix_clear_error</ref>(){</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_clear_error(<sp/>gfal_posix_get_last_error());</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errno<sp/>=0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="520"><highlight class="normal">}</highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__posix__group_1gc6149b0b3c9c8af05789169a18832634" kindref="member">gfal_posix_code_error</ref>(){</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GError*<sp/>err=NULL;</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>((err<sp/>=<sp/>*gfal_posix_get_last_error())<sp/>!=<sp/>NULL)?<sp/>err-&gt;code<sp/>:0<sp/>;</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="532"><highlight class="normal">}</highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__posix__group_1g57ced6eae7afd2d0413988da02fe0373" kindref="member">gfal_posix_check_error</ref>(){</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GError*<sp/>err=NULL;</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((err<sp/>=<sp/>*gfal_posix_get_last_error())<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_printerr(</highlight><highlight class="stringliteral">&quot;[gfal]%s\n&quot;</highlight><highlight class="normal">,<sp/>err-&gt;message);</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="545"><highlight class="normal">}</highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="group__posix__group_1g2a9e2951c934dd1c3205a89c0d25ac29" kindref="member">gfal_posix_strerror_r</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>buff_err,<sp/>size_t<sp/>s_err){</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<ref refid="gfal__common__errverbose_8c_14dec12f0df920db39c004776d7f04e6e" kindref="member">gfal_str_GError_r</ref>(gfal_posix_get_last_error(),<sp/>buff_err,<sp/>s_err);</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="566"><highlight class="normal">ssize_t<sp/><ref refid="group__posix__group_1gb1918905381341a2dd35916d86d43449" kindref="member">gfal_pread</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>buffer,<sp/>size_t<sp/>count,<sp/>off_t<sp/>offset){</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="gfal__posix__read_8c_1c688b17ef97e9100bff37f02a8a26be2" kindref="member">gfal_posix_internal_pread</ref>(fd,<sp/>buffer,<sp/>count,<sp/>offset);</highlight></codeline>
<codeline lineno="568"><highlight class="normal">}</highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal">ssize_t<sp/><ref refid="group__posix__group_1g2de061fcdbdec58660d5917a90772d6d" kindref="member">gfal_pwrite</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>buffer,<sp/>size_t<sp/>count,<sp/>off_t<sp/>offset){</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="gfal__posix__write_8c_1eda9f322f611299fdefc253488a26f35" kindref="member">gfal_posix_internal_pwrite</ref>(fd,<sp/>buffer,<sp/>count,<sp/>offset);</highlight></codeline>
<codeline lineno="584"><highlight class="normal">}</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/></highlight></codeline>
    </programlisting>
    <location file="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c"/>
  </compounddef>
</doxygen>
