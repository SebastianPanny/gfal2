<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.4.7">
  <compounddef id="group__posix__group" kind="group">
    <compoundname>posix_group</compoundname>
    <title>all POSIX style function</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__posix__group_1g33d6a4a93117a6c07405aa6ac0d42122" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gfal_access</definition>
        <argsstring>(const char *, int)</argsstring>
        <name>gfal_access</name>
        <param>
          <type>const char *</type>
          <defname>path</defname>
        </param>
        <param>
          <type>int</type>
          <defname>amode</defname>
        </param>
        <briefdescription>
<para>test access to the given file </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>can be in supported protocols (lfn, srm, file, guid,..) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This routine return 0 if the operation was successful, or -1 if error occured and errno is set, call <ref refid="gfal__posix__ng_8c_157ced6eae7afd2d0413988da02fe0373" kindref="member">gfal_posix_check_error()</ref>  to check it. <linebreak/>
<itemizedlist>
<listitem><para>ERRNO list : <linebreak/>
<itemizedlist>
<listitem><para>usual errors:<itemizedlist>
<listitem><para>ENOENT: The named file/directory does not exist.</para></listitem><listitem><para>EACCES: Search permission is denied on a component of the path prefix or specified access to the file itself is denied.</para></listitem><listitem><para>EFAULT: path is a NULL pointer.</para></listitem><listitem><para>ENOTDIR: A component of path prefix is not a directory.</para></listitem><listitem><para>ECOMM: Communication error</para></listitem><listitem><para>EPROTONOSUPPORT: Access method not supported.</para></listitem><listitem><para>EINVAL: path has an invalid syntax or amode is invalid. </para></listitem></itemizedlist>
</para></listitem></itemizedlist>
</para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/doc/src/POSIX_API.c" line="32" bodyfile="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" bodystart="50" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="group__posix__group_1gdfeeecb2052d81e65bcc09903655991b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gfal_chmod</definition>
        <argsstring>(const char *, mode_t)</argsstring>
        <name>gfal_chmod</name>
        <param>
          <type>const char *</type>
          <defname>path</defname>
        </param>
        <param>
          <type>mode_t</type>
          <defname>mode</defname>
        </param>
        <briefdescription>
<para>set rights of the file/dir </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>: path of the file or the folder concerned in supported protocols (lfn, file, guid,..) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>: right to configure </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>return 0 if success else -1 and errno is set, call <ref refid="gfal__posix__ng_8c_157ced6eae7afd2d0413988da02fe0373" kindref="member">gfal_posix_check_error()</ref>  to check it<itemizedlist>
<listitem><para>ERRNO list : <linebreak/>
<itemizedlist>
<listitem><para>usual errors:<itemizedlist>
<listitem><para>ENOENT: The named file/directory does not exist.</para></listitem><listitem><para>EACCES: Search permission is denied on a component of the path prefix or specified access to the file itself is denied.</para></listitem><listitem><para>EFAULT: path is a NULL pointer.</para></listitem><listitem><para>ENOTDIR: A component of path prefix is not a directory.</para></listitem><listitem><para>ECOMM: Communication error</para></listitem><listitem><para>EPROTONOSUPPORT: Access method not supported.</para></listitem><listitem><para>EINVAL: path has an invalid syntax or amode is invalid. </para></listitem></itemizedlist>
</para></listitem></itemizedlist>
</para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/doc/src/POSIX_API.c" line="50" bodyfile="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" bodystart="69" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="group__posix__group_1g83b88bd27def4c4e2fdfea3c5bbf88b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gfal_close</definition>
        <argsstring>(int)</argsstring>
        <name>gfal_close</name>
        <param>
          <type>int</type>
          <defname>fd</defname>
        </param>
        <briefdescription>
<para>close the current file descriptor </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fd</parametername>
</parameternamelist>
<parameterdescription>
<para>: descriptor or the file given by <ref refid="group__posix__group_1g6a431a0bdd01baf8cadbdcaa98b1c622" kindref="member">gfal_open</ref>  </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This routine returns 0 if the operation was successful or -1 if the operation failed. In the latter case, errno is set appropriately<itemizedlist>
<listitem><para>ERRNO list : <linebreak/>
<itemizedlist>
<listitem><para>usual errors:<itemizedlist>
<listitem><para>EBADF: fd is not a valid file descriptor.</para></listitem><listitem><para>ECOMM: Communication error</para></listitem><listitem><para>EPROTONOSUPPORT: path has a syntax error or the protocol speficied is not supported </para></listitem></itemizedlist>
</para></listitem></itemizedlist>
</para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/doc/src/POSIX_API.c" line="62" bodyfile="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" bodystart="276" bodyend="278"/>
      </memberdef>
      <memberdef kind="function" id="group__posix__group_1g1c97c21d23c919b2647f17bbc8b79db2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gfal_closedir</definition>
        <argsstring>(DIR *)</argsstring>
        <name>gfal_closedir</name>
        <param>
          <type>DIR *</type>
          <defname>d</defname>
        </param>
        <briefdescription>
<para>gfal_closedir - close a directory </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>file handle ( return by opendir ) to close </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if success else negative value and errno is set ( ( gfal_posix_error_print() )</para></simplesect>
<itemizedlist>
<listitem><para>ERRNO list : <linebreak/>
<itemizedlist>
<listitem><para>usual errors:<itemizedlist>
<listitem><para>EBADF : bad file descriptor<itemizedlist>
<listitem><para>ECOMM : Communication error </para></listitem></itemizedlist>
</para></listitem></itemizedlist>
</para></listitem></itemizedlist>
</para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/doc/src/POSIX_API.c" line="75" bodyfile="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" bodystart="241" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="group__posix__group_1g5fcdc6f3e7911787be049e20b6ab19b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gfal_creat</definition>
        <argsstring>(const char *, mode_t)</argsstring>
        <name>gfal_creat</name>
        <param>
          <type>const char *</type>
        </param>
        <param>
          <type>mode_t</type>
        </param>
        <briefdescription>
<para>creates a new file or truncates an existing one </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>specifies the file name: either a logical file name, a guid, an SURL or a TURL </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>is used only if the file is created </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This routine returns a write-only file descriptor if the operation was successful or -1 if the operation failed. In the latter case, errno is set appropriately<itemizedlist>
<listitem><para>ERRNO list : <linebreak/>
<itemizedlist>
<listitem><para>ENOENT: The named file/directory does not exist.</para></listitem><listitem><para>EACCES: Search permission is denied on a component of the path prefix or specified access to the file itself is denied.</para></listitem><listitem><para>EFAULT: path is a NULL pointer.</para></listitem><listitem><para>EBUSY: Device or resource busy. Happens if you try to open in write mode a CASTOR file that is in an active migration stream</para></listitem><listitem><para>ENOTDIR: A component of path prefix is not a directory.</para></listitem><listitem><para>EINVAL: path has an invalid syntax or amode is invalid.</para></listitem><listitem><para>ECOMM: Communication error.</para></listitem><listitem><para>EPROTONOSUPPORT: Access method not supported. </para></listitem></itemizedlist>
</para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/doc/src/POSIX_API.c" line="92"/>
      </memberdef>
      <memberdef kind="function" id="group__posix__group_1g48783e60cafa1a3bf9aa2170b99f9b08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gfal_creat64</definition>
        <argsstring>(const char *, mode_t)</argsstring>
        <name>gfal_creat64</name>
        <param>
          <type>const char *</type>
        </param>
        <param>
          <type>mode_t</type>
        </param>
        <briefdescription>
<para>same as create for large file </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/doc/src/POSIX_API.c" line="96"/>
      </memberdef>
      <memberdef kind="function" id="group__posix__group_1g8ba4e1df5f2e6439641c56f245d5ce73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>off_t</type>
        <definition>off_t gfal_lseek</definition>
        <argsstring>(int, off_t, int)</argsstring>
        <name>gfal_lseek</name>
        <param>
          <type>int</type>
        </param>
        <param>
          <type>off_t</type>
        </param>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
<para>gfal_lseek - position a file </para>        </briefdescription>
        <detaileddescription>
<para>gfal_lseek positions/repositions to offset the file associated with the descriptor fd generated by a previous gfal_open. whence indicates how to interpret the offset value:</para><para><itemizedlist>
<listitem><para>SEEK_SET The offset is set from beginning of file.</para></listitem><listitem><para>SEEK_CUR The offset is added to current position.</para></listitem><listitem><para>SEEK_END The offset is added to current file size.</para></listitem></itemizedlist>
</para><para><simplesect kind="return"><para>This routine returns the actual offset from the beginning of the file if the operation was successful or -1 if the operation failed. In the latter case, errno is set appropriately.<itemizedlist>
<listitem><para>ERRORS :<itemizedlist>
<listitem><para>EBADF fd is not a valid file descriptor.</para></listitem><listitem><para>EINVAL incorrect value for whence.</para></listitem><listitem><para>EFBIG Resulting offset is too big to fit in off_t.</para></listitem><listitem><para>ECOMM Communication error.</para></listitem><listitem><para>EPROTONOSUPPORT Access method not supported.</para></listitem></itemizedlist>
</para></listitem></itemizedlist>
</para></simplesect>
gfal_lseek64 performs the same function on large files using off64_t rather than off_t. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/doc/src/POSIX_API.c" line="124"/>
      </memberdef>
      <memberdef kind="function" id="group__posix__group_1g6f6affcf386900efc5443a9c97556a57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gfal_mkdir</definition>
        <argsstring>(const char *, mode_t)</argsstring>
        <name>gfal_mkdir</name>
        <param>
          <type>const char *</type>
          <defname>path</defname>
        </param>
        <param>
          <type>mode_t</type>
          <defname>mode</defname>
        </param>
        <briefdescription>
<para>create a new directory creates a new directory with permission bits taken from mode. The default behavior of this command is recursive, like &quot;mkdir -p&quot;. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>: url of the directory. Can be surl ( srm://), local (<ulink url="file://">file://</ulink>), or catalog&apos;s url (lfc:, ....) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>: right of the directory ( depend of the implementation ) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>return 0 if success else -1 and errno is set call <ref refid="gfal__posix__ng_8c_157ced6eae7afd2d0413988da02fe0373" kindref="member">gfal_posix_check_error()</ref>  to check it<itemizedlist>
<listitem><para>ERRNO list : <linebreak/>
<itemizedlist>
<listitem><para>usual errors:<itemizedlist>
<listitem><para>ENOENT: The named file/directory does not exist.</para></listitem><listitem><para>EACCES: Write perimission is denied for newpath or oldpath, or, search permission is denied for one of the directories in the path prefix of oldpath or newpath, or oldpath is a directory and does not allow write permission (needed to update the .. entry)</para></listitem><listitem><para>EFAULT: oldpath or newpath is a NULL pointer.</para></listitem><listitem><para>ENOTDIR: A component of path prefix is not a directory.<itemizedlist>
<listitem><para>EEXIST: file already exist</para></listitem></itemizedlist>
</para></listitem><listitem><para>ECOMM: Communication error</para></listitem><listitem><para>EPROTONOSUPPORT: oldpath or newpath has a syntax error or the protocol speficied is not supported</para></listitem><listitem><para>EINVAL: oldpath or newpath has an invalid syntax . </para></listitem></itemizedlist>
</para></listitem></itemizedlist>
</para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/doc/src/POSIX_API.c" line="126" bodyfile="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" bodystart="149" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="group__posix__group_1g6a431a0bdd01baf8cadbdcaa98b1c622" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gfal_open</definition>
        <argsstring>(const char *, int, mode_t)</argsstring>
        <name>gfal_open</name>
        <param>
          <type>const char *</type>
          <defname>path</defname>
        </param>
        <param>
          <type>int</type>
          <defname>flag</defname>
        </param>
        <param>
          <type>mode_t</type>
          <defname>mode</defname>
        </param>
        <briefdescription>
<para>opens a file according to the value of flags </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>: url of the filename to open, can be a surl, lfn, guid, local or turl the urls supported by the modules </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flag</parametername>
</parameternamelist>
<parameterdescription>
<para>: same flag supported value is built by OR’ing the bits defined in &lt;fcntl.h&gt; but one and only one of the first three flags below must be used O_RDONLY open for reading only O_WRONLY open for writing only O_RDWR open for reading and writing O_CREAT If the file exists already and O_EXCL is also set, gfal_open will fail. O_LARGEFILE allows files whose sizes cannot be represented in 31 bits to be opened. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>is used only if the file is created. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>return the file descriptor or -1 if error ( errno is set ( gfal_posix_error_print() ) ) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/doc/src/POSIX_API.c" line="146" bodyfile="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" bodystart="257" bodyend="259"/>
      </memberdef>
      <memberdef kind="function" id="group__posix__group_1gbed417acea7f862ea1977417ed842ef4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gfal_open64</definition>
        <argsstring>(const char *, int, mode_t)</argsstring>
        <name>gfal_open64</name>
        <param>
          <type>const char *</type>
        </param>
        <param>
          <type>int</type>
        </param>
        <param>
          <type>mode_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/doc/src/POSIX_API.c" line="148"/>
      </memberdef>
      <memberdef kind="function" id="group__posix__group_1g7e6d16651dbce5d684c53f82349e0306" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DIR *</type>
        <definition>DIR * gfal_opendir</definition>
        <argsstring>(const char *)</argsstring>
        <name>gfal_opendir</name>
        <param>
          <type>const char *</type>
          <defname>name</defname>
        </param>
        <briefdescription>
<para>open a directory </para>        </briefdescription>
        <detaileddescription>
<para>opens a directory to be used in subsequent gfal_readdir operations the url supported are : local files, surls, catalog url ( lfc,...) <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>of the directory to open </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>file descriptor DIR* if success else NULL if error and errno is set ( gfal_posix_error_print() )</para></simplesect>
<itemizedlist>
<listitem><para>ERRNO list : <linebreak/>
<itemizedlist>
<listitem><para>usual errors:<itemizedlist>
<listitem><para>ENOENT: The named file/directory does not exist.</para></listitem><listitem><para>EACCES: Write perimission is denied for path, or, search permission is denied for one of the directories in the path prefix of oldpath or newpath, or oldpath is a directory and does not allow write permission (needed to update the .. entry)</para></listitem><listitem><para>EFAULT: path is a NULL pointer.<itemizedlist>
<listitem><para>ENOTEMPTY : newpath is a nonempty directory, that is, contains entries other than &quot;.&quot; and &quot;..&quot;</para></listitem></itemizedlist>
</para></listitem><listitem><para>ENOTDIR: path or a component in path is not a directory.<itemizedlist>
<listitem><para>EMFILE: too many file open by the process</para></listitem></itemizedlist>
</para></listitem><listitem><para>ECOMM: Communication error</para></listitem><listitem><para>EPROTONOSUPPORT: path has a syntax error or the protocol speficied is not supported</para></listitem><listitem><para>EINVAL: path has an invalid syntax . </para></listitem></itemizedlist>
</para></listitem></itemizedlist>
</para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/doc/src/POSIX_API.c" line="150" bodyfile="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" bodystart="196" bodyend="198"/>
      </memberdef>
      <memberdef kind="function" id="group__posix__group_1gaa6bfe36f33b86e489b798aed96912de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ssize_t</type>
        <definition>ssize_t gfal_read</definition>
        <argsstring>(int, void *, size_t)</argsstring>
        <name>gfal_read</name>
        <param>
          <type>int</type>
        </param>
        <param>
          <type>void *</type>
        </param>
        <param>
          <type>size_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/doc/src/POSIX_API.c" line="152" bodyfile="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" bodystart="261" bodyend="263"/>
      </memberdef>
      <memberdef kind="function" id="group__posix__group_1gad7e253fad72213c19e72c02b869ba7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>dirent *</type>
        <definition>struct dirent * gfal_readdir</definition>
        <argsstring>(DIR *)</argsstring>
        <name>gfal_readdir</name>
        <param>
          <type>DIR *</type>
          <defname>dir</defname>
        </param>
        <briefdescription>
<para>read a directory </para>        </briefdescription>
        <detaileddescription>
<para>The readdir() function returns a pointer to a dirent structure representing the next directory entry in the directory stream pointed to by dirp. It returns NULL on reaching the end of the directory stream or if an error occurred. struct dirent { ino_t d_ino; // inode number off_t d_off; // offset to the next dirent unsigned short d_reclen; // length of this record unsigned char d_type; // type of file; not supported // by all file system types char d_name[256]; // filename };</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>file handle ( return by opendir ) to read </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pointer to struct dirent with file information or NULL if end of list or error ( errno is set ( gfal_posix_error_print() ) ) </para></simplesect>
<simplesect kind="warning"><para>struct dirents are allocated statically, do not use free() on them</para></simplesect>
<itemizedlist>
<listitem><para>ERRNO list : <linebreak/>
<itemizedlist>
<listitem><para>usual errors:<itemizedlist>
<listitem><para>EBADF : bad file descriptor<itemizedlist>
<listitem><para>ECOMM : Communication error </para></listitem></itemizedlist>
</para></listitem></itemizedlist>
</para></listitem></itemizedlist>
</para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/doc/src/POSIX_API.c" line="154" bodyfile="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" bodystart="225" bodyend="227"/>
      </memberdef>
      <memberdef kind="function" id="group__posix__group_1g34dc6129530d6bf9e5836ef22c0d2792" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gfal_rename</definition>
        <argsstring>(const char *, const char *)</argsstring>
        <name>gfal_rename</name>
        <param>
          <type>const char *</type>
          <defname>oldpath</defname>
        </param>
        <param>
          <type>const char *</type>
          <defname>newpath</defname>
        </param>
        <briefdescription>
<para>change the name or location of a file oldpath and newpath need to be on the same catalog this functions work only with catalogs (lfc ) and local files </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>oldpath</parametername>
</parameternamelist>
<parameterdescription>
<para>: the old path of the file </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>newpath</parametername>
</parameternamelist>
<parameterdescription>
<para>: the new path of the file </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>: return 0 if success, else -1 and errno / <ref refid="gfal__posix__ng_8c_157ced6eae7afd2d0413988da02fe0373" kindref="member">gfal_posix_check_error()</ref> <itemizedlist>
<listitem><para>ERRNO list : <linebreak/>
<itemizedlist>
<listitem><para>usual errors:<itemizedlist>
<listitem><para>ENOENT: The named file/directory does not exist.</para></listitem><listitem><para>EACCES: Write perimission is denied for newpath or oldpath, or, search permission is denied for one of the directories in the path prefix of oldpath or newpath, or oldpath is a directory and does not allow write permission (needed to update the .. entry)</para></listitem><listitem><para>EFAULT: oldpath or newpath is a NULL pointer.<itemizedlist>
<listitem><para>EISDIR: newpath is an existing directory but oldpath is not a directory</para></listitem><listitem><para>ENOTEMPTY or EEXIST : newpath is a nonempty directory, that is, contains entries other than &quot;.&quot; and &quot;..&quot;</para></listitem></itemizedlist>
</para></listitem><listitem><para>ENOTDIR: A component of path prefix is not a directory.<itemizedlist>
<listitem><para>EXDEV oldpath and newpath are not on the same mounted file system.</para></listitem></itemizedlist>
</para></listitem><listitem><para>ECOMM: Communication error</para></listitem><listitem><para>EPROTONOSUPPORT: oldpath or newpath has a syntax error or the protocol speficied is not supported</para></listitem><listitem><para>EINVAL: oldpath or newpath has an invalid syntax . </para></listitem></itemizedlist>
</para></listitem></itemizedlist>
</para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/doc/src/POSIX_API.c" line="156" bodyfile="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" bodystart="95" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="group__posix__group_1gcc4b6347640a722674c2d6df437490df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gfal_rmdir</definition>
        <argsstring>(const char *)</argsstring>
        <name>gfal_rmdir</name>
        <param>
          <type>const char *</type>
          <defname>path</defname>
        </param>
        <briefdescription>
<para>removes a directory if it is empty remove an existing directory, return error if the dir is not empty </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>specifies the directory name, can be a surl ( srm://), local (<ulink url="file://">file://</ulink>) or a catalog url ( lfc:, ....) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>return 0 is success else -1 and errno is set call <ref refid="gfal__posix__ng_8c_157ced6eae7afd2d0413988da02fe0373" kindref="member">gfal_posix_check_error()</ref>  to check it<itemizedlist>
<listitem><para>ERRNO list : <linebreak/>
<itemizedlist>
<listitem><para>usual errors:<itemizedlist>
<listitem><para>ENOENT: The named file/directory does not exist.</para></listitem><listitem><para>EACCES: Write perimission is denied for path, or, search permission is denied for one of the directories in the path prefix of oldpath or newpath, or oldpath is a directory and does not allow write permission (needed to update the .. entry)</para></listitem><listitem><para>EFAULT: path is a NULL pointer.<itemizedlist>
<listitem><para>ENOTEMPTY : path is a nonempty directory, that is, contains entries other than &quot;.&quot; and &quot;..&quot;</para></listitem></itemizedlist>
</para></listitem><listitem><para>ENOTDIR: A component of path prefix is not a directory.</para></listitem><listitem><para>ECOMM: Communication error</para></listitem><listitem><para>EPROTONOSUPPORT: path has a syntax error or the protocol speficied is not supported</para></listitem><listitem><para>EINVAL: path has an invalid syntax . </para></listitem></itemizedlist>
</para></listitem></itemizedlist>
</para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/doc/src/POSIX_API.c" line="158" bodyfile="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" bodystart="171" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="group__posix__group_1g45a23756f2c79a7e07488bb3fb2fc35e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ssize_t</type>
        <definition>ssize_t gfal_setfilchg</definition>
        <argsstring>(int, const void *, size_t)</argsstring>
        <name>gfal_setfilchg</name>
        <param>
          <type>int</type>
        </param>
        <param>
          <type>const void *</type>
        </param>
        <param>
          <type>size_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/doc/src/POSIX_API.c" line="160"/>
      </memberdef>
      <memberdef kind="function" id="group__posix__group_1gdeb4c6cc47f507da3e3b498374e308fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gfal_unlink</definition>
        <argsstring>(const char *)</argsstring>
        <name>gfal_unlink</name>
        <param>
          <type>const char *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/doc/src/POSIX_API.c" line="162"/>
      </memberdef>
      <memberdef kind="function" id="group__posix__group_1g00c2d64894ae81c05846b06c84727ae9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ssize_t</type>
        <definition>ssize_t gfal_write</definition>
        <argsstring>(int, const void *, size_t)</argsstring>
        <name>gfal_write</name>
        <param>
          <type>int</type>
        </param>
        <param>
          <type>const void *</type>
        </param>
        <param>
          <type>size_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/doc/src/POSIX_API.c" line="164"/>
      </memberdef>
      <memberdef kind="function" id="group__posix__group_1g39c7d0b6d366fdb0f218439ed3c3bb37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>off64_t</type>
        <definition>off64_t gfal_lseek64</definition>
        <argsstring>(int, off64_t, int)</argsstring>
        <name>gfal_lseek64</name>
        <param>
          <type>int</type>
        </param>
        <param>
          <type>off64_t</type>
        </param>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/doc/src/POSIX_API.c" line="166"/>
      </memberdef>
      <memberdef kind="function" id="group__posix__group_1g347f867802a33bc04fdfb769da857103" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gfal_lstat</definition>
        <argsstring>(const char *, struct stat *)</argsstring>
        <name>gfal_lstat</name>
        <param>
          <type>const char *</type>
        </param>
        <param>
          <type>struct stat *</type>
        </param>
        <briefdescription>
<para>gfal_lstat is identical to <ref refid="group__posix__group_1g1d8c86d522d5dd26ee7ddcd9c6925964" kindref="member">gfal_stat</ref>  except for symbolic links. In this case, the link itself is statted and not followed. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/doc/src/POSIX_API.c" line="168" bodyfile="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" bodystart="127" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="group__posix__group_1g739ca4985a67e0fc4fc253f42df2638c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gfal_lstat64</definition>
        <argsstring>(const char *, struct stat64 *)</argsstring>
        <name>gfal_lstat64</name>
        <param>
          <type>const char *</type>
        </param>
        <param>
          <type>struct stat64 *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/doc/src/POSIX_API.c" line="170"/>
      </memberdef>
      <memberdef kind="function" id="group__posix__group_1g1d8c86d522d5dd26ee7ddcd9c6925964" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gfal_stat</definition>
        <argsstring>(const char *, struct stat *)</argsstring>
        <name>gfal_stat</name>
        <param>
          <type>const char *</type>
          <defname>path</defname>
        </param>
        <param>
          <type>struct stat *</type>
          <defname>buf</defname>
        </param>
        <briefdescription>
<para>informations about a file These functions return information about a file. No permissions are required on the file itself, but — in the case of stat() and lstat() — execute (search) permission is required on all of the directories in path that lead to the file. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>: path of a file. Can be a SURL, a Catalog URL or a guid </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buff</parametername>
</parameternamelist>
<parameterdescription>
<para>: pointer to an allocated struct stat </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>return 0 if success else -1 and errno is set, call <ref refid="gfal__posix__ng_8c_157ced6eae7afd2d0413988da02fe0373" kindref="member">gfal_posix_check_error()</ref>  to check it</para></simplesect>
<itemizedlist>
<listitem><para>ERRNO list : <linebreak/>
<itemizedlist>
<listitem><para>usual errors:<itemizedlist>
<listitem><para>ENOENT: The named file/directory does not exist.</para></listitem><listitem><para>EACCES: Write perimission is denied for newpath or oldpath, or, search permission is denied for one of the directories in the path prefix of oldpath or newpath, or oldpath is a directory and does not allow write permission (needed to update the .. entry)</para></listitem><listitem><para>EFAULT: oldpath or newpath is a NULL pointer.</para></listitem><listitem><para>ENOTDIR: A component of path prefix is not a directory.</para></listitem><listitem><para>ECOMM: Communication error</para></listitem><listitem><para>EPROTONOSUPPORT: oldpath or newpath has a syntax error or the protocol speficied is not supported</para></listitem><listitem><para>EINVAL: oldpath or newpath has an invalid syntax . </para></listitem></itemizedlist>
</para></listitem></itemizedlist>
</para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/doc/src/POSIX_API.c" line="172" bodyfile="/home/adevress/myworkspace/gfal/src/posix/gfal_posix_ng.c" bodystart="118" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="group__posix__group_1gb40e2d23618763284ab4a1fb1a06a880" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gfal_stat64</definition>
        <argsstring>(const char *, struct stat64 *)</argsstring>
        <name>gfal_stat64</name>
        <param>
          <type>const char *</type>
        </param>
        <param>
          <type>struct stat64 *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/doc/src/POSIX_API.c" line="174"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
