<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.4.7">
  <compounddef id="gfal__test____protocol__list__handling_8c" kind="file">
    <compoundname>gfal_test__protocol_list_handling.c</compoundname>
    <includes refid="srm__dependencies_8h" local="yes">srm_dependencies.h</includes>
    <includes local="yes">srm2_2_ifce.h</includes>
    <includes refid="gfal__api_8h" local="yes">gfal_api.h</includes>
    <includes local="no">assert.h</includes>
    <includes refid="gfal__testsuite_8h" local="yes">gfal_testsuite.h</includes>
    <incdepgraph>
      <node id="267">
        <label>sys/stat.h</label>
      </node>
      <node id="272">
        <label>assert.h</label>
      </node>
      <node id="275">
        <label>stdlib.h</label>
      </node>
      <node id="269">
        <label>gfal_types.h</label>
        <link refid="gfal__types_8h-source"/>
        <childnode refid="265" relation="include">
        </childnode>
        <childnode refid="266" relation="include">
        </childnode>
        <childnode refid="267" relation="include">
        </childnode>
        <childnode refid="270" relation="include">
        </childnode>
        <childnode refid="271" relation="include">
        </childnode>
      </node>
      <node id="273">
        <label>gfal_testsuite.h</label>
        <link refid="gfal__testsuite_8h-source"/>
        <childnode refid="274" relation="include">
        </childnode>
        <childnode refid="275" relation="include">
        </childnode>
      </node>
      <node id="264">
        <label>gfal_api.h</label>
        <link refid="gfal__api_8h-source"/>
        <childnode refid="265" relation="include">
        </childnode>
        <childnode refid="266" relation="include">
        </childnode>
        <childnode refid="267" relation="include">
        </childnode>
        <childnode refid="268" relation="include">
        </childnode>
        <childnode refid="269" relation="include">
        </childnode>
      </node>
      <node id="270">
        <label>gfal_srm_ifce_types.h</label>
      </node>
      <node id="262">
        <label>srm_dependencies.h</label>
        <link refid="srm__dependencies_8h-source"/>
      </node>
      <node id="265">
        <label>sys/types.h</label>
      </node>
      <node id="271">
        <label>unistd.h</label>
      </node>
      <node id="268">
        <label>gfal_constants.h</label>
        <link refid="gfal__constants_8h-source"/>
      </node>
      <node id="261">
        <label>/home/adevress/myworkspace/gfal/src/gfal_test__protocol_list_handling.c</label>
        <link refid="gfal_test__protocol_list_handling.c"/>
        <childnode refid="262" relation="include">
        </childnode>
        <childnode refid="263" relation="include">
        </childnode>
        <childnode refid="264" relation="include">
        </childnode>
        <childnode refid="272" relation="include">
        </childnode>
        <childnode refid="273" relation="include">
        </childnode>
      </node>
      <node id="274">
        <label>stdio.h</label>
      </node>
      <node id="263">
        <label>srm2_2_ifce.h</label>
      </node>
      <node id="266">
        <label>dirent.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="gfal__test____protocol__list__handling_8c_1d15255ea3aa0b79cc3bfb04991813ef2" prot="public" static="no">
        <name>__CALL_TEST</name>
        <param><defname>test</defname></param>
        <initializer>printf(&quot;\nTest group: %s\n&quot;, #test); \
    res = (test); \
    if (!res) \
        return res;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/gfal_test__protocol_list_handling.c" line="37" bodyfile="/home/adevress/myworkspace/gfal/src/gfal_test__protocol_list_handling.c" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gfal__test____protocol__list__handling_8c_19a5c439649d57bd317b7eaa215658a1d" prot="public" static="no">
        <name>NUMBER_OF_FILES</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/gfal_test__protocol_list_handling.c" line="64" bodyfile="/home/adevress/myworkspace/gfal/src/gfal_test__protocol_list_handling.c" bodystart="64" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="gfal__test____protocol__list__handling_8c_1f47ef4c0a69bbc8c10c5b843fa828458" prot="public" static="no">
        <type>enum _protocol_list_scenario_type</type>
        <definition>typedef enum _protocol_list_scenario_type  _protocol_list_scenario_type_t</definition>
        <argsstring></argsstring>
        <name>_protocol_list_scenario_type_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/gfal_test__protocol_list_handling.c" line="44"/>
      </memberdef>
      <memberdef kind="typedef" id="gfal__test____protocol__list__handling_8c_18e50fecf9ed42e6db740aece69f1fbc6" prot="public" static="no">
        <type>int(*)</type>
        <definition>typedef int(*) srmv2_fv_type(int, const char **, const char *, int, const char *, char **, char **, struct srmv2_pinfilestatus **, char *, int, int)</definition>
        <argsstring>(int, const char **, const char *, int, const char *, char **, char **, struct srmv2_pinfilestatus **, char *, int, int)</argsstring>
        <name>srmv2_fv_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/gfal_test__protocol_list_handling.c" line="60" bodyfile="/home/adevress/myworkspace/gfal/src/gfal_test__protocol_list_handling.c" bodystart="59" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="gfal__test____protocol__list__handling_8c_17d77c34ff1538e32972b9b13c9b537dd" prot="public" static="no">
        <name>_protocol_list_scenario_type</name>
        <enumvalue id="gfal__test____protocol__list__handling_8c_17d77c34ff1538e32972b9b13c9b537dd62100058d9cced9fcbdfec68f40869f8" prot="public">
          <name>E_UNSUPPORTED_PROTOCOL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="gfal__test____protocol__list__handling_8c_17d77c34ff1538e32972b9b13c9b537dd58edcc6876c17d4452c53f273abaf9a8" prot="public">
          <name>E_EMPTY_LIST</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="gfal__test____protocol__list__handling_8c_17d77c34ff1538e32972b9b13c9b537dd1f6acc5373c81d76ccc7ad81b057b5fa" prot="public">
          <name>E_UNUSED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/gfal_test__protocol_list_handling.c" line="40" bodyfile="/home/adevress/myworkspace/gfal/src/gfal_test__protocol_list_handling.c" bodystart="40" bodyend="44"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="gfal__test____protocol__list__handling_8c_1713239c327ba7539db7c13f0bab54fde" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void _prepare_response_common</definition>
        <argsstring>(struct soap *soap, struct srm2__TReturnStatus **status, int *remainingTotalRequestTime, int *__sizestatusArray)</argsstring>
        <name>_prepare_response_common</name>
        <param>
          <type>struct soap *</type>
          <declname>soap</declname>
        </param>
        <param>
          <type>struct srm2__TReturnStatus **</type>
          <declname>status</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>remainingTotalRequestTime</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>__sizestatusArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/gfal_test__protocol_list_handling.c" line="74" bodyfile="/home/adevress/myworkspace/gfal/src/gfal_test__protocol_list_handling.c" bodystart="69" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="gfal__test____protocol__list__handling_8c_1959f551b7513c908969490849c6a4301" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void _prepare_response_prepare_to_get</definition>
        <argsstring>(struct soap *soap, struct srm2__srmPrepareToGetResponse_ *rep)</argsstring>
        <name>_prepare_response_prepare_to_get</name>
        <param>
          <type>struct soap *</type>
          <declname>soap</declname>
        </param>
        <param>
          <type>struct srm2__srmPrepareToGetResponse_ *</type>
          <declname>rep</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/gfal_test__protocol_list_handling.c" line="88" bodyfile="/home/adevress/myworkspace/gfal/src/gfal_test__protocol_list_handling.c" bodystart="85" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="gfal__test____protocol__list__handling_8c_1d0eaf2d70d6371eea2e53f21f6f65986" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void _prepare_response_bring_online</definition>
        <argsstring>(struct soap *soap, struct srm2__srmBringOnlineResponse_ *rep)</argsstring>
        <name>_prepare_response_bring_online</name>
        <param>
          <type>struct soap *</type>
          <declname>soap</declname>
        </param>
        <param>
          <type>struct srm2__srmBringOnlineResponse_ *</type>
          <declname>rep</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/gfal_test__protocol_list_handling.c" line="113" bodyfile="/home/adevress/myworkspace/gfal/src/gfal_test__protocol_list_handling.c" bodystart="111" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="gfal__test____protocol__list__handling_8c_10a904868a4027c32310c5173d3c89ec1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void _prepare_response_prepare_to_put</definition>
        <argsstring>(struct soap *soap, struct srm2__srmPrepareToPutResponse_ *rep)</argsstring>
        <name>_prepare_response_prepare_to_put</name>
        <param>
          <type>struct soap *</type>
          <declname>soap</declname>
        </param>
        <param>
          <type>struct srm2__srmPrepareToPutResponse_ *</type>
          <declname>rep</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/gfal_test__protocol_list_handling.c" line="138" bodyfile="/home/adevress/myworkspace/gfal/src/gfal_test__protocol_list_handling.c" bodystart="136" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="gfal__test____protocol__list__handling_8c_1552395c9dc62fd2229418257e04650c3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int _caller_play_scenarios_prepare_to_get</definition>
        <argsstring>(struct soap *soap, const char *srm_endpoint, const char *srmfunc, struct srm2__srmPrepareToGetRequest *req, struct srm2__srmPrepareToGetResponse_ *rep)</argsstring>
        <name>_caller_play_scenarios_prepare_to_get</name>
        <param>
          <type>struct soap *</type>
          <declname>soap</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>srm_endpoint</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>srmfunc</declname>
        </param>
        <param>
          <type>struct srm2__srmPrepareToGetRequest *</type>
          <declname>req</declname>
        </param>
        <param>
          <type>struct srm2__srmPrepareToGetResponse_ *</type>
          <declname>rep</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/gfal_test__protocol_list_handling.c" line="168" bodyfile="/home/adevress/myworkspace/gfal/src/gfal_test__protocol_list_handling.c" bodystart="164" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="gfal__test____protocol__list__handling_8c_1fd477d1c1593c19fde3baf18ced5abd9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int _caller_play_scenarios_bring_online</definition>
        <argsstring>(struct soap *soap, const char *srm_endpoint, const char *srmfunc, struct srm2__srmBringOnlineRequest *req, struct srm2__srmBringOnlineResponse_ *rep)</argsstring>
        <name>_caller_play_scenarios_bring_online</name>
        <param>
          <type>struct soap *</type>
          <declname>soap</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>srm_endpoint</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>srmfunc</declname>
        </param>
        <param>
          <type>struct srm2__srmBringOnlineRequest *</type>
          <declname>req</declname>
        </param>
        <param>
          <type>struct srm2__srmBringOnlineResponse_ *</type>
          <declname>rep</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/gfal_test__protocol_list_handling.c" line="207" bodyfile="/home/adevress/myworkspace/gfal/src/gfal_test__protocol_list_handling.c" bodystart="203" bodyend="235"/>
      </memberdef>
      <memberdef kind="function" id="gfal__test____protocol__list__handling_8c_19e1df523ad64802579a85a3884d941b7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int _caller_play_scenarios_prepare_to_put</definition>
        <argsstring>(struct soap *soap, const char *srm_endpoint, const char *srmfunc, struct srm2__srmPrepareToPutRequest *req, struct srm2__srmPrepareToPutResponse_ *rep)</argsstring>
        <name>_caller_play_scenarios_prepare_to_put</name>
        <param>
          <type>struct soap *</type>
          <declname>soap</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>srm_endpoint</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>srmfunc</declname>
        </param>
        <param>
          <type>struct srm2__srmPrepareToPutRequest *</type>
          <declname>req</declname>
        </param>
        <param>
          <type>struct srm2__srmPrepareToPutResponse_ *</type>
          <declname>rep</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/gfal_test__protocol_list_handling.c" line="246" bodyfile="/home/adevress/myworkspace/gfal/src/gfal_test__protocol_list_handling.c" bodystart="242" bodyend="274"/>
      </memberdef>
      <memberdef kind="function" id="gfal__test____protocol__list__handling_8c_1ba1409fdd94e5c3973785a26e443d59d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void _setup_srm_callers</definition>
        <argsstring>()</argsstring>
        <name>_setup_srm_callers</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/gfal_test__protocol_list_handling.c" line="278" bodyfile="/home/adevress/myworkspace/gfal/src/gfal_test__protocol_list_handling.c" bodystart="277" bodyend="282"/>
      </memberdef>
      <memberdef kind="function" id="gfal__test____protocol__list__handling_8c_16dcf2c561cc4229769ae2191d3d37a3d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>static char* _test_protocol_list</definition>
        <argsstring>(srmv2_fv_type fv)</argsstring>
        <name>_test_protocol_list</name>
        <param>
          <type>srmv2_fv_type</type>
          <declname>fv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/gfal_test__protocol_list_handling.c" line="301" bodyfile="/home/adevress/myworkspace/gfal/src/gfal_test__protocol_list_handling.c" bodystart="300" bodyend="327"/>
      </memberdef>
      <memberdef kind="function" id="gfal__test____protocol__list__handling_8c_183c2de1b2a19d17eeb8bc32aee99c307" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>static char* _test_srmv2_turlsfromsurls_put</definition>
        <argsstring>()</argsstring>
        <name>_test_srmv2_turlsfromsurls_put</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/gfal_test__protocol_list_handling.c" line="331" bodyfile="/home/adevress/myworkspace/gfal/src/gfal_test__protocol_list_handling.c" bodystart="330" bodyend="361"/>
      </memberdef>
      <memberdef kind="function" id="gfal__test____protocol__list__handling_8c_16bb5daec85cd1372f3d8c78cf604733c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>static char* _test_gfal_turlsfromsurls</definition>
        <argsstring>()</argsstring>
        <name>_test_gfal_turlsfromsurls</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/gfal_test__protocol_list_handling.c" line="364" bodyfile="/home/adevress/myworkspace/gfal/src/gfal_test__protocol_list_handling.c" bodystart="363" bodyend="421"/>
      </memberdef>
      <memberdef kind="function" id="gfal__test____protocol__list__handling_8c_1ceb9d3ac323586601033120e81868e9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* gfal_test__protocol_list_handling</definition>
        <argsstring>()</argsstring>
        <name>gfal_test__protocol_list_handling</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/gfal_test__protocol_list_handling.c" line="424" bodyfile="/home/adevress/myworkspace/gfal/src/gfal_test__protocol_list_handling.c" bodystart="423" bodyend="436"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="gfal__test____protocol__list__handling_8c_1ca2256c3ac2fdfae728815a6e8ca226a" prot="public" static="yes" mutable="no">
        <type>_protocol_list_scenario_type_t</type>
        <definition>_protocol_list_scenario_type_t _protocol_list_scenario</definition>
        <argsstring></argsstring>
        <name>_protocol_list_scenario</name>
        <initializer> E_UNUSED</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/gfal_test__protocol_list_handling.c" line="51" bodyfile="/home/adevress/myworkspace/gfal/src/gfal_test__protocol_list_handling.c" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gfal__test____protocol__list__handling_8c_1a7a833f08b36e1b674651fa1b151b018" prot="public" static="yes" mutable="no">
        <type>char *</type>
        <definition>char* _unsupported_protocol[]</definition>
        <argsstring>[]</argsstring>
        <name>_unsupported_protocol</name>
        <initializer> {&quot;unsupported_protocol&quot;, NULL}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/gfal_test__protocol_list_handling.c" line="54" bodyfile="/home/adevress/myworkspace/gfal/src/gfal_test__protocol_list_handling.c" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gfal__test____protocol__list__handling_8c_17acf9fb1803f9a83773c9954dffd3455" prot="public" static="yes" mutable="no">
        <type>char *</type>
        <definition>char* mock_surls[]</definition>
        <argsstring>[]</argsstring>
        <name>mock_surls</name>
        <initializer> {&quot;srm://fake_surl/&quot;}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/gfal_test__protocol_list_handling.c" line="285" bodyfile="/home/adevress/myworkspace/gfal/src/gfal_test__protocol_list_handling.c" bodystart="285" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gfal__test____protocol__list__handling_8c_13e256b21c9448655a5449d8e4d9f5506" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int mock_nbfiles</definition>
        <argsstring></argsstring>
        <name>mock_nbfiles</name>
        <initializer> 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/gfal_test__protocol_list_handling.c" line="286" bodyfile="/home/adevress/myworkspace/gfal/src/gfal_test__protocol_list_handling.c" bodystart="286" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gfal__test____protocol__list__handling_8c_146f6ca43fc73a8ae9d053e99ba94b72a" prot="public" static="yes" mutable="no">
        <type>char *</type>
        <definition>char* mock_srm_endpoint</definition>
        <argsstring></argsstring>
        <name>mock_srm_endpoint</name>
        <initializer> &quot;httpg://fakeendpoint.cern.ch:8443/srm/managerv2&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/gfal_test__protocol_list_handling.c" line="287" bodyfile="/home/adevress/myworkspace/gfal/src/gfal_test__protocol_list_handling.c" bodystart="287" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gfal__test____protocol__list__handling_8c_1875dc43ab08e297062f21be93988a5e1" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int mock_desiredpintime</definition>
        <argsstring></argsstring>
        <name>mock_desiredpintime</name>
        <initializer> 10</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/gfal_test__protocol_list_handling.c" line="288" bodyfile="/home/adevress/myworkspace/gfal/src/gfal_test__protocol_list_handling.c" bodystart="288" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gfal__test____protocol__list__handling_8c_1028f8ad8da16e7a4b43edecdf82f7781" prot="public" static="yes" mutable="no">
        <type>const char *</type>
        <definition>const char* mock_spacetokendesc</definition>
        <argsstring></argsstring>
        <name>mock_spacetokendesc</name>
        <initializer> NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/gfal_test__protocol_list_handling.c" line="289" bodyfile="/home/adevress/myworkspace/gfal/src/gfal_test__protocol_list_handling.c" bodystart="289" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gfal__test____protocol__list__handling_8c_163269804733cb84e1b5555348c36a52c" prot="public" static="yes" mutable="no">
        <type>char **</type>
        <definition>char** mock_reqtoken</definition>
        <argsstring></argsstring>
        <name>mock_reqtoken</name>
        <initializer> NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/gfal_test__protocol_list_handling.c" line="290" bodyfile="/home/adevress/myworkspace/gfal/src/gfal_test__protocol_list_handling.c" bodystart="290" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gfal__test____protocol__list__handling_8c_1d213f06e98dd73c93301ffc3603f836c" prot="public" static="yes" mutable="no">
        <type>struct srmv2_pinfilestatus *</type>
        <definition>struct srmv2_pinfilestatus* mock_pinfilestatus[3]</definition>
        <argsstring>[3]</argsstring>
        <name>mock_pinfilestatus</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/gfal_test__protocol_list_handling.c" line="291" bodyfile="/home/adevress/myworkspace/gfal/src/gfal_test__protocol_list_handling.c" bodystart="291" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gfal__test____protocol__list__handling_8c_1e5088a02c11c88ae3a30f7a35b176f1b" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int errbufsz</definition>
        <argsstring></argsstring>
        <name>errbufsz</name>
        <initializer> 1024</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/gfal_test__protocol_list_handling.c" line="292" bodyfile="/home/adevress/myworkspace/gfal/src/gfal_test__protocol_list_handling.c" bodystart="292" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gfal__test____protocol__list__handling_8c_117df69aee58dc0b1f016316b330e35e5" prot="public" static="yes" mutable="no">
        <type>char</type>
        <definition>char errbuf[1024]</definition>
        <argsstring>[1024]</argsstring>
        <name>errbuf</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/gfal_test__protocol_list_handling.c" line="293" bodyfile="/home/adevress/myworkspace/gfal/src/gfal_test__protocol_list_handling.c" bodystart="293" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gfal__test____protocol__list__handling_8c_1af56fe5ae727c20d41d3ca020d86d2fa" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int mock_timeout</definition>
        <argsstring></argsstring>
        <name>mock_timeout</name>
        <initializer> 100</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/gfal_test__protocol_list_handling.c" line="294" bodyfile="/home/adevress/myworkspace/gfal/src/gfal_test__protocol_list_handling.c" bodystart="294" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Authors:<sp/>Zsolt<sp/>Molnar<sp/>&lt;zsolt.molnar@cern.ch,<sp/>http://www.zsoltmolnar.hu&gt;</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>Members<sp/>of<sp/>the<sp/>EGEE<sp/>Collaboration.<sp/>2004.</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>See<sp/>http://www.eu-egee.org/partners/<sp/>for<sp/>details<sp/>on<sp/>the<sp/>copyright<sp/>holders.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>Test<sp/>if<sp/>the<sp/>logic<sp/>recognizes<sp/>unknown<sp/>protocols<sp/>of<sp/>wrongly<sp/>formatted</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>protocol<sp/>lists<sp/>in<sp/>the<sp/>transfetParameters<sp/>property<sp/>of<sp/>PrepareToGet.</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;srm_dependencies.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;srm2_2_ifce.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gfal_api.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;assert.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gfal_testsuite.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>WARNING:<sp/>the<sp/>test<sp/>functions<sp/>may<sp/>have<sp/>memory<sp/>leaks.<sp/>Due<sp/>to<sp/>the<sp/>nature<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>test<sp/>application,<sp/>they<sp/>are<sp/>not<sp/>handled<sp/>elaborately,<sp/>do<sp/>not<sp/>worry<sp/>if<sp/>you<sp/>find</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>some...<sp/>They<sp/>do<sp/>not<sp/>affect<sp/>the<sp/>test<sp/>execution<sp/>and<sp/>production.*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__CALL_TEST(test)<sp/>\</highlight></codeline>
<codeline lineno="34"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>printf(&quot;\nTest<sp/>group:<sp/>%s\n&quot;,<sp/>#test);<sp/>\</highlight></codeline>
<codeline lineno="35"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>res<sp/>=<sp/>(test);<sp/>\</highlight></codeline>
<codeline lineno="36"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(!res)<sp/>\</highlight></codeline>
<codeline lineno="37"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>res;</highlight></codeline>
<codeline lineno="38"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>The<sp/>actual<sp/>scenario<sp/>to<sp/>te<sp/>be<sp/>tested<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>_protocol_list_scenario_type<sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>E_UNSUPPORTED_PROTOCOL,</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>E_EMPTY_LIST,</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>E_UNUSED</highlight></codeline>
<codeline lineno="44"><highlight class="normal">}<sp/>_protocol_list_scenario_type_t;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>The<sp/>variable<sp/>controls<sp/>the<sp/>actual<sp/>scenario.<sp/>The<sp/>test<sp/>function<sp/>sets<sp/>it,</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*<sp/>then<sp/>calls<sp/>the<sp/>function<sp/>to<sp/>be<sp/>tested.<sp/>Deep<sp/>inside,<sp/>the<sp/>function<sp/>will<sp/>call</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*<sp/>the<sp/>(replaced)<sp/>SOAP<sp/>caller.<sp/>The<sp/>mock<sp/>SOAP<sp/>caller<sp/>prepares<sp/>different<sp/>SRM</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*<sp/>responses<sp/>and<sp/>return<sp/>it,<sp/>without<sp/>the<sp/>physical<sp/>gSOAP/network<sp/>operation.</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/>*<sp/>The<sp/>response<sp/>content<sp/>is<sp/>controlled<sp/>by<sp/>this<sp/>variable<sp/>(the<sp/>scenario).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>_protocol_list_scenario_type_t<sp/>_protocol_list_scenario<sp/>=<sp/>E_UNUSED;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>A<sp/>fixture<sp/>with<sp/>a<sp/>protocol<sp/>list<sp/>containing<sp/>an<sp/>unsupported<sp/>protocol<sp/>name<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>_unsupported_protocol[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;unsupported_protocol&quot;</highlight><highlight class="normal">,<sp/>NULL};</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Signature<sp/>for<sp/>srmv2_turlsfromsurls_get,<sp/>srmv2_gete,<sp/>srmv2_prestagee,</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/>*<sp/>srmv2_bringonline.<sp/>As<sp/>the<sp/>signatures<sp/>are<sp/>common,<sp/>we<sp/>can<sp/>reuse<sp/>the<sp/>same</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/>*<sp/>test<sp/>function<sp/>code.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int<sp/>(*srmv2_fv_type)(int,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/>int,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**,<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">srmv2_pinfilestatus<sp/>**,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/>int,<sp/>int);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>There<sp/>is<sp/>only<sp/>1<sp/>file<sp/>in<sp/>the<sp/>requests,<sp/>and<sp/>only<sp/>1<sp/>corresponding<sp/>file<sp/>status<sp/>in</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/>*<sp/>the<sp/>responses.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NUMBER_OF_FILES<sp/>1</highlight></codeline>
<codeline lineno="65"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Set<sp/>up<sp/>the<sp/>common<sp/>part<sp/>of<sp/>the<sp/>SRM<sp/>responses.<sp/>The<sp/>common<sp/>part:<sp/>all<sp/>the<sp/>tested</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/>*<sp/>SRM<sp/>responses<sp/>have<sp/>the<sp/>same<sp/>fields,<sp/>and<sp/>their<sp/>values<sp/>are<sp/>the<sp/>same<sp/>in<sp/>case<sp/>of</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/>*<sp/>all<sp/>tests/scenarios.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>_prepare_response_common(</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>soap*<sp/>soap,</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>srm2__TReturnStatus<sp/>**<sp/>status,</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*remainingTotalRequestTime,</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>__sizestatusArray)</highlight></codeline>
<codeline lineno="74"><highlight class="normal">{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(status);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(__sizestatusArray);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>*status<sp/>=<sp/>soap_malloc(soap,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>srm2__TReturnStatus));</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>(*status)-&gt;explanation<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>remainingTotalRequestTime<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>*(__sizestatusArray)<sp/>=<sp/>NUMBER_OF_FILES;</highlight></codeline>
<codeline lineno="81"><highlight class="normal">}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Create<sp/>the<sp/>SRM<sp/>response<sp/>for<sp/>the<sp/>srmPrepareToGet<sp/>call,<sp/>according<sp/>to<sp/>the</highlight></codeline>
<codeline lineno="84"><highlight class="comment"><sp/>*<sp/>actual<sp/>test<sp/>scenario.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>_prepare_response_prepare_to_get(</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>soap*<sp/>soap,</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>srm2__srmPrepareToGetResponse_<sp/>*<sp/>rep)</highlight></codeline>
<codeline lineno="88"><highlight class="normal">{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">srm2__TGetRequestFileStatus<sp/>*<sp/>mock_statuses[NUMBER_OF_FILES];</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(soap);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(rep);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>rep-&gt;srmPrepareToGetResponse<sp/>=<sp/>soap_malloc(</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>soap,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>srm2__srmPrepareToGetResponse));</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>rep-&gt;srmPrepareToGetResponse-&gt;arrayOfFileStatuses<sp/>=<sp/>soap_malloc(</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>soap,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>srm2__ArrayOfTGetRequestFileStatus));</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>rep-&gt;srmPrepareToGetResponse-&gt;arrayOfFileStatuses-&gt;statusArray<sp/>=<sp/>mock_statuses;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>_prepare_response_common(</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>soap,</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;(rep-&gt;srmPrepareToGetResponse-&gt;returnStatus),</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rep-&gt;srmPrepareToGetResponse-&gt;remainingTotalRequestTime,</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;(rep-&gt;srmPrepareToGetResponse-&gt;arrayOfFileStatuses-&gt;__sizestatusArray)</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="107"><highlight class="normal">}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Create<sp/>the<sp/>SRM<sp/>response<sp/>for<sp/>the<sp/>srmBringOnline<sp/>call,<sp/>according<sp/>to<sp/>the</highlight></codeline>
<codeline lineno="110"><highlight class="comment"><sp/>*<sp/>actual<sp/>test<sp/>scenario.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>_prepare_response_bring_online(</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>soap*<sp/>soap,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>srm2__srmBringOnlineResponse_<sp/>*<sp/>rep)</highlight></codeline>
<codeline lineno="113"><highlight class="normal">{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">srm2__TBringOnlineRequestFileStatus<sp/>*<sp/>mock_statuses[NUMBER_OF_FILES];</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(soap);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(rep);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>rep-&gt;srmBringOnlineResponse<sp/>=<sp/>soap_malloc(</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>soap,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>srm2__srmBringOnlineResponse));</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>rep-&gt;srmBringOnlineResponse-&gt;arrayOfFileStatuses<sp/>=<sp/>soap_malloc(</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>soap,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>srm2__ArrayOfTBringOnlineRequestFileStatus));</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>rep-&gt;srmBringOnlineResponse-&gt;arrayOfFileStatuses-&gt;statusArray<sp/>=<sp/>mock_statuses;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>_prepare_response_common(</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>soap,</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;(rep-&gt;srmBringOnlineResponse-&gt;returnStatus),</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rep-&gt;srmBringOnlineResponse-&gt;remainingTotalRequestTime,</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;(rep-&gt;srmBringOnlineResponse-&gt;arrayOfFileStatuses-&gt;__sizestatusArray)</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="132"><highlight class="normal">}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Create<sp/>the<sp/>SRM<sp/>response<sp/>for<sp/>the<sp/>srmPrepareToPut<sp/>call,<sp/>according<sp/>to<sp/>the</highlight></codeline>
<codeline lineno="135"><highlight class="comment"><sp/>*<sp/>actual<sp/>test<sp/>scenario.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>_prepare_response_prepare_to_put(</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>soap*<sp/>soap,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>srm2__srmPrepareToPutResponse_<sp/>*<sp/>rep)</highlight></codeline>
<codeline lineno="138"><highlight class="normal">{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">srm2__TPutRequestFileStatus<sp/>*<sp/>mock_statuses[NUMBER_OF_FILES];</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(soap);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(rep);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>rep-&gt;srmPrepareToPutResponse<sp/>=<sp/>soap_malloc(</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>soap,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>srm2__srmPrepareToPutResponse));</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>rep-&gt;srmPrepareToPutResponse-&gt;arrayOfFileStatuses<sp/>=<sp/>soap_malloc(</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>soap,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>srm2__ArrayOfTPutRequestFileStatus));</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>rep-&gt;srmPrepareToPutResponse-&gt;arrayOfFileStatuses-&gt;statusArray<sp/>=<sp/>mock_statuses;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>_prepare_response_common(</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>soap,</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;(rep-&gt;srmPrepareToPutResponse-&gt;returnStatus),</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rep-&gt;srmPrepareToPutResponse-&gt;remainingTotalRequestTime,</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;(rep-&gt;srmPrepareToPutResponse-&gt;arrayOfFileStatuses-&gt;__sizestatusArray)</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="157"><highlight class="normal">}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>The<sp/>dependency<sp/>injection<sp/>comes<sp/>here.<sp/>This<sp/>function<sp/>replaces<sp/>the<sp/>production</highlight></codeline>
<codeline lineno="160"><highlight class="comment"><sp/>*<sp/>version<sp/>SOAP<sp/>calls<sp/>so<sp/>that<sp/>no<sp/>network<sp/>operation,<sp/>server,<sp/>etc<sp/>be<sp/>required.</highlight></codeline>
<codeline lineno="161"><highlight class="comment"><sp/>*<sp/>The<sp/>function<sp/>directly<sp/>produces<sp/>and<sp/>returns<sp/>the<sp/>SRM<sp/>response<sp/>objects.</highlight></codeline>
<codeline lineno="162"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="163"><highlight class="comment"><sp/>*<sp/>This<sp/>is<sp/>the<sp/>&quot;SOAP<sp/>call&quot;<sp/>for<sp/>the<sp/>srmPrepareToGet<sp/>operation.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>_caller_play_scenarios_prepare_to_get(</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>soap<sp/>*<sp/>soap,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>srm_endpoint,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>srmfunc,</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>srm2__srmPrepareToGetRequest<sp/>*<sp/>req,</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>srm2__srmPrepareToGetResponse_<sp/>*<sp/>rep)</highlight></codeline>
<codeline lineno="168"><highlight class="normal">{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>_prepare_response_prepare_to_get(soap,<sp/>rep);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(_protocol_list_scenario)<sp/>{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>E_EMPTY_LIST:</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GFAL_TEST_EQUAL(0,<sp/>req-&gt;transferParameters-&gt;arrayOfTransferProtocols);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Pretend<sp/>that<sp/>the<sp/>call<sp/>itself<sp/>is<sp/>successful,<sp/>and<sp/>do<sp/>nothing<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rep-&gt;srmPrepareToGetResponse-&gt;returnStatus-&gt;statusCode<sp/>=<sp/>SRM_USCORESUCCESS;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SOAP_OK;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>E_UNSUPPORTED_PROTOCOL:</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>if<sp/>the<sp/>function<sp/>filled<sp/>in<sp/>the<sp/>appropriate<sp/>fields<sp/>of<sp/>the<sp/>request<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GFAL_TEST_EQUAL(1,</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>req-&gt;transferParameters-&gt;arrayOfTransferProtocols-&gt;__sizestringArray);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GFAL_TEST_ASSERT(</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcmp(req-&gt;transferParameters-&gt;arrayOfTransferProtocols-&gt;stringArray[0],</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_unsupported_protocol[0])<sp/>==<sp/>0</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>In<sp/>case<sp/>of<sp/>unsupported<sp/>protocol,<sp/>the<sp/>return<sp/>status<sp/>is<sp/>SRM_NOT_SUPPORTED<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rep-&gt;srmPrepareToGetResponse-&gt;returnStatus-&gt;statusCode<sp/>=<sp/>SRM_USCORENOT_USCORESUPPORTED;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rep-&gt;srmPrepareToGetResponse-&gt;arrayOfFileStatuses-&gt;__sizestatusArray<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SOAP_OK;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(0);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="196"><highlight class="normal">}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>The<sp/>dependency<sp/>injection<sp/>comes<sp/>here.<sp/>This<sp/>function<sp/>replaces<sp/>the<sp/>production</highlight></codeline>
<codeline lineno="199"><highlight class="comment"><sp/>*<sp/>version<sp/>SOAP<sp/>calls<sp/>so<sp/>that<sp/>no<sp/>network<sp/>operation,<sp/>server,<sp/>etc<sp/>be<sp/>required.</highlight></codeline>
<codeline lineno="200"><highlight class="comment"><sp/>*<sp/>The<sp/>function<sp/>directly<sp/>produces<sp/>and<sp/>returns<sp/>the<sp/>SRM<sp/>response<sp/>objects.</highlight></codeline>
<codeline lineno="201"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="202"><highlight class="comment"><sp/>*<sp/>This<sp/>is<sp/>the<sp/>&quot;SOAP<sp/>call&quot;<sp/>for<sp/>the<sp/>srmBringOnline<sp/>operation.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>_caller_play_scenarios_bring_online(</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>soap<sp/>*<sp/>soap,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>srm_endpoint,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>srmfunc,</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>srm2__srmBringOnlineRequest<sp/>*<sp/>req,</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>srm2__srmBringOnlineResponse_<sp/>*<sp/>rep)</highlight></codeline>
<codeline lineno="207"><highlight class="normal">{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>_prepare_response_bring_online(soap,<sp/>rep);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(_protocol_list_scenario)<sp/>{</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>E_EMPTY_LIST:</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GFAL_TEST_EQUAL(0,<sp/>req-&gt;transferParameters-&gt;arrayOfTransferProtocols);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Pretend<sp/>that<sp/>the<sp/>call<sp/>itself<sp/>is<sp/>successful,<sp/>and<sp/>do<sp/>nothing<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rep-&gt;srmBringOnlineResponse-&gt;returnStatus-&gt;statusCode<sp/>=<sp/>SRM_USCORESUCCESS;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SOAP_OK;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>E_UNSUPPORTED_PROTOCOL:</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>if<sp/>the<sp/>function<sp/>filled<sp/>in<sp/>the<sp/>appropriate<sp/>fields<sp/>of<sp/>the<sp/>request<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GFAL_TEST_EQUAL(1,</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>req-&gt;transferParameters-&gt;arrayOfTransferProtocols-&gt;__sizestringArray);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GFAL_TEST_ASSERT(</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcmp(req-&gt;transferParameters-&gt;arrayOfTransferProtocols-&gt;stringArray[0],</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_unsupported_protocol[0])<sp/>==<sp/>0</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>In<sp/>case<sp/>of<sp/>unsupported<sp/>protocol,<sp/>the<sp/>return<sp/>status<sp/>is<sp/>SRM_NOT_SUPPORTED<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rep-&gt;srmBringOnlineResponse-&gt;returnStatus-&gt;statusCode<sp/>=<sp/>SRM_USCORENOT_USCORESUPPORTED;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rep-&gt;srmBringOnlineResponse-&gt;arrayOfFileStatuses-&gt;__sizestatusArray<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SOAP_OK;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(0);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="235"><highlight class="normal">}</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>The<sp/>dependency<sp/>injection<sp/>comes<sp/>here.<sp/>This<sp/>function<sp/>replaces<sp/>the<sp/>production</highlight></codeline>
<codeline lineno="238"><highlight class="comment"><sp/>*<sp/>version<sp/>SOAP<sp/>calls<sp/>so<sp/>that<sp/>no<sp/>network<sp/>operation,<sp/>server,<sp/>etc<sp/>be<sp/>required.</highlight></codeline>
<codeline lineno="239"><highlight class="comment"><sp/>*<sp/>The<sp/>function<sp/>directly<sp/>produces<sp/>and<sp/>returns<sp/>the<sp/>SRM<sp/>response<sp/>objects.</highlight></codeline>
<codeline lineno="240"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="241"><highlight class="comment"><sp/>*<sp/>This<sp/>is<sp/>the<sp/>&quot;SOAP<sp/>call&quot;<sp/>for<sp/>the<sp/>srmPrepareToPut<sp/>operation.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>_caller_play_scenarios_prepare_to_put(</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>soap<sp/>*<sp/>soap,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>srm_endpoint,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>srmfunc,</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>srm2__srmPrepareToPutRequest<sp/>*<sp/>req,</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>srm2__srmPrepareToPutResponse_<sp/>*<sp/>rep)</highlight></codeline>
<codeline lineno="246"><highlight class="normal">{</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>_prepare_response_prepare_to_put(soap,<sp/>rep);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(_protocol_list_scenario)<sp/>{</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>E_EMPTY_LIST:</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GFAL_TEST_EQUAL(0,<sp/>req-&gt;transferParameters-&gt;arrayOfTransferProtocols);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Pretend<sp/>that<sp/>the<sp/>call<sp/>itself<sp/>is<sp/>successful,<sp/>and<sp/>do<sp/>nothing<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rep-&gt;srmPrepareToPutResponse-&gt;returnStatus-&gt;statusCode<sp/>=<sp/>SRM_USCORESUCCESS;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SOAP_OK;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>E_UNSUPPORTED_PROTOCOL:</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>if<sp/>the<sp/>function<sp/>filled<sp/>in<sp/>the<sp/>appropriate<sp/>fields<sp/>of<sp/>the<sp/>request<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GFAL_TEST_EQUAL(1,</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>req-&gt;transferParameters-&gt;arrayOfTransferProtocols-&gt;__sizestringArray);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GFAL_TEST_ASSERT(</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcmp(req-&gt;transferParameters-&gt;arrayOfTransferProtocols-&gt;stringArray[0],</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_unsupported_protocol[0])<sp/>==<sp/>0</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>In<sp/>case<sp/>of<sp/>unsupported<sp/>protocol,<sp/>the<sp/>return<sp/>status<sp/>is<sp/>SRM_NOT_SUPPORTED<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rep-&gt;srmPrepareToPutResponse-&gt;returnStatus-&gt;statusCode<sp/>=<sp/>SRM_USCORENOT_USCORESUPPORTED;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rep-&gt;srmPrepareToPutResponse-&gt;arrayOfFileStatuses-&gt;__sizestatusArray<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SOAP_OK;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(0);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="274"><highlight class="normal">}</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Inject<sp/>the<sp/>dependencies.<sp/>Replace<sp/>the<sp/>SOAP<sp/>callers<sp/>to<sp/>the<sp/>test<sp/>ones.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>_setup_srm_callers()</highlight></codeline>
<codeline lineno="278"><highlight class="normal">{</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>gfal_srm_callers_v2.call_prepare_to_get<sp/>=<sp/>_caller_play_scenarios_prepare_to_get;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>gfal_srm_callers_v2.call_bring_online<sp/>=<sp/>_caller_play_scenarios_bring_online;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>gfal_srm_callers_v2.call_prepare_to_put<sp/>=<sp/>_caller_play_scenarios_prepare_to_put;</highlight></codeline>
<codeline lineno="282"><highlight class="normal">}</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>General<sp/>fixtures<sp/>for<sp/>the<sp/>SRM<sp/>requests*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*mock_surls[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;srm://fake_surl/&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mock_nbfiles<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*mock_srm_endpoint<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;httpg://fakeendpoint.cern.ch:8443/srm/managerv2&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mock_desiredpintime<sp/>=<sp/>10;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*mock_spacetokendesc<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**<sp/>mock_reqtoken<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">srmv2_pinfilestatus<sp/>*<sp/>mock_pinfilestatus[3];</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>errbufsz<sp/>=<sp/>1024;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>errbuf[1024];</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mock_timeout<sp/>=<sp/>100;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Test<sp/>the<sp/>following<sp/>functions<sp/>(they<sp/>have<sp/>same<sp/>signatures,<sp/>so<sp/>they<sp/>can<sp/>be</highlight></codeline>
<codeline lineno="297"><highlight class="comment"><sp/>*<sp/>tested<sp/>in<sp/>a<sp/>generic<sp/>way):</highlight></codeline>
<codeline lineno="298"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="299"><highlight class="comment"><sp/>*<sp/>srmv2_turlsfromsurls_get,<sp/>srmv2_gete,<sp/>srmv2_prestagee,<sp/>srmv2_bringonline<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>_test_protocol_list(srmv2_fv_type<sp/>fv)</highlight></codeline>
<codeline lineno="301"><highlight class="normal">{</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>errno<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>SCENARIO<sp/>1:<sp/>empty<sp/>protocol<sp/>list.<sp/>Call<sp/>must<sp/>be<sp/>OK.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>_protocol_list_scenario<sp/>=<sp/>E_EMPTY_LIST;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>res<sp/>=<sp/>fv(mock_nbfiles,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**)mock_surls,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)mock_srm_endpoint,</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mock_desiredpintime,<sp/>mock_spacetokendesc,</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL,<sp/></highlight><highlight class="comment">/*<sp/>The<sp/>empty<sp/>protocol<sp/>list<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mock_reqtoken,<sp/>mock_pinfilestatus,<sp/>errbuf,<sp/>errbufsz,<sp/>mock_timeout);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>GFAL_TEST_EQUAL(NUMBER_OF_FILES,<sp/>res);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/>GFAL_TEST_EQUAL(0,<sp/>errno);</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/>errno<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/>errbuf[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>SCENARIO<sp/>2:<sp/>Wrong<sp/>protocol<sp/>list.<sp/>Call<sp/>must<sp/>return<sp/>error.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>_protocol_list_scenario<sp/>=<sp/>E_UNSUPPORTED_PROTOCOL;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>res<sp/>=<sp/>fv(mock_nbfiles,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**)mock_surls,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)mock_srm_endpoint,</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mock_desiredpintime,<sp/>mock_spacetokendesc,</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_unsupported_protocol,</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mock_reqtoken,<sp/>mock_pinfilestatus,<sp/>errbuf,<sp/>errbufsz,<sp/>mock_timeout);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/>GFAL_TEST_EQUAL(-1,<sp/>res);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>GFAL_TEST_EQUAL(EOPNOTSUPP,<sp/>errno);</highlight></codeline>
<codeline lineno="327"><highlight class="normal">}</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Test<sp/>the<sp/>srmv2_turlsfromsurls_put<sp/>function.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>_test_srmv2_turlsfromsurls_put()</highlight></codeline>
<codeline lineno="331"><highlight class="normal">{</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/>GFAL_LONG64<sp/>mock_filesizes[NUMBER_OF_FILES]<sp/>=<sp/>{10};</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/>errno<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>SCENARIO<sp/>1:<sp/>empty<sp/>protocol<sp/>list.<sp/>Call<sp/>must<sp/>be<sp/>OK.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>_protocol_list_scenario<sp/>=<sp/>E_EMPTY_LIST;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>res<sp/>=<sp/>srmv2_turlsfromsurls_put(mock_nbfiles,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**)mock_surls,</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)mock_srm_endpoint,<sp/>mock_filesizes,<sp/>mock_desiredpintime,</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mock_spacetokendesc,</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL,<sp/></highlight><highlight class="comment">/*<sp/>The<sp/>empty<sp/>protocol<sp/>list<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mock_reqtoken,<sp/>mock_pinfilestatus,<sp/>errbuf,<sp/>errbufsz,<sp/>mock_timeout);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>GFAL_TEST_EQUAL(NUMBER_OF_FILES,<sp/>res);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/>GFAL_TEST_EQUAL(0,<sp/>errno);</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>errno<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>errbuf[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>SCENARIO<sp/>2:<sp/>Wrong<sp/>protocol<sp/>list.<sp/>Call<sp/>must<sp/>return<sp/>error.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>_protocol_list_scenario<sp/>=<sp/>E_UNSUPPORTED_PROTOCOL;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>res<sp/>=<sp/>srmv2_turlsfromsurls_put(mock_nbfiles,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**)mock_surls,</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)mock_srm_endpoint,<sp/>mock_filesizes,<sp/>mock_desiredpintime,</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mock_spacetokendesc,</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_unsupported_protocol,</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mock_reqtoken,<sp/>mock_pinfilestatus,<sp/>errbuf,<sp/>errbufsz,<sp/>mock_timeout);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/>GFAL_TEST_EQUAL(-1,<sp/>res);</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/>GFAL_TEST_EQUAL(EOPNOTSUPP,<sp/>errno);</highlight></codeline>
<codeline lineno="361"><highlight class="normal">}</highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>_test_gfal_turlsfromsurls()</highlight></codeline>
<codeline lineno="364"><highlight class="normal">{</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/>gfal_internal<sp/>int_req<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/>gfal_request<sp/>req<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>errbufsz<sp/>=<sp/>1024;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>errbuf[errbufsz];</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/>GFAL_LONG64<sp/>mock_filesizes[NUMBER_OF_FILES]<sp/>=<sp/>{10};</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/>req<sp/>=<sp/>gfal_request_new();</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/>req-&gt;nbfiles<sp/>=<sp/>mock_nbfiles;</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/>req-&gt;defaultsetype<sp/>=<sp/>TYPE_SRMv2;</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/>req-&gt;setype<sp/>=<sp/>TYPE_SRMv2;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/>req-&gt;no_bdii_check<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/>req-&gt;srmv2_spacetokendesc<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<sp/>mock_spacetokendesc;</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/>req-&gt;surls<sp/>=<sp/>mock_surls;</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/>req-&gt;endpoint<sp/>=<sp/>mock_srm_endpoint;</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>SCENARIO<sp/>1:<sp/>empty<sp/>protocol<sp/>list.<sp/>Call<sp/>must<sp/>be<sp/>OK.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>This<sp/>will<sp/>utilize<sp/>srmv2_turlsfromsurls_get<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/>req-&gt;protocols<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__srm__group_1g4e6d4aab98935aaf408d8a5cdf9727d4" kindref="member">gfal_init</ref><sp/>(req,<sp/>&amp;int_req,<sp/>errbuf,<sp/>errbufsz);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/>errno<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/>_protocol_list_scenario<sp/>=<sp/>E_EMPTY_LIST;</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/>res<sp/>=<sp/>gfal_turlsfromsurls<sp/>(int_req,<sp/>errbuf,<sp/>errbufsz);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/>GFAL_TEST_EQUAL(0,<sp/>res);</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/>GFAL_TEST_EQUAL(0,<sp/>errno);</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>This<sp/>will<sp/>utilize<sp/>srmv2_turlsfromsurls_put<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/>req-&gt;oflag<sp/>|=<sp/>O_ACCMODE;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__srm__group_1g4e6d4aab98935aaf408d8a5cdf9727d4" kindref="member">gfal_init</ref><sp/>(req,<sp/>&amp;int_req,<sp/>errbuf,<sp/>errbufsz);</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/>errno<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/>_protocol_list_scenario<sp/>=<sp/>E_EMPTY_LIST;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/>res<sp/>=<sp/>gfal_turlsfromsurls<sp/>(int_req,<sp/>errbuf,<sp/>errbufsz);</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/>GFAL_TEST_EQUAL(0,<sp/>res);</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/>GFAL_TEST_EQUAL(0,<sp/>errno);</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>SCENARIO<sp/>1:<sp/>empty<sp/>protocol<sp/>list.<sp/>Call<sp/>must<sp/>be<sp/>OK.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>This<sp/>will<sp/>utilize<sp/>srmv2_turlsfromsurls_get<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/>req-&gt;oflag<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/>req-&gt;protocols<sp/>=<sp/>_unsupported_protocol;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__srm__group_1g4e6d4aab98935aaf408d8a5cdf9727d4" kindref="member">gfal_init</ref><sp/>(req,<sp/>&amp;int_req,<sp/>errbuf,<sp/>errbufsz);</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/>errno<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>_protocol_list_scenario<sp/>=<sp/>E_UNSUPPORTED_PROTOCOL;</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/>res<sp/>=<sp/>gfal_turlsfromsurls<sp/>(int_req,<sp/>errbuf,<sp/>errbufsz);</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/>GFAL_TEST_EQUAL(-1,<sp/>res);</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/>GFAL_TEST_EQUAL(EOPNOTSUPP,<sp/>errno);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>This<sp/>will<sp/>utilize<sp/>srmv2_turlsfromsurls_put<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/>req-&gt;oflag<sp/>|=<sp/>O_ACCMODE;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__srm__group_1g4e6d4aab98935aaf408d8a5cdf9727d4" kindref="member">gfal_init</ref><sp/>(req,<sp/>&amp;int_req,<sp/>errbuf,<sp/>errbufsz);</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/>errno<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>_protocol_list_scenario<sp/>=<sp/>E_UNSUPPORTED_PROTOCOL;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/>res<sp/>=<sp/>gfal_turlsfromsurls<sp/>(int_req,<sp/>errbuf,<sp/>errbufsz);</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/>GFAL_TEST_EQUAL(-1,<sp/>res);</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/>GFAL_TEST_EQUAL(EOPNOTSUPP,<sp/>errno);</highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="421"><highlight class="normal">}</highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>gfal_test__protocol_list_handling()</highlight></codeline>
<codeline lineno="424"><highlight class="normal">{</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>res<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/>_setup_srm_callers();</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/>__CALL_TEST(_test_protocol_list(srmv2_turlsfromsurls_get));</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/>__CALL_TEST(_test_protocol_list(srmv2_gete));</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/>__CALL_TEST(_test_protocol_list(srmv2_prestagee));</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/>__CALL_TEST(_test_protocol_list(srmv2_bringonline));</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/>__CALL_TEST(_test_srmv2_turlsfromsurls_put());</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/>__CALL_TEST(_test_gfal_turlsfromsurls());</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="436"><highlight class="normal">}</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>__CALL_TEST</highlight></codeline>
    </programlisting>
    <location file="/home/adevress/myworkspace/gfal/src/gfal_test__protocol_list_handling.c"/>
  </compounddef>
</doxygen>
