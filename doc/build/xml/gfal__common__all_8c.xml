<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.4.7">
  <compounddef id="gfal__common__all_8c" kind="file">
    <compoundname>gfal_common_all.c</compoundname>
    <includes local="no">dlfcn.h</includes>
    <includes local="no">regex.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">uuid/uuid.h</includes>
    <includes refid="gfal__prototypes_8h" local="no">gfal_prototypes.h</includes>
    <includes refid="gfal__types_8h" local="yes">gfal_types.h</includes>
    <includes refid="gfal__common__errverbose_8h" local="yes">gfal_common_errverbose.h</includes>
    <includes refid="gfal__common__dir__handle_8h" local="yes">gfal_common_dir_handle.h</includes>
    <includes refid="gfal__common__file__handle_8h" local="yes">gfal_common_file_handle.h</includes>
    <incdepgraph>
      <node id="174">
        <label>sys/stat.h</label>
      </node>
      <node id="178">
        <label>stdarg.h</label>
      </node>
      <node id="166">
        <label>stdlib.h</label>
      </node>
      <node id="181">
        <label>gfal_common_errverbose.h</label>
        <link refid="gfal__common__errverbose_8h"/>
        <childnode refid="176" relation="include">
        </childnode>
        <childnode refid="178" relation="include">
        </childnode>
        <childnode refid="182" relation="include">
        </childnode>
        <childnode refid="180" relation="include">
        </childnode>
        <childnode refid="179" relation="include">
        </childnode>
        <childnode refid="169" relation="include">
        </childnode>
      </node>
      <node id="168">
        <label>gfal_prototypes.h</label>
        <link refid="gfal__prototypes_8h-source"/>
        <childnode refid="169" relation="include">
        </childnode>
      </node>
      <node id="179">
        <label>errno.h</label>
      </node>
      <node id="175">
        <label>gfal_srm_ifce_types.h</label>
      </node>
      <node id="167">
        <label>uuid/uuid.h</label>
      </node>
      <node id="172">
        <label>sys/types.h</label>
      </node>
      <node id="180">
        <label>string.h</label>
      </node>
      <node id="183">
        <label>gfal_common_dir_handle.h</label>
        <link refid="gfal__common__dir__handle_8h"/>
        <childnode refid="176" relation="include">
        </childnode>
        <childnode refid="168" relation="include">
        </childnode>
      </node>
      <node id="171">
        <label>unistd.h</label>
      </node>
      <node id="169">
        <label>glib.h</label>
      </node>
      <node id="184">
        <label>gfal_common_file_handle.h</label>
        <link refid="gfal__common__file__handle_8h"/>
        <childnode refid="176" relation="include">
        </childnode>
        <childnode refid="168" relation="include">
        </childnode>
      </node>
      <node id="177">
        <label>gfal_common_catalog.h</label>
        <link refid="gfal__common__catalog_8h"/>
        <childnode refid="178" relation="include">
        </childnode>
        <childnode refid="167" relation="include">
        </childnode>
        <childnode refid="169" relation="include">
        </childnode>
        <childnode refid="179" relation="include">
        </childnode>
        <childnode refid="180" relation="include">
        </childnode>
        <childnode refid="173" relation="include">
        </childnode>
        <childnode refid="174" relation="include">
        </childnode>
        <childnode refid="168" relation="include">
        </childnode>
        <childnode refid="170" relation="include">
        </childnode>
      </node>
      <node id="176">
        <label>gfal_constants.h</label>
        <link refid="gfal__constants_8h-source"/>
      </node>
      <node id="163">
        <label>/home/adevress/myworkspace/gfal/src/common/gfal_common_all.c</label>
        <link refid="gfal_common_all.c"/>
        <childnode refid="164" relation="include">
        </childnode>
        <childnode refid="165" relation="include">
        </childnode>
        <childnode refid="166" relation="include">
        </childnode>
        <childnode refid="167" relation="include">
        </childnode>
        <childnode refid="168" relation="include">
        </childnode>
        <childnode refid="170" relation="include">
        </childnode>
        <childnode refid="181" relation="include">
        </childnode>
        <childnode refid="183" relation="include">
        </childnode>
        <childnode refid="184" relation="include">
        </childnode>
      </node>
      <node id="165">
        <label>regex.h</label>
      </node>
      <node id="182">
        <label>stdio.h</label>
      </node>
      <node id="170">
        <label>gfal_types.h</label>
        <link refid="gfal__types_8h-source"/>
        <childnode refid="171" relation="include">
        </childnode>
        <childnode refid="169" relation="include">
        </childnode>
        <childnode refid="172" relation="include">
        </childnode>
        <childnode refid="173" relation="include">
        </childnode>
        <childnode refid="174" relation="include">
        </childnode>
        <childnode refid="175" relation="include">
        </childnode>
        <childnode refid="176" relation="include">
        </childnode>
        <childnode refid="168" relation="include">
        </childnode>
        <childnode refid="177" relation="include">
        </childnode>
      </node>
      <node id="173">
        <label>dirent.h</label>
      </node>
      <node id="164">
        <label>dlfcn.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="gfal__common__all_8c_109fc3dfb86b46f489c9bf89b784a285a" prot="public" static="no">
        <name>XVERSION_STR</name>
        <param><defname>x</defname></param>
        <initializer>#x</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/common/gfal_common_all.c" line="36" bodyfile="/home/adevress/myworkspace/gfal/src/common/gfal_common_all.c" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gfal__common__all_8c_186cff2cb94b4b7cbf259ff9859c0dc50" prot="public" static="no">
        <name>VERSION_STR</name>
        <param><defname>x</defname></param>
        <initializer>XVERSION_STR(x)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/common/gfal_common_all.c" line="37" bodyfile="/home/adevress/myworkspace/gfal/src/common/gfal_common_all.c" bodystart="37" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="gfal__common__all_8c_18410ba458f920d8f8a8f0e5594170fe4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>gfal_handle</type>
        <definition>gfal_handle gfal_initG</definition>
        <argsstring>(GError **err)</argsstring>
        <name>gfal_initG</name>
        <param>
          <type>GError **</type>
          <declname>err</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>initiate a gfal&apos;s context with default parameters for use <simplesect kind="return"><para>a gfal_handle, need to be free after usage. return NULL if errors </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/common/gfal_common_all.c" line="47" bodyfile="/home/adevress/myworkspace/gfal/src/common/gfal_common_all.c" bodystart="46" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="gfal__common__all_8c_19dbd943eaed291897d852fc3ae560058" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gfal_handle_freeG</definition>
        <argsstring>(gfal_handle handle)</argsstring>
        <name>gfal_handle_freeG</name>
        <param>
          <type>gfal_handle</type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>free a gfal&apos;s handle, safe if null </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/common/gfal_common_all.c" line="69" bodyfile="/home/adevress/myworkspace/gfal/src/common/gfal_common_all.c" bodystart="69" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="gfal__common__all_8c_1a7e1120eb32c4c7f293f6fbcb4f0ea33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char **</type>
        <definition>char** gfal_GList_to_tab</definition>
        <argsstring>(GList *surls)</argsstring>
        <name>gfal_GList_to_tab</name>
        <param>
          <type>GList *</type>
          <declname>surls</declname>
        </param>
        <briefdescription>
<para>convert glist of surl char* to char** </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>return NULL if error or pointer to char** </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/common/gfal_common_all.c" line="83" bodyfile="/home/adevress/myworkspace/gfal/src/common/gfal_common_all.c" bodystart="83" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="gfal__common__all_8c_187219c9e2c6323b67c2ac70354ee2645" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int *</type>
        <definition>int* gfal_GList_to_tab_int</definition>
        <argsstring>(GList *int_list)</argsstring>
        <name>gfal_GList_to_tab_int</name>
        <param>
          <type>GList *</type>
          <declname>int_list</declname>
        </param>
        <briefdescription>
<para>convert glist of int to a table of int </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>return NULL if error or pointer to int* </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/common/gfal_common_all.c" line="98" bodyfile="/home/adevress/myworkspace/gfal/src/common/gfal_common_all.c" bodystart="98" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="gfal__common__all_8c_10323a4ab58106e316851c1ae06148e28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int resolve_dlsym_listG</definition>
        <argsstring>(void *handle, void ***flist, const char **sym_list, int num, GError **err)</argsstring>
        <name>resolve_dlsym_listG</name>
        <param>
          <type>void *</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>void ***</type>
          <declname>flist</declname>
        </param>
        <param>
          <type>const char **</type>
          <declname>sym_list</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num</declname>
        </param>
        <param>
          <type>GError **</type>
          <declname>err</declname>
        </param>
        <briefdescription>
<para>open dynamycally a list of symbols resolve all symbols from sym_list to flist with the associated dlhandle set GError properly if error </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/common/gfal_common_all.c" line="116" bodyfile="/home/adevress/myworkspace/gfal/src/common/gfal_common_all.c" bodystart="116" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="group__posix__group_1gddfc3a2a117a105f29a75d1864a527c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* gfal_version</definition>
        <argsstring>()</argsstring>
        <name>gfal_version</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>return a string of the current gfal version </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/common/gfal_common_all.c" line="134" bodyfile="/home/adevress/myworkspace/gfal/src/common/gfal_common_all.c" bodystart="134" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="gfal__common__all_8c_1aed64917ebc1c60ab8ccd2c4dfbd2c3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>gboolean</type>
        <definition>gboolean is_valid_access_result</definition>
        <argsstring>(int status)</argsstring>
        <name>is_valid_access_result</name>
        <param>
          <type>int</type>
          <declname>status</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/common/gfal_common_all.c" line="144" bodyfile="/home/adevress/myworkspace/gfal/src/common/gfal_common_all.c" bodystart="144" bodyend="160"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="gfal__common__all_8c_162d87ce420a9bf9aa568c34dd4e7963a" prot="public" static="yes" mutable="no">
        <type>const char *</type>
        <definition>const char* gfalversion</definition>
        <argsstring></argsstring>
        <name>gfalversion</name>
        <initializer> VERSION_STR(VERSION)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/common/gfal_common_all.c" line="40" bodyfile="/home/adevress/myworkspace/gfal/src/common/gfal_common_all.c" bodystart="40" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>core file for the utility function of gfal common part </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Devresse Adrien </para></simplesect>
<simplesect kind="version"><para>0.0.1 </para></simplesect>
<simplesect kind="date"><para>02/05/2011 </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>Members<sp/>of<sp/>the<sp/>EGEE<sp/>Collaboration.<sp/>2004.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>See<sp/>http://www.eu-egee.org/partners/<sp/>for<sp/>details<sp/>on<sp/>the<sp/>copyright<sp/>holders.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="preprocessor">#include<sp/>&lt;dlfcn.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;regex.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;uuid/uuid.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;gfal_prototypes.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gfal_types.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="gfal__common__errverbose_8h" kindref="compound">gfal_common_errverbose.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="gfal__common__dir__handle_8h" kindref="compound">gfal_common_dir_handle.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="gfal__common__file__handle_8h" kindref="compound">gfal_common_file_handle.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>XVERSION_STR(x)<sp/>#x</highlight></codeline>
<codeline lineno="37"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>VERSION_STR(x)<sp/>XVERSION_STR(x)</highlight></codeline>
<codeline lineno="38"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>the<sp/>version<sp/>should<sp/>be<sp/>set<sp/>by<sp/>a<sp/>&quot;define&quot;<sp/>at<sp/>the<sp/>makefile<sp/>level<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*gfalversion<sp/>=<sp/>VERSION_STR(VERSION);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal">gfal_handle<sp/><ref refid="gfal__common__all_8c_18410ba458f920d8f8a8f0e5594170fe4" kindref="member">gfal_initG</ref><sp/>(GError**<sp/>err)</highlight></codeline>
<codeline lineno="47"><highlight class="normal">{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GError*<sp/>tmp_err=NULL;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gfal_handle<sp/>handle<sp/>=<sp/>calloc(1,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>gfal_handle_));</highlight><highlight class="comment">//<sp/>clear<sp/>allocation<sp/>of<sp/>the<sp/>struct<sp/>and<sp/>set<sp/>defautl<sp/>options</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(handle<sp/>==<sp/>NULL){</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errno=<sp/>ENOMEM;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_set_error(err,0,ENOMEM,<sp/></highlight><highlight class="stringliteral">&quot;[gfal_initG]<sp/>bad<sp/>allocation,<sp/>no<sp/>more<sp/>memory<sp/>free&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!g_thread_supported<sp/>())</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_thread_init(NULL);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>handle-&gt;no_bdii_check=FALSE;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>handle-&gt;catalog_opt.catalog_number=<sp/>0;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="gfal__common__catalog_8c_196ebd098ad2447a81f096207879b9d3a" kindref="member">gfal_catalogs_instance</ref>(handle,<sp/>&amp;tmp_err);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(tmp_err)</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_propagate_prefixed_error(err,<sp/>tmp_err,<sp/></highlight><highlight class="stringliteral">&quot;[%s]&quot;</highlight><highlight class="normal">,<sp/>__func__);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>handle;</highlight></codeline>
<codeline lineno="63"><highlight class="normal">}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="gfal__common__all_8c_19dbd943eaed291897d852fc3ae560058" kindref="member">gfal_handle_freeG</ref><sp/>(gfal_handle<sp/>handle){</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(handle<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="gfal__common__catalog_8c_1c0412247b6ddd6ceac7fb171c56adaad" kindref="member">gfal_catalogs_delete</ref>(handle,<sp/>NULL);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gfal_dir_handle_container_delete(&amp;(handle-&gt;fdescs));</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(handle);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>handle<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="76"><highlight class="normal">}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/><ref refid="gfal__common__all_8c_1a7e1120eb32c4c7f293f6fbcb4f0ea33" kindref="member">gfal_GList_to_tab</ref>(GList*<sp/>surls){</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>surl_size<sp/>=<sp/>g_list_length(surls);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**resu<sp/>=<sp/>surl_size?((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**)calloc(surl_size+1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*))):NULL;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;i&lt;surl_size;<sp/>++i){</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>resu[i]=<sp/>surls-&gt;data;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>surls<sp/>=<sp/>g_list_next(surls);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>resu;</highlight></codeline>
<codeline lineno="92"><highlight class="normal">}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><ref refid="gfal__common__all_8c_187219c9e2c6323b67c2ac70354ee2645" kindref="member">gfal_GList_to_tab_int</ref>(GList*<sp/>int_list){</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>int_size<sp/>=<sp/>g_list_length(int_list);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*resu<sp/>=<sp/>int_size?((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*)calloc(int_size+1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">))):NULL;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;i&lt;int_size;<sp/>++i){</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>resu[i]=<sp/>GPOINTER_TO_INT(int_list-&gt;data);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int_list<sp/>=<sp/>g_list_next(int_list);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>resu;</highlight></codeline>
<codeline lineno="107"><highlight class="normal">}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="gfal__common__all_8c_10323a4ab58106e316851c1ae06148e28" kindref="member">resolve_dlsym_listG</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>handle,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">***<sp/>flist,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>sym_list,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num,<sp/>GError**<sp/>err){</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(num<sp/>&gt;0){</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>sym<sp/>=<sp/>dlsym(handle,<sp/>*sym_list);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!sym){</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_set_error(err,0,<sp/>EBADR,<sp/></highlight><highlight class="stringliteral">&quot;[resolve_dlsym_listG]<sp/>Unable<sp/>to<sp/>resolve<sp/>symbol<sp/>%s,<sp/>dlsym<sp/>Error<sp/>:<sp/>%s<sp/>&quot;</highlight><highlight class="normal">,*sym_list,<sp/>dlerror());</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**flist=<sp/>sym;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="gfal__common__all_8c_10323a4ab58106e316851c1ae06148e28" kindref="member">resolve_dlsym_listG</ref>(handle,<sp/>flist+1,<sp/>sym_list+1,<sp/>num-1,<sp/>err);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>num;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="128"><highlight class="normal">}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="group__posix__group_1gddfc3a2a117a105f29a75d1864a527c0" kindref="member">gfal_version</ref>(){</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<sp/>gfalversion;</highlight></codeline>
<codeline lineno="136"><highlight class="normal">}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="comment">/***</highlight></codeline>
<codeline lineno="141"><highlight class="comment"><sp/>*<sp/>check<sp/>the<sp/>validity<sp/>of<sp/>a<sp/>result<sp/>for<sp/>a<sp/>&quot;access&quot;<sp/>standard<sp/>call</highlight></codeline>
<codeline lineno="142"><highlight class="comment"><sp/>*<sp/>@return<sp/>TRUE<sp/>if<sp/>status<sp/>is<sp/>a<sp/>valid<sp/>and<sp/>standard<sp/>access<sp/>methode<sp/>error,<sp/>else<sp/>return<sp/>FALSE</highlight></codeline>
<codeline lineno="143"><highlight class="comment"><sp/>*<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/>gboolean<sp/>is_valid_access_result(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>status){</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(status){</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ENOENT:</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>EACCES:</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ELOOP:</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ENAMETOOLONG:</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ENOTDIR:</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>EROFS:{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="160"><highlight class="normal">}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/></highlight></codeline>
    </programlisting>
    <location file="/home/adevress/myworkspace/gfal/src/common/gfal_common_all.c"/>
  </compounddef>
</doxygen>
