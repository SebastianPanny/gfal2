<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.4.7">
  <compounddef id="gfal__testsuite_8h" kind="file">
    <compoundname>gfal_testsuite.h</compoundname>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdlib.h</includes>
    <includedby refid="gfal__test____gfal__parseturl_8c" local="yes">/home/adevress/myworkspace/gfal/src/gfal_test__gfal_parseturl.c</includedby>
    <includedby refid="gfal__test____lfc__mkdirp_8c" local="yes">/home/adevress/myworkspace/gfal/src/gfal_test__lfc_mkdirp.c</includedby>
    <includedby refid="gfal__test____mds__ifce_8c" local="yes">/home/adevress/myworkspace/gfal/src/gfal_test__mds_ifce.c</includedby>
    <includedby refid="gfal__test____protocol__list__handling_8c" local="yes">/home/adevress/myworkspace/gfal/src/gfal_test__protocol_list_handling.c</includedby>
    <includedby refid="gfal__unit__testsuite_8c" local="yes">/home/adevress/myworkspace/gfal/src/gfal_unit_testsuite.c</includedby>
    <incdepgraph>
      <node id="372">
        <label>stdlib.h</label>
      </node>
      <node id="370">
        <label>/home/adevress/myworkspace/gfal/src/gfal_testsuite.h</label>
        <link refid="gfal_testsuite.h"/>
        <childnode refid="371" relation="include">
        </childnode>
        <childnode refid="372" relation="include">
        </childnode>
      </node>
      <node id="371">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="gfal__testsuite_8h_1fe3e17add053f602d4b1ebf3405d83ed" prot="public" static="no">
        <name>GFAL_TEST_ASSERT</name>
        <param><defname>condition</defname></param>
        <initializer>do { \
        printf(&quot;\t Test at %s:%d... &quot;, __FILE__, __LINE__); \
        if (!(condition)) { \
            printf(&quot;FAILED\n&quot;); \
            exit(-1); \
        } \
        printf(&quot;OK\n&quot;); \
    } while (0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Test the logical condition. If it is logical false, the test execution stops, error message is displayed. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/gfal_testsuite.h" line="38" bodyfile="/home/adevress/myworkspace/gfal/src/gfal_testsuite.h" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gfal__testsuite_8h_155d1a971ebfd3c5131c303fb14518b18" prot="public" static="no">
        <name>GFAL_TEST_EQUAL</name>
        <param><defname>expected</defname></param>
        <param><defname>value</defname></param>
        <initializer>do { \
        printf(&quot;\t Test at %s:%d... &quot;, __FILE__, __LINE__); \
        if ((expected) != (value)) { \
            printf(&quot;FAILED. Expected: %d, Got: %d\n&quot;, (expected), (value)); \
            exit(-1); \
        } \
        printf(&quot;OK\n&quot;); \
    } while (0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Test equality of two values. The test expects value &quot;expected&quot;, compares with &quot;value&quot;. In case of inequality, the test execution stops, error message is displayed. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/gfal_testsuite.h" line="51" bodyfile="/home/adevress/myworkspace/gfal/src/gfal_testsuite.h" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gfal__testsuite_8h_1c9679f2e2dbb635d8ac4e1d35edee7cb" prot="public" static="no">
        <name>GFAL_TEST_EQUAL_STRING</name>
        <param><defname>expected</defname></param>
        <param><defname>value</defname></param>
        <initializer>do { \
        printf(&quot;\t Test at %s:%d... &quot;, __FILE__, __LINE__); \
        if (strcmp(expected, value) != 0) { \
            printf(&quot;FAILED. Expected: \&quot;%s\&quot;, Got: \&quot;%s\&quot;\n&quot;, (expected), (value)); \
            exit(-1); \
        } \
        printf(&quot;OK\n&quot;); \
    } while (0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Test equality of two string values. The test expects value &quot;expected&quot;, compares with &quot;value&quot;. In case of inequality, the test execution stops, error message is displayed. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/gfal_testsuite.h" line="64" bodyfile="/home/adevress/myworkspace/gfal/src/gfal_testsuite.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gfal__testsuite_8h_1aee4c477178dde91471ee48227d3600c" prot="public" static="no">
        <name>GFAL_TEST_RUN</name>
        <param><defname>test</defname></param>
        <initializer>do { \
        printf(&quot;\nRunning: %s...\n&quot;, #test); \
        test(); \
        __gfal_tests_run++; \
       } while (0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/gfal_testsuite.h" line="71" bodyfile="/home/adevress/myworkspace/gfal/src/gfal_testsuite.h" bodystart="66" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="gfal__testsuite_8h_197fd2678564d58a73fdd575806fd1220" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int __gfal_tests_run</definition>
        <argsstring></argsstring>
        <name>__gfal_tests_run</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Counts the executed test </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/adevress/myworkspace/gfal/src/gfal_testsuite.h" line="74" bodyfile="/home/adevress/myworkspace/gfal/src/gfal_unit_testsuite.c" bodystart="22" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Authors:<sp/>Zsolt<sp/>Molnar<sp/>&lt;zsolt.molnar@cern.ch,<sp/>http://www.zsoltmolnar.hu&gt;</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>Members<sp/>of<sp/>the<sp/>EGEE<sp/>Collaboration.<sp/>2004.</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>See<sp/>http://www.eu-egee.org/partners/<sp/>for<sp/>details<sp/>on<sp/>the<sp/>copyright<sp/>holders.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>Inspired<sp/>by<sp/>MinUnit<sp/>--<sp/>a<sp/>minimal<sp/>unit<sp/>testing<sp/>framework<sp/>for<sp/>C</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>(http://www.jera.com/techinfo/jtns/jtn002.html)</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>GFAL_UNIT_TESTSUITE_H</highlight></codeline>
<codeline lineno="23"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>GFAL_UNIT_TESTSUITE_H</highlight></codeline>
<codeline lineno="24"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="preprocessor">#define<sp/>GFAL_TEST_ASSERT(condition)<sp/>\</highlight></codeline>
<codeline lineno="31"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>do<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="32"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;\t<sp/>Test<sp/>at<sp/>%s:%d...<sp/>&quot;,<sp/>__FILE__,<sp/>__LINE__);<sp/>\</highlight></codeline>
<codeline lineno="33"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(!(condition))<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="34"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;FAILED\n&quot;);<sp/>\</highlight></codeline>
<codeline lineno="35"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(-1);<sp/>\</highlight></codeline>
<codeline lineno="36"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="37"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;OK\n&quot;);<sp/>\</highlight></codeline>
<codeline lineno="38"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>while<sp/>(0)</highlight></codeline>
<codeline lineno="39"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="43"><highlight class="preprocessor">#define<sp/>GFAL_TEST_EQUAL(expected,<sp/>value)<sp/>\</highlight></codeline>
<codeline lineno="44"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>do<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="45"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;\t<sp/>Test<sp/>at<sp/>%s:%d...<sp/>&quot;,<sp/>__FILE__,<sp/>__LINE__);<sp/>\</highlight></codeline>
<codeline lineno="46"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>((expected)<sp/>!=<sp/>(value))<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="47"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;FAILED.<sp/>Expected:<sp/>%d,<sp/>Got:<sp/>%d\n&quot;,<sp/>(expected),<sp/>(value));<sp/>\</highlight></codeline>
<codeline lineno="48"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(-1);<sp/>\</highlight></codeline>
<codeline lineno="49"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="50"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;OK\n&quot;);<sp/>\</highlight></codeline>
<codeline lineno="51"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>while<sp/>(0)</highlight></codeline>
<codeline lineno="52"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="56"><highlight class="preprocessor">#define<sp/>GFAL_TEST_EQUAL_STRING(expected,<sp/>value)<sp/>\</highlight></codeline>
<codeline lineno="57"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>do<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="58"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;\t<sp/>Test<sp/>at<sp/>%s:%d...<sp/>&quot;,<sp/>__FILE__,<sp/>__LINE__);<sp/>\</highlight></codeline>
<codeline lineno="59"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(strcmp(expected,<sp/>value)<sp/>!=<sp/>0)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="60"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;FAILED.<sp/>Expected:<sp/>\&quot;%s\&quot;,<sp/>Got:<sp/>\&quot;%s\&quot;\n&quot;,<sp/>(expected),<sp/>(value));<sp/>\</highlight></codeline>
<codeline lineno="61"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(-1);<sp/>\</highlight></codeline>
<codeline lineno="62"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="63"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;OK\n&quot;);<sp/>\</highlight></codeline>
<codeline lineno="64"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>while<sp/>(0)</highlight></codeline>
<codeline lineno="65"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GFAL_TEST_RUN(test)<sp/>\</highlight></codeline>
<codeline lineno="67"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>do<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="68"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;\nRunning:<sp/>%s...\n&quot;,<sp/>#test);<sp/>\</highlight></codeline>
<codeline lineno="69"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test();<sp/>\</highlight></codeline>
<codeline lineno="70"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__gfal_tests_run++;<sp/>\</highlight></codeline>
<codeline lineno="71"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>while<sp/>(0)</highlight></codeline>
<codeline lineno="72"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="74"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__gfal_tests_run;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>#ifndef<sp/>GFAL_UNIT_TESTSUITE_H<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/adevress/myworkspace/gfal/src/gfal_testsuite.h"/>
  </compounddef>
</doxygen>
