#!/usr/bin/python
##
# Example builind script
# @author : Devresse Adrien
# @version : v0.2
# @date 21/03/2011

Import('*')	# import SConstruct exported var
import os
import random
import shutil
import commands

src = ['example/gfal_testrw.c']
src2 = ['example/gfal_testread.c']
src3 = ['example/gfal_testdir.c']
src4 = ['example/gfal_testchmod.c']
src5 = ['example/gfal_testcreatedir.c']
src6 = ['example/gfal_teststat.c']
exec_test= "exec_tests"

#
#	be carefull about this test, an other version of the gfallib must not be in the ld path
#

##
# setup the library path to add the required library in the env and return the old ldpath
def setup_LDPATH():
	abslibs= map(lambda x: Dir(x).abspath,libs)		# get abs path
	#if(os.getenv('LD_LIBRARY_PATH') is None):
	old_ldpath= os.getenv('LD_LIBRARY_PATH')
	os.environ['LD_LIBRARY_PATH']=''
	for l in abslibs:
		if(os.environ['LD_LIBRARY_PATH'].count(l) <1 ):
			os.environ['LD_LIBRARY_PATH']= os.getenv('LD_LIBRARY_PATH') +":" + l
	return old_ldpath
		
##
# set the ld path to the given value
def set_LDPATH(ldp):
	os.environ['LD_LIBRARY_PATH']=ldp

def compile_testing():
	VariantDir('build', 'example',duplicate=0)
	p1=env.Program('build/gfal_testrw', src, LIBS='gfal')
	p2=env.Program('build/gfal_testread', src2, LIBS='gfal')
	p3=env.Program('build/gfal_testdir', src3, LIBS='gfal')
	p4=env.Program('build/gfal_testchmod', src4, LIBS='gfal')
	p5=env.Program('build/gfal_testcreatedir', src5, LIBS='gfal')
	p6= env.Program('build/gfal_teststat', src6, LIBS='gfal')
	return [p1,p2,p3,p4,p5,p6]

def run_test(target,source,env):
	fpath= Dir('#testing').abspath + os.sep +"build"+ os.sep+ exec_test
	print fpath
	r= os.system(fpath)
	if(r is not 0):
		print "Error while running tests, exit"
		os._exit(-1)
	return None

def testing():
	x =compile_testing()
	old= setup_LDPATH()
	print "[Debug] PATH : "+ os.getenv('LD_LIBRARY_PATH')
	r= env.Command('test',x, run_test)
	set_LDPATH(old)

	
		


if 'testing' in COMMAND_LINE_TARGETS:
	testing()


